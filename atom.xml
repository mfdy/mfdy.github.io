<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mfdy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-23T03:14:37.021Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MFDY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python面向对象程序设计</title>
    <link href="http://yoursite.com/2019/05/16/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/05/16/Python面向对象程序设计/</id>
    <published>2019-05-15T16:00:00.000Z</published>
    <updated>2019-05-23T03:14:37.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python面向对象程序设计"><a href="#Python面向对象程序设计" class="headerlink" title="Python面向对象程序设计"></a><center>Python面向对象程序设计</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><p>■ Python完全采用了面向对象程序设计的思想，是真正面向对象的高级动态编程语言，完全支持面向对象的基本功能，如封装、继承、多态以及对基类方法的覆盖或重写。</p><p>■ Python中对象的概念很广泛，<b>Python中的一切内容都可以称为对象</b>，除了数字、字符串、列表、元组、字典、集合、range对象、zip对象等等，函数也是对象，类也是对象。</p><p>■ 创建类时用<b>变量形式表示的对象属性称为数据成员或成员属性</b>，用<b>函数形式表示的对象行为称为成员方法</b>，成员属性和成员方法统称为类的成员。</p><hr><h2 id="6-1-类的定义与使用"><a href="#6-1-类的定义与使用" class="headerlink" title="6.1 类的定义与使用"></a>6.1 类的定义与使用</h2><h3 id="6-1-1-类定义语法"><a href="#6-1-1-类定义语法" class="headerlink" title="6.1.1 类定义语法"></a>6.1.1 类定义语法</h3><p>Python使用class关键字来定义类，class关键字之后是一个空格，然后是类的名字，再然后是一个冒号，最后换行并定义类的内部实现。</p><p>定义了类之后，可以用来实例化对象，并通过“对象名.成员”的方式来访问其中的数据成员或成员方法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">infor</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This is a Car"</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; car = Car()</span><br><span class="line">&gt;&gt; car.infor()</span><br><span class="line">This <span class="keyword">is</span> a Car</span><br></pre></td></tr></table></figure><p>Python提供了一个关键字“pass”，类似于空语句，可以用在类和函数的定义中或者选择结构中。当暂时没有确定如何实现功能，或者为以后的软件升级预留空间，或者其他类型功能时，可以使用该关键字来“占位”。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python面向对象程序设计&quot;&gt;&lt;a href=&quot;#Python面向对象程序设计&quot; class=&quot;headerlink&quot; title=&quot;Python面向对象程序设计&quot;&gt;&lt;/a&gt;&lt;center&gt;Python面向对象程序设计&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/Python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数设计与使用</title>
    <link href="http://yoursite.com/2019/05/15/Python%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/15/Python函数设计与使用/</id>
    <published>2019-05-14T16:00:00.000Z</published>
    <updated>2019-05-16T04:16:33.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python函数设计与使用"><a href="#Python函数设计与使用" class="headerlink" title="Python函数设计与使用"></a><center>Python函数设计与使用</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><h2 id="5-1-函数定义与调用"><a href="#5-1-函数定义与调用" class="headerlink" title="5.1 函数定义与调用"></a>5.1 函数定义与调用</h2><p>&emsp;■ 将可能需要反复执行的代码封装为函数，并在需要该功能的地方进行调用，不仅可以实现代码复用，更重要的是可以保证代码的一致性，只需要修改该函数代码则所有调用均受到影响。<br>&emsp;■ 设计函数时，应注意提高模块的内聚性，同时降低模块之间的隐式耦合。<br>&emsp;■ 在实际项目开发中，往往会把一些通用的函数封装到一个模块中，并把这个通用模块文件放到顶层文件夹中，这样更方便管理。</p><p>在Python中，定义函数的语法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">([参数列表])</span>:</span></span><br><span class="line">   <span class="string">'''注释'''</span></span><br><span class="line">   函数体</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>函数形参不需要声明类型，也不需要指定函数返回值类型</li><li>即使该函数不需要接受任何参数，也需要保留圆括号</li><li>括号后面的冒号不可少</li><li>需要有缩进</li><li>Python允许嵌套定义函数</li></ol><p>例如：求斐波那契中小于参数n的所有值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="string">'''accept an integer n.</span></span><br><span class="line"><span class="string">      return ……'''</span></span><br><span class="line">   a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span> a &lt; n:</span><br><span class="line">      print(a, end=<span class="string">' '</span>)</span><br><span class="line">      a, b = b, a + b</span><br><span class="line">   print()</span><br></pre></td></tr></table></figure><p><b>递归调用：</b>函数的递归调用是函数调用的一种特殊情况，函数调用自己，自己再调用自己，自己再调用自己，…，当某个条件得到满足的时候就不再调用了，然后再一层一层地返回直到该函数的第一次调用。</p><p>例：普通递归求斐波那契数列的第n项值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> (n &lt;= <span class="number">1</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">7</span>)</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-2-形参与实参"><a href="#5-2-形参与实参" class="headerlink" title="5.2 形参与实参"></a>5.2 形参与实参</h2><p>&emsp;&emsp;函数定义时括弧内为形参，一个函数可以没有形参，但是括弧必须要有，表示该函数不接受参数。<br>&emsp;&emsp;函数调用时向其传递实参，将实参的值或引用传递给形参。<br>&emsp;&emsp;在定义函数时，对参数个数并没有限制，如果有多个形参，需要使用逗号进行分割。   </p><p><b>对于绝大多数情况下，在函数内部直接修改形参的值不会影响实参。</b></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addone</span><span class="params">(a)</span>:</span></span><br><span class="line">   print(a, end = <span class="string">' '</span>)</span><br><span class="line">   a += <span class="number">1</span></span><br><span class="line">   print(a, end = <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">addone(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>运行结果为: <code>3 4 3</code></p><p><b>但在有些情况下，可以通过特殊的方式在函数内部修改实参的值.</b></p><p>&emsp;&emsp;即如果传递给函数的是可变序列，并且在函数内部使用下标或可变序列自身的方法增加、删除元素或修改元素时，修改后的结果是可以反映到函数之外的，实参也得到相应的修改。</p><ol><li>修改列表元素值</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(v)</span>:</span></span><br><span class="line">   v[<span class="number">0</span>] = v[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">a = [<span class="number">2</span>]</span><br><span class="line">modify(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>为列表增加元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(v, item)</span>:</span></span><br><span class="line">   v.append(item)</span><br><span class="line">a = [<span class="number">2</span>]</span><br><span class="line">modify(a, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>修改字典元素值或为字典增加元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(d)</span>:</span></span><br><span class="line">   d[<span class="string">'age'</span>] = <span class="number">38</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>:<span class="string">'Dong'</span>, <span class="string">'age'</span>:<span class="number">37</span>, <span class="string">'sex'</span>:<span class="string">'Male'</span>&#125;</span><br><span class="line">modify(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'age'</span>: <span class="number">38</span>, <span class="string">'sex'</span>: <span class="string">'Male'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-参数类型"><a href="#5-3-参数类型" class="headerlink" title="5.3 参数类型"></a>5.3 参数类型</h2><p>在Python中，函数参数有很多种：可以为普通参数、默认值参数、关键参数、可变长度参数等等。</p><p>Python在定义函数时不需要指定形参的类型，完全由调用者传递的实参类型以及Python解释器的理解和推断来决定，类似于重载和泛型。</p><p>Python函数定义时也不需要指定函数的类型，这将由函数中的return语句来决定，如果没有return语句或者return没有得到执行，则认为返回空值None。</p><ol><li>Python支持对函数参数和返回值类型的标注，但实际上并不起任何作用，只是看起来方便。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(x:int, y:int)</span> -&gt; int:</span></span><br><span class="line">   <span class="string">'''x and y must be integers, return an integer x+y'''</span></span><br><span class="line">   <span class="keyword">assert</span> isinstance(x, int), <span class="string">'x must be integer'</span></span><br><span class="line">   <span class="keyword">assert</span> isinstance(y, int), <span class="string">'y must be integer'</span></span><br><span class="line">   z = x + y</span><br><span class="line">   <span class="keyword">assert</span> isinstance(z, int), <span class="string">'must return an integer'</span></span><br><span class="line">   <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">2</span>, <span class="number">3.0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(test(<span class="number">2</span>, <span class="number">3.0</span>))</span><br><span class="line">  File <span class="string">"D:1.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> test</span><br><span class="line">    <span class="keyword">assert</span> isinstance(y, int), <span class="string">'y must be integer'</span></span><br><span class="line">AssertionError: y must be integer</span><br></pre></td></tr></table></figure><ol start="2"><li>位置参数是比较常用的形式，调用函数时实参和形参的顺序必须严格一致，并且实参和形参的数量必须相同。</li></ol><h3 id="5-3-1-默认值参数"><a href="#5-3-1-默认值参数" class="headerlink" title="5.3.1 默认值参数"></a>5.3.1 默认值参数</h3><ol><li><p>默认值参数必须出现在函数参数列表的最右端，且任何一个默认值参数右边不能有非默认值参数。</p></li><li><p>调用带有默认值参数的函数时，可以不对默认值参数进行赋值，也可以赋值</p></li></ol><h2 id="5-4-return语句"><a href="#5-4-return语句" class="headerlink" title="5.4 return语句"></a>5.4 return语句</h2><h2 id="5-5-变量作用域"><a href="#5-5-变量作用域" class="headerlink" title="5.5 变量作用域"></a>5.5 变量作用域</h2><h2 id="5-6-lambda表达式"><a href="#5-6-lambda表达式" class="headerlink" title="5.6 lambda表达式"></a>5.6 lambda表达式</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python函数设计与使用&quot;&gt;&lt;a href=&quot;#Python函数设计与使用&quot; class=&quot;headerlink&quot; title=&quot;Python函数设计与使用&quot;&gt;&lt;/a&gt;&lt;center&gt;Python函数设计与使用&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="函数" scheme="http://yoursite.com/categories/Python/%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python选择与循环</title>
    <link href="http://yoursite.com/2019/05/13/Python%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/05/13/Python选择与循环/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2019-05-28T14:22:51.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python选择与循环"><a href="#Python选择与循环" class="headerlink" title="Python选择与循环"></a><center>Python选择与循环</center></h1><h2 id="3-1-条件表达式"><a href="#3-1-条件表达式" class="headerlink" title="3.1 条件表达式"></a>3.1 条件表达式</h2><p>首先，说一下所有的运算符：  </p><ol><li>算术运算符：<code>+</code>、 <code>-</code>、 <code>*</code>、 <code>/</code>、 <code>//</code>、 <code>%</code>、 <code>**</code>  </li><li>关系运算符：<code>&gt;</code>、 <code>&lt;</code>、 <code>==</code>、 <code>&lt;=</code>、 <code>&gt;=</code>、 <code>!=</code>，可以连续使用，如  </li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt; <span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt; <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><ol start="3"><li>测试运算符：<code>in</code>、 <code>not in</code>、 <code>is</code>、 <code>is not</code>  </li><li>逻辑运算符：<code>and</code>、 <code>or</code>、 <code>not</code>，注意短路求值  </li><li>位运算符：<code>~</code>、 <code>&amp;</code>、 <code>|</code>、 <code>^</code>、 <code>&lt;&lt;</code>、 <code>&gt;&gt;</code>  </li><li>矩阵乘法运算符：<code>@</code>  </li></ol><p>在选择和循环结构中，条件表达式的值只要不是False、0（或0.0、0j等）、空值None、空列表、空元组、空集合、空字典、空字符串、空range对象或其他空迭代对象，Python解释器均认为与True等价。</p><p>从这个意义上来讲，几乎所有的Python合法表达式都可以作为条件表达式，包括含有函数调用的表达式。</p><p>例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> a:</span><br></pre></td></tr></table></figure><p>都是可执行的</p><p>其中需要注意的是，逻辑运算符<code>and</code>和<code>or</code>具有惰性求值的特点，即不管后面的正不正确，先执行前面的判断</p><h2 id="3-2-选择结构"><a href="#3-2-选择结构" class="headerlink" title="3.2 选择结构"></a>3.2 选择结构</h2><h3 id="3-2-1-单分支选择结构"><a href="#3-2-1-单分支选择结构" class="headerlink" title="3.2.1 单分支选择结构"></a>3.2.1 单分支选择结构</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">   语句块</span><br></pre></td></tr></table></figure><p>当表达式值为True或者其他等价值时，表示条件满足，语句块将被执行，否则不执行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = input(<span class="string">'Input two numbers:'</span>)</span><br><span class="line"><span class="comment"># split()返回分割后的字符串列表</span></span><br><span class="line">a, b = map(int, x.split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">   <span class="comment"># 序列解包，交换两个变量的值</span></span><br><span class="line">   a, b = b, a</span><br><span class="line">print(a, b)</span><br></pre></td></tr></table></figure><p>关于split():</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(str=<span class="string">""</span>, num=string.count(str))</span><br></pre></td></tr></table></figure><p>参数</p><ol><li>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num – 分割次数。默认为 -1, 即分隔所有。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"asdfg \nsarwar \nfegtsgr"</span></span><br><span class="line"><span class="comment"># 以空格为分隔符，包含\n</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split( ))</span><br><span class="line">[<span class="string">'asdfg'</span>, <span class="string">'sarwar'</span>, <span class="string">'fegtsgr'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以空格为分隔符，分割成两个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split(<span class="string">' '</span>, <span class="number">1</span>))</span><br><span class="line">[[<span class="string">'asdfg'</span>, <span class="string">'sarwar \nfegtsgr'</span>]]</span><br></pre></td></tr></table></figure><h3 id="3-2-2-双分支选择结构"><a href="#3-2-2-双分支选择结构" class="headerlink" title="3.2.2 双分支选择结构"></a>3.2.2 双分支选择结构</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">   语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">   print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(b)</span><br></pre></td></tr></table></figure><p>Python还支持如下形式的表达式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value1 <span class="keyword">if</span> condition <span class="keyword">else</span> value2</span><br></pre></td></tr></table></figure><p>即condition的值与True等价时，值为value1，否则值为value2。<br>在value1和value2中可以使用复杂表达式，包括函数调用和基本输出语句。<br>并且该表达式具有惰性求值的特点。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">6</span>) <span class="keyword">if</span> a &gt; <span class="number">3</span> <span class="keyword">else</span> print(<span class="number">5</span>)</span><br><span class="line">print(<span class="number">6</span> <span class="keyword">if</span> a &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x = math.sqrt(<span class="number">9</span>) <span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">3</span> <span class="keyword">else</span> random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">77</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-多结构分支"><a href="#3-2-3-多结构分支" class="headerlink" title="3.2.3 多结构分支"></a>3.2.3 多结构分支</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">   语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">   语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">   语句块<span class="number">3</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   语句块<span class="number">4</span></span><br></pre></td></tr></table></figure><p>其中，关键字<code>elif</code>是<code>else if</code>的缩写</p><h3 id="3-2-4-选择结构的嵌套"><a href="#3-2-4-选择结构的嵌套" class="headerlink" title="3.2.4 选择结构的嵌套"></a>3.2.4 选择结构的嵌套</h3><p>选择结构可以嵌套，比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">   语句块<span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">      语句块<span class="number">2</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="3-2-5-例子"><a href="#3-2-5-例子" class="headerlink" title="3.2.5 例子"></a>3.2.5 例子</h3><ol><li>面试资格确认</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">24</span></span><br><span class="line">subject = <span class="string">"计算机"</span></span><br><span class="line">college = <span class="string">"非重点"</span></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">25</span> <span class="keyword">and</span> subject == <span class="string">"电子信息工程"</span>) <span class="keyword">or</span> (college == <span class="string">"重点"</span> <span class="keyword">and</span> subject == <span class="string">"电子信息工程"</span> ) <span class="keyword">or</span> (age &lt;= <span class="number">28</span> <span class="keyword">and</span> subject == <span class="string">"计算机"</span>):</span><br><span class="line">    print(<span class="string">"恭喜，你已获得我公司的面试机会!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"抱歉，你未达到面试要求"</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>编写程序，判断某天是某年第几天</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">date = time.localtime()</span><br><span class="line">year, month, day = date[:<span class="number">3</span>]</span><br><span class="line">day_month = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">or</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>):</span><br><span class="line">    day_month[<span class="number">1</span>] = <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> month == <span class="number">1</span>:</span><br><span class="line">    print(day)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(sum(day_month[:month - <span class="number">1</span>]) + day)</span><br></pre></td></tr></table></figure><p>其中，判断闰年可以直接使用calendar模块的方法:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>caledar.isleap(<span class="number">2016</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>或者使用下面的方法直接计算今天是今年的第几天:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date.today().timetuple().tm_yday</span><br><span class="line"><span class="number">208</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date(<span class="number">2015</span>, <span class="number">7</span>, <span class="number">25</span>).timetuple().tm_yday</span><br><span class="line"><span class="number">206</span></span><br></pre></td></tr></table></figure><p>也可以使用datetime模块提供的功能来计算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today</span><br><span class="line">datetime.date(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">firstDay = datetime.date(today.year, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>firstDay</span><br><span class="line">datetime.date(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">daysDelta = today - firstDay + datetime.timedelta(days = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>daysDelta.days</span><br><span class="line"><span class="number">208</span></span><br></pre></td></tr></table></figure><h2 id="3-3-循环结构"><a href="#3-3-循环结构" class="headerlink" title="3.3 循环结构"></a>3.3 循环结构</h2><h3 id="3-3-1-for循环和while循环"><a href="#3-3-1-for循环和while循环" class="headerlink" title="3.3.1 for循环和while循环"></a>3.3.1 for循环和while循环</h3><p>Python提供了两种基本的循环结构语句——while语句、for语句。</p><p>while循环一般用于循环次数难以提前确定的情况，也可以用于循环次数确定的情况。</p><p>for循环一般用于循环次数可以提前确定的情况，尤其是用于枚举序列或迭代对象中的元素。</p><p>一般优先考虑使用for循环。<br>相同或不同的循环结构之间都可以互相嵌套，实现更为复杂的逻辑。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">   循环体</span><br><span class="line">[<span class="keyword">else</span>:    <span class="comment">#循环结束，且不是因break结束，执行else部分</span></span><br><span class="line">   <span class="keyword">else</span>子句代码块]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 取值 <span class="keyword">in</span> 序列或迭代对象:</span><br><span class="line">   循环体</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">else</span>子句代码块]</span><br></pre></td></tr></table></figure><h3 id="3-3-2-循环结构的优化"><a href="#3-3-2-循环结构的优化" class="headerlink" title="3.3.2 循环结构的优化"></a>3.3.2 循环结构的优化</h3><p>&emsp;&emsp;为了优化程序以获得更高的效率和运行速度，在编写循环语句时，应尽量减少循环内部不必要的计算，将与循环变量无关的代码尽可能地提取到循环之外。对于使用多重循环嵌套的情况，应尽量减少内层循环中不必要的计算，尽可能地向外提。</p><p>例如：</p><p>优化前的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">   result = []</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> digits:</span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> digits:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> digits:</span><br><span class="line">               result.append(i * <span class="number">100</span> + j * <span class="number">10</span> + k)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>优化后的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">   result = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> digits:</span><br><span class="line">      i = i * <span class="number">100</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> digits:</span><br><span class="line">         j = j * <span class="number">10</span></span><br><span class="line">         <span class="keyword">for</span> k <span class="keyword">in</span> digits:</span><br><span class="line">            result.append(i + j + k)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="3-4-break-和-continue-语句"><a href="#3-4-break-和-continue-语句" class="headerlink" title="3.4 break 和 continue 语句"></a>3.4 break 和 continue 语句</h3><p>break语句在while循环和for循环中都可以使用，一般放在if选择结构中，一旦break语句被执行，将使得整个循环提前结束。</p><p>continue语句的作用是终止当前循环，并忽略continue之后的语句，然后回到循环的顶端，提前进入下一次循环。</p><p>除非break语句让代码更简单或更清晰，否则不要轻易使用。</p><p>例：计算小于100的最大素数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      print(n)</span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>当删除最后一个break时，则为输出1-100的所有素数</p><p>警惕continue可能带来的问题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">   <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(i)</span><br><span class="line">   i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>永不结束的死循环,Ctrl+C强行终止。</p><p>这样子就不会有问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">   <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(i, end = <span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h2 id="3-5-案例精选"><a href="#3-5-案例精选" class="headerlink" title="3.5 案例精选"></a>3.5 案例精选</h2><p>例1：计算1 + 2 + … + 100 的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">   s += i</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>例2：输出序列中的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>]</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(a_list):</span><br><span class="line">   print(<span class="string">'列表的第'</span>, i + <span class="number">1</span>, <span class="string">'个元素是：'</span>, v)</span><br></pre></td></tr></table></figure><p>例3：输出“水仙花数”。所谓水仙花数是指1个3位的十进制数，其各位数字的立方和等于该数本身。例如：153是水仙花数，因为153 = 13 + 53 + 33 。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">   <span class="comment">#这里是序列解包的用法</span></span><br><span class="line">   bai, shi, ge = map(int, str(i))</span><br><span class="line">   <span class="keyword">if</span> ge**<span class="number">3</span> + shi**<span class="number">3</span> + bai**<span class="number">3</span> == i:</span><br><span class="line">      print(i)</span><br></pre></td></tr></table></figure><p>例4：打印九九乘法表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i + <span class="number">1</span>):</span><br><span class="line">      print(<span class="string">'&#123;0&#125;*&#123;1&#125;=&#123;2&#125;'</span>.format(i, j, i * j).ljust(<span class="number">6</span>), end = <span class="string">' '</span>)</span><br><span class="line">   print()</span><br></pre></td></tr></table></figure><p>例5：编写程序，生成一个含有20个随机数的列表，要求所有元素不相同，并且每个元素的值介于1到100之间。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">   <span class="keyword">if</span> len(x)==<span class="number">20</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   n = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> x:</span><br><span class="line">      x.append(n)</span><br><span class="line">print(x)</span><br><span class="line">print(len(x))</span><br><span class="line">print(sorted(x))</span><br></pre></td></tr></table></figure><p>如果用集合来做，会更简单一些</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">x = set()</span><br><span class="line"><span class="keyword">while</span> len(x) &lt; <span class="number">20</span>:</span><br><span class="line">   x.add(randint(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">print(x)</span><br><span class="line">print(sorted(x))</span><br></pre></td></tr></table></figure><p>例6:  递归算法求解汉诺塔问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hannoi</span><span class="params">(num, src, dst, temp=None)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times    <span class="comment">#声明用来记录移动次数的变量为全局变量</span></span><br><span class="line">    <span class="keyword">assert</span> type(num) == int, <span class="string">'num must be integer'</span>   <span class="comment">#确认参数类型和范围</span></span><br><span class="line">    <span class="keyword">assert</span> num &gt; <span class="number">0</span>, <span class="string">'num must &gt; 0'</span>    </span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>: <span class="comment">#只剩最后或只有一个盘子需要移动，这也是函数递归调用的结束条件</span></span><br><span class="line">        print(<span class="string">'The &#123;0&#125; Times move:&#123;1&#125;==&gt;&#123;2&#125;'</span>.format(times, src, dst))</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#递归调用函数自身，先把除最后一个盘子之外的所有盘子移动到临时柱子上</span></span><br><span class="line">        hannoi(num<span class="number">-1</span>, src, temp, dst)</span><br><span class="line">        hannoi(<span class="number">1</span>, src, dst)   <span class="comment">#把最后一个盘子直接移动到目标柱子上</span></span><br><span class="line">        <span class="comment">#把除最后一个盘子之外的其他盘子从临时柱子上移动到目标柱子上</span></span><br><span class="line">        hannoi(num<span class="number">-1</span>, temp, dst, src)</span><br><span class="line">times = <span class="number">1</span>    <span class="comment">#用来记录移动次数的变量</span></span><br><span class="line">hannoi(<span class="number">3</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>) <span class="comment">#A表示最初放置盘子的柱子，C是目标柱子，B是临时柱子</span></span><br></pre></td></tr></table></figure><p>ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><p><br> <br></p><hr><p><b><i>end</i></b></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python选择与循环&quot;&gt;&lt;a href=&quot;#Python选择与循环&quot; class=&quot;headerlink&quot; title=&quot;Python选择与循环&quot;&gt;&lt;/a&gt;&lt;center&gt;Python选择与循环&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;3-1-条件表达式&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="选择与循环" scheme="http://yoursite.com/categories/Python/%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串与正则表达式</title>
    <link href="http://yoursite.com/2019/05/13/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/05/13/Python字符串与正则表达式/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2019-05-24T14:32:12.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python字符串与正则表达式"><a href="#Python字符串与正则表达式" class="headerlink" title="Python字符串与正则表达式"></a><center>Python字符串与正则表达式</center></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python字符串与正则表达式&quot;&gt;&lt;a href=&quot;#Python字符串与正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Python字符串与正则表达式&quot;&gt;&lt;/a&gt;&lt;center&gt;Python字符串与正则表达式&lt;/center&gt;&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="字符串 正则表达式" scheme="http://yoursite.com/categories/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python序列</title>
    <link href="http://yoursite.com/2019/05/10/Python%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2019/05/10/Python序列/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-05-27T14:16:27.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python序列"><a href="#Python序列" class="headerlink" title="Python序列"></a><center>Python序列</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><h3 id="2-1-1-列表的创建与删除"><a href="#2-1-1-列表的创建与删除" class="headerlink" title="2.1.1 列表的创建与删除"></a>2.1.1 列表的创建与删除</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>]</span><br><span class="line">a_list = []</span><br><span class="line"><span class="comment"># 创建空列表</span></span><br></pre></td></tr></table></figure><p>或者是用list()函数将元组、range对象、字符串或者其他类型的可迭代对象类型的数据转换为列表，例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a_list = list((<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment"># [3, 5, 7, 9, 11]</span></span><br><span class="line">list(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9]</span></span><br><span class="line">print(list(<span class="string">'hello world'</span>))</span><br><span class="line"><span class="comment"># ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span></span><br><span class="line">x =list()</span><br><span class="line"><span class="comment"># 创建空列表</span></span><br></pre></td></tr></table></figure><p>当不再使用时，使用del命令删除整个列表，如果列表对象所指向的值不再有其他对象指向，同时删除该值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> a_list</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a_list</span><br><span class="line">NameError: name <span class="string">'a_list'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h3 id="2-1-2-列表元素的增加"><a href="#2-1-2-列表元素的增加" class="headerlink" title="2.1.2 列表元素的增加"></a>2.1.2 列表元素的增加</h3><ol><li>可以使用 <code>+</code> 运算符添加，但是其实这个是重新创建一个列表，并将元素复制过来</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">aList = aList + [<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>使用列表对象的append()方法，再不改变列表在内存中的首地址情况下修改列表，推荐方法</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList.append(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span> ,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>Python 采用的是基于值的自动内存管理方式，当为对象修改值得时候，是使变量直接指向新的值，适用于所有类型的变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1234589</span></span><br></pre></td></tr></table></figure><p>但如果是通过修改下标来修改序列中元素的值或者通过可变序列对象自身提供的方法来增加和删除元素的时候，序列对象在内存中的起始地址是不变的，<b>仅仅是被修改的元素地址发生变化</b></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b </span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a) == id(b)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>]) == id(b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ol start="3"><li>extend(): 将另一个迭代对象的所有元素添加至该列表对象的尾部</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">a.extend([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ol start="4"><li>insert(i, j): 在列表的第i个位置插入j元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList.insert(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol start="5"><li>使用乘法来扩展列表，将列表与整数相乘，生成一个新的列表，但是只是引用已有对象，当修改其中的一个值的时候，相关引用都会被修改</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bList = aList</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">aList = aList * <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">x = [[asd] * <span class="number">2</span>] * <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[asd, asd], [asd, asd]]</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] * <span class="number">3</span></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><h3 id="2-1-3-列表元素的删除"><a href="#2-1-3-列表元素的删除" class="headerlink" title="2.1.3 列表元素的删除"></a>2.1.3 列表元素的删除</h3><ol><li>使用del命令删除列表或者列表中的指定位置上的元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> aList[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> aList</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a_list</span><br><span class="line">NameError: name <span class="string">'a_list'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><ol start="2"><li>pop(): 删除并返回指定位置的元素，没有则默认为最后一个，如果超出范围则抛回异常</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = list((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">aList.pop(<span class="number">1</span>)</span><br><span class="line">aList.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>remove(): 删除首次出现的指定元素，不存在则返回异常</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">aList.remove(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="2-1-4-列表元素访问与计数"><a href="#2-1-4-列表元素访问与计数" class="headerlink" title="2.1.4 列表元素访问与计数"></a>2.1.4 列表元素访问与计数</h3><p>可以使用下标直接访问，如果不存在则抛出异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">10</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>index(i): 找到元素i首次出现时的下标<br>count(i): 统计指定元素i在列表对象中出现的次数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList.index(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-成员资格判断"><a href="#2-1-5-成员资格判断" class="headerlink" title="2.1.5 成员资格判断"></a>2.1.5 成员资格判断</h3><ol><li>count(): 大于0成立    </li><li>in 关键词</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">bList =[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">cList = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> aList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>] <span class="keyword">in</span> cList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>, <span class="string">'a'</span>) <span class="keyword">in</span> zip(aList, bList)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="★2-1-6-切片操作"><a href="#★2-1-6-切片操作" class="headerlink" title="★2.1.6 切片操作"></a>★2.1.6 切片操作</h3><p>切片使用2个冒号分隔的3个数字来完成： <code>[x:y:z]</code><br>&emsp;x表示切片开始的位置，默认为0<br>&emsp;y表示切片截止的为，默认为列表长度<br>&emsp;z表示切片的步长，默认为1     </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[::]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">1</span>:<span class="number">100</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aLIst[<span class="number">100</span>:]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>注意：切片操作在程序中书写时如果要更改，则需要进行赋值操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(aList)</span><br><span class="line">aList = aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(aList)</span><br><span class="line"><span class="comment"># 输出内容</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>可以使用切片原地地址修改列表内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在尾部追加元素</span></span><br><span class="line">aList[len(aList):] = [<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换前3个元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除前3个元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-9的十个数</span></span><br><span class="line">aList = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换偶数位置上的元素</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片不连续，两个元素个数必须一样多</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line">line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    aList[::<span class="number">2</span>] = [<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">3</span> to extended slice of size <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del指令删除元素</span></span><br><span class="line">aList = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line"><span class="comment">#删除前3个元素</span></span><br><span class="line"><span class="keyword">del</span> aList[:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#删除偶数位置上的元素</span></span><br><span class="line"><span class="keyword">del</span> aList[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>切片返回的是列表元素的浅复制<br>&emsp;浅复制即把原列表所有元素的引用都复制到新列表中，如果只包含数字等基本元素或者元组、字符串这样的<b>不可变类型的数据</b>，进行修改操作不影响原列表<br>&emsp;如果原列表中包含列表等可变数据类型，修改任何一个都会影响到另一个</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bList = aList[::]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList == bList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList <span class="keyword">is</span> bList</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">bList[<span class="number">1</span>] = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">[<span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">aList = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">bList = aList[::]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">aList[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[[<span class="number">8</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">[[<span class="number">8</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h3 id="2-1-7-列表排序"><a href="#2-1-7-列表排序" class="headerlink" title="2.1.7 列表排序"></a>2.1.7 列表排序</h3><ol><li>sort(): 进行原地址排序，为自身进行更改，不需要赋值操作</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"><span class="comment"># 将序列的所有元素进行随机排序</span></span><br><span class="line">random.shuffle(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">13</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序排序</span></span><br><span class="line">aList.sort()</span><br><span class="line"><span class="comment"># 降序排列</span></span><br><span class="line">aList.sort(reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 按转化成字符串的长度排序</span></span><br><span class="line">aList.sort(key = <span class="keyword">lambda</span> x:len(str(x)))</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>sorted(): 排序并返回新列表</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">13</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">1</span>]</span><br><span class="line">aList = sorted(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line">aList = sorted(aList, reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>reverse(): 将函数自身翻转，不需要赋值</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line">aList.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><ol start="4"><li>reversed(): 翻转并返回迭代对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 返回reversed对象</span></span><br><span class="line">bList = reversed(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">&lt;list_reverseiterator object at <span class="number">0x0000011BE35B86D8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把reversed对象转换成列表</span></span><br><span class="line">bList = list(bList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bList:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 没有输出内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新创建reversed对象</span></span><br><span class="line">bList = reversed(aList)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bList:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">13</span> <span class="number">12</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><p>reversed（）返回的是一个迭代器对象，只能进行一次循环遍历。显示一次所包含的值！</p><h3 id="2-1-8-列表常用内置函数"><a href="#2-1-8-列表常用内置函数" class="headerlink" title="2.1.8 列表常用内置函数"></a>2.1.8 列表常用内置函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>list.append(x)</td><td>将元素x添加至列表尾部</td></tr><tr><td>list.extend(x)</td><td>将列表L中的所有元素添加值列表尾部</td></tr><tr><td>list.insert(index, x) &emsp;</td><td>在列表指定位置index处添加元素x，该位置后面的所有元素后移一个位置</td></tr><tr><td>list.remove(x)</td><td>在列表中删除首次出现的元素x，该元素之后的所有元素前移一个位置</td></tr><tr><td>list.pop([index])</td><td>删除并返回列表中下标为index（默认为-1）的元素</td></tr><tr><td>list.clear()</td><td>删除列表中所有元素，但保留列表对象</td></tr><tr><td>list.index(x)</td><td>返回列表中第一个值为x的元素的下标，若不存在值为x的元素则抛出异常</td></tr><tr><td>list.count(x)</td><td>返回指定元素x在列表中的出现次数</td></tr><tr><td>list.reverse()</td><td>对列表lst所有元素进行逆序</td></tr><tr><td>list.sort()</td><td>对列表lst中的元素进行排序，key用来指定排序依据，reverse决定升序(False)还是降序(True)</td></tr><tr><td>list.copy()</td><td>返回列表lst的浅复制</td></tr></tbody></table><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>len(list)</td><td>返回列表中的元素个数，适用于元组、字典、集合、字符串等</td></tr><tr><td>max(list)</td><td>返回列表中的最大元素，适用于元组、字典、集合、字符串等</td></tr><tr><td>len(list)</td><td>返回列表中的最小元素，适用于元组、字典、集合、字符串等</td></tr><tr><td>sum(list)</td><td>对列表的元素进行求和运算，对非数值型列表运算需要指定start参数，同样适用于元组、range</td></tr><tr><td>zip()</td><td>返回可迭代的zip对象</td></tr><tr><td>enumerate(list)&emsp;</td><td>枚举列表元素，返回枚举对象，其中每个元素为包含下标和值的元组。该函数对元组、字符串同样有效。</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum()</span></span><br><span class="line">  <span class="comment"># sum()函数的start参数默认为0</span></span><br><span class="line">  &gt;&gt;&gt; sum(range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">  <span class="number">55</span></span><br><span class="line">  <span class="comment"># 指定start参数为5，等价于5+sum(range(1,11))</span></span><br><span class="line">  &gt;&gt;&gt; sum(range(<span class="number">1</span>, <span class="number">11</span>), <span class="number">5</span>)</span><br><span class="line">  <span class="number">60</span></span><br><span class="line">  <span class="comment">#这个操作占用空间较大，慎用</span></span><br><span class="line">  &gt;&gt;&gt; sum([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]], [])</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip()</span></span><br><span class="line">  aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  bList = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  cList = zip(a, b)</span><br><span class="line">  <span class="comment"># 返回zip对象</span></span><br><span class="line">  &gt;&gt;&gt; cList</span><br><span class="line">  &lt;zip object at <span class="number">0x0000000003728908</span>&gt;</span><br><span class="line">  <span class="comment"># 把zip对象转换成列表</span></span><br><span class="line">  &gt;&gt;&gt; list(cList)</span><br><span class="line">  [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate()</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> enumerate(<span class="string">'abcdef'</span>):</span><br><span class="line">  print(item)</span><br><span class="line">  (<span class="number">0</span>, <span class="string">'a'</span>)</span><br><span class="line">  (<span class="number">1</span>, <span class="string">'b'</span>)</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'c'</span>)</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'d'</span>)</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'e'</span>)</span><br><span class="line">  (<span class="number">5</span>, <span class="string">'f'</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-9-列表推导式"><a href="#2-1-9-列表推导式" class="headerlink" title="2.1.9 列表推导式"></a>2.1.9 列表推导式</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aList = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">  aList.append(x*x)</span><br></pre></td></tr></table></figure><p>也等价于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aList = list(map(<span class="keyword">lambda</span> x: x*x, range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><p>例：阿凡提与国王比赛下棋，国王说要是自己输了的话阿凡提想要什么他都可以拿得出来。阿凡提说那就要点米吧，棋盘一共64个小格子，在第一个格子里放1粒米，第二个格子里放2粒米，第三个格子里放4粒米，第四个格子里放8粒米，以此类推，后面每个格子里的米都是前一个格子里的2倍，一直把64个格子都放满。需要多少粒米呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sum([<span class="number">2</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>)]))</span><br></pre></td></tr></table></figure><p>例1. 使用列表推导式实现嵌套列表的平铺</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">aList = [num <span class="keyword">for</span> elem <span class="keyword">in</span> vec <span class="keyword">for</span> num <span class="keyword">in</span> elem]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> vec:</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> elem:</span><br><span class="line">        result.append(num)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">result = sum(vec, [])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># chain()可以把一组迭代对象串联起来，形成一个更大的迭代器</span></span><br><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">result = list(chain(*vec))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>例2. 列出当前文件夹下所有Python源文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[filename <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> filename.endswith((<span class="string">'.py'</span>, <span class="string">'.pyw'</span>))]</span><br></pre></td></tr></table></figure><p>例3. 过滤不符合条件的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList = [<span class="number">-1</span>,<span class="number">-4</span>,<span class="number">6</span>,<span class="number">7.5</span>,<span class="number">-2.3</span>,<span class="number">9</span>,<span class="number">-11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> aList <span class="keyword">if</span> i&gt;<span class="number">0</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-元组"><a href="#2-2-元组" class="headerlink" title="2.2 元组"></a>2.2 元组</h2><p>元组和列表类似，但属于不可变序列，元组一旦创建，用任何方法都不可以修改其元素<br>元组的定义方式和列表相同，但定义时所有元素是放在一对圆括号“（）”中，而不是方括号中。</p><h3 id="2-2-1-元组创建与删除"><a href="#2-2-1-元组创建与删除" class="headerlink" title="2.2.1 元组创建与删除"></a>2.2.1 元组创建与删除</h3><ol><li>&emsp;</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a_tuple = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'asd'</span>, <span class="string">'qweasdzxc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含一个元素的元组，最后必须写个逗号</span></span><br><span class="line">a_tuple = (<span class="number">3</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">3</span>,)</span><br><span class="line">a_tuple = (<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">3</span>)</span><br><span class="line">  <span class="comment"># 也可以这样创建</span></span><br><span class="line">a_tuple = <span class="number">3</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">3</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空元组</span></span><br><span class="line">x = ()</span><br></pre></td></tr></table></figure><ol start="2"><li>类似与列表的list()函数，使用tuple()函数将其他序列转换为元组</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a_Tuple = tuple(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_Tuple</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">b_Tuple = tuple(<span class="string">'asd'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b_Tuple</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>del只能删除整个元组，不能只删除元组中的指定元素</li></ol><h3 id="2-2-2-元组与列表的区别"><a href="#2-2-2-元组与列表的区别" class="headerlink" title="2.2.2 元组与列表的区别"></a>2.2.2 元组与列表的区别</h3><ol><li>元组中的数据一旦定义就不允许更改。</li><li>元组没有append()、extend()和insert()等方法，无法向元组中添加元素。</li><li>元组没有remove()或pop()方法，也无法对元组元素进行del操作，不能从元组中删除元素。</li><li>从效果上看，tuple()冻结列表，而list()融化元组。<br><br></li><li>元组的速度比列表更快。如果定义了一系列常量值，而所需做的仅是对它进行遍历，那么一般使用元组而不用列表。</li><li>元组对不需要改变的数据进行“写保护”将使得代码更加安全。</li><li>元组可用作字典键（特别是包含字符串、数值和其它元组这样的不可变数据的元组）。列表永远不能当做字典键使用，因为列表不是不可变的。</li></ol><h3 id="2-2-3-序列解包"><a href="#2-2-3-序列解包" class="headerlink" title="2.2.3 序列解包"></a>2.2.3 序列解包</h3><ol><li><p>可以使用序列解包功能对多个变量同时赋值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>可以对range对象进行序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>使用迭代器对象进行序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></li><li><p>使用可迭代的map对象进行序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = map(str, range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>交换两个变量的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure></li><li><p>sorted()函数返回排序后的列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = sorted([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>字符串也支持序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="string">'ABC'</span></span><br></pre></td></tr></table></figure></li><li><p>序列解包对于列表和字典同样有效</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">b, c, d = s.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典时不用太多考虑元素的顺序</span></span><br><span class="line">b, c, d = s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line">b, c, d = s.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b, c, d)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-4-生成器推导式"><a href="#2-2-4-生成器推导式" class="headerlink" title="2.2.4 生成器推导式"></a>2.2.4 生成器推导式</h3><p>生成器推导式的结果是一个生成器对象。使用生成器对象的元素时，可以根据需要将其转化为列表或元组，也可以使用生成器对象<strong>next</strong>()方法或内置函数next()进行遍历，或者直接将其作为迭代器对象来使用。  </p><p>生成器对象具有惰性求值的特点，只在需要时生成新元素，比列表推导式具有更高的效率，空间占用非常少，尤其适合大数据处理的场合。  </p><p>不管用哪种方法访问生成器对象，都无法再次访问已访问过的元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">g = ((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x0000011B65812570</span>&gt;</span><br><span class="line"></span><br><span class="line">a_tuple = tuple(g)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>)</span><br><span class="line"></span><br><span class="line">g = ((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">aList = list(g)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器对象__next__()方法或内置函数next()进行遍历</span></span><br><span class="line">g = ((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 使用生成器对象的__next__()方法获取元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-字典"><a href="#2-3-字典" class="headerlink" title="2.3 字典"></a>2.3 字典</h2><p>字典是“键-值对”的无序可变序列，字典中的每个元素包含两个部分：“键”和“值”。<br>定义字典时，每个元素的键和值用冒号分隔，元素之间用逗号分隔，所有的元素放在一对大括号“｛｝”中。<br>字典中的键可以为任意不可变数据，比如整数、实数、复数、字符串、元组等等。</p><h3 id="2-3-1-字典创建与删除"><a href="#2-3-1-字典创建与删除" class="headerlink" title="2.3.1 字典创建与删除"></a>2.3.1 字典创建与删除</h3><ol><li>使用<code>=</code>将一个字典赋值给一个变量即可创建一个字典变量</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_dict = &#123;<span class="string">'asd'</span>:<span class="string">'qwe'</span>, <span class="string">'zxc'</span>:<span class="string">'2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_dict</span><br><span class="line">&#123;<span class="string">'asd'</span>: <span class="string">'qwe'</span>, <span class="string">'zxc'</span>: <span class="string">'2'</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用内置函数dict()通过已有数据快速创建字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">dictionary = dict(zip(keys, values))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>同时，也可创建空字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = dict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用内置函数dict()根据给定的“键-值对”来创建字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = dict(name=<span class="string">'Dong'</span>, age=<span class="number">37</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'age'</span>: <span class="number">37</span>&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>以给定内容为“键”，创建“值”为空的字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">adict = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">aList = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>]</span><br><span class="line">adict = dict.fromkeys(aList, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="number">10</span>, <span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'sex'</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">adict = dict.fromkeys(<span class="string">'age'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">5</span>, <span class="string">'g'</span>: <span class="number">5</span>, <span class="string">'e'</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">adict = dict.fromkeys([<span class="string">'age'</span>], <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>可以使用del删除整个字典或者字典中指定的元素，具体参考2.3.3</li></ol><h3 id="2-3-2-字典元素的读取"><a href="#2-3-2-字典元素的读取" class="headerlink" title="2.3.2 字典元素的读取"></a>2.3.2 字典元素的读取</h3><ol><li>以键作为下标可以读取字典元素，若键不存在则抛出异常</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aDict = &#123;<span class="string">'name'</span>:<span class="string">'Dong'</span>, <span class="string">'sex'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">37</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'name'</span>]</span><br><span class="line">Dong</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'tel'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(aDict[<span class="string">'tel'</span>])</span><br><span class="line">KeyError: <span class="string">'tel'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用字典对象的get方法获取指定键对应的值，并且可以在键不存在的时候返回指定值</li></ol><p>get()方法语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key, default = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>其中：<br>key – 字典中要查找的键。<br>default – 如果指定键的值不存在时，返回该默认值值。<br>get()函数返回指定键的值，如果值不在字典中返回默认值None。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(aDict.get(<span class="string">'address'</span>))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(aDict.get(<span class="string">'address'</span>, <span class="string">'SDIBT'</span>))</span><br><span class="line">SDIBT</span><br><span class="line"></span><br><span class="line">aDict[<span class="string">'score'</span>] = aDict.get(<span class="string">'score'</span>,[])</span><br><span class="line">aDict[<span class="string">'score'</span>].append(<span class="number">98</span>)</span><br><span class="line">aDict[<span class="string">'score'</span>].append(<span class="number">97</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict</span><br><span class="line">&#123;<span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>]&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用字典对象的items()方法可以返回字典的键、值对列表<br>使用字典对象的keys()方法可以返回字典的键列表<br>使用字典对象的values()方法可以返回字典的值列表  </li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">aDict = &#123;<span class="string">'name'</span>:<span class="string">'Dong'</span>, <span class="string">'sex'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">37</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> aDict.items():</span><br><span class="line">  print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> aDict.keys(): </span><br><span class="line">  print(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> aDict.values():</span><br><span class="line">  print(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> aDict.items():</span><br><span class="line">  print(key, value)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">('name', 'Dong')</span><br><span class="line">('sex', 'male')</span><br><span class="line">('age', <span class="number">37</span>)</span><br><span class="line">name</span><br><span class="line">sex</span><br><span class="line">age</span><br><span class="line">Dong</span><br><span class="line">male</span><br><span class="line"><span class="number">37</span></span><br><span class="line">name Dong</span><br><span class="line">sex male</span><br><span class="line">age <span class="number">37</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-字典元素的添加与修改"><a href="#2-3-3-字典元素的添加与修改" class="headerlink" title="2.3.3 字典元素的添加与修改"></a>2.3.3 字典元素的添加与修改</h3><ol><li>当以指定键为下标为字典赋值时，若键存在，则可以修改该键的值；若不存在，则表示添加一个键、值对。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改元素值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'age'</span>] = <span class="number">38</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">38</span>, <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加新元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'address'</span>] = <span class="string">'SDIBT'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">38</span>, <span class="string">'address'</span>: <span class="string">'SDIBT'</span>, <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用字典对象的update方法修改键值，当键不存在的时候则自动添加进去</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aDict = &#123;<span class="string">'age'</span>: <span class="number">37</span>, <span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>], <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">aDict.update(&#123;<span class="string">'a'</span>:<span class="string">'a'</span>,<span class="string">'b'</span>:<span class="string">'b'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(aDict)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">37</span>, <span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>], <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>, <span class="string">'a'</span>: <span class="string">'a'</span>, <span class="string">'b'</span>: <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">aDict.update(&#123;<span class="string">'a'</span>:<span class="string">'dss'</span>,<span class="string">'b'</span>:<span class="string">'afd'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(aDict)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">37</span>, <span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>], <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>, <span class="string">'a'</span>: <span class="string">'dss'</span>, <span class="string">'b'</span>: <span class="string">'afd'</span>&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除<br>&emsp;使用del删除字典中指定键的元素<br>&emsp;使用字典对象的clear()方法来删除字典中所有元素<br>&emsp;使用字典对象的pop()方法删除并返回指定键的元素<br>&emsp;使用字典对象的popitem()方法删除并返回字典中的一个元素  </li></ol><h3 id="2-3-4-有序字典"><a href="#2-3-4-有序字典" class="headerlink" title="2.3.4 有序字典"></a>2.3.4 有序字典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">x = collections.OrderedDict()</span><br><span class="line">x[<span class="string">'b'</span>] = <span class="number">5</span></span><br><span class="line">x[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line">x[<span class="string">'c'</span>] = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">OrderedDict([(<span class="string">'b'</span>, <span class="number">5</span>), (<span class="string">'a'</span>, <span class="number">3</span>), (<span class="string">'c'</span>, <span class="number">8</span>)])</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-集合"><a href="#2-4-集合" class="headerlink" title="2.4 集合"></a>2.4 集合</h2><p>集合为无序可变序列，不能有重复值</p><p>且集合中只能包含数字、字符串、元组等不可变类型数据</p><h3 id="2-4-1-集合的创建与删除"><a href="#2-4-1-集合的创建与删除" class="headerlink" title="2.4.1 集合的创建与删除"></a>2.4.1 集合的创建与删除</h3><ol><li>直接创建</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">3</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用add()方法添加</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.add(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>使用set将其他类型数据转换为集合</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a_set = set(range(<span class="number">8</span>,<span class="number">14</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set</span><br><span class="line">&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b_set = set([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>]) <span class="comment"># 自动去除重复</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b_set</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c_set = set()  <span class="comment"># 空集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c_set</span><br><span class="line">set()</span><br></pre></td></tr></table></figure><ol start="4"><li>del()删除整个集合<br>pop()弹出并删除其中一个元素<br>remoove()直接删除指定元素<br>clear()清空集合</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,remove(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-集合操作"><a href="#2-4-2-集合操作" class="headerlink" title="2.4.2 集合操作"></a>2.4.2 集合操作</h3><p>Python集合支持交集、并集、差集等运算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a_set = set([<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>])</span><br><span class="line">b_set = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line">z = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>并集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set | b_set</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.union(b_set)</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>交集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set &amp; b_set</span><br><span class="line">&#123;<span class="number">8</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.intersection(b_set)</span><br><span class="line">&#123;<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>差集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set - b_set</span><br><span class="line">&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.difference(b_set)</span><br><span class="line">&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>对称差集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set ^ b_set</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.symmetric_difference(b_set)</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>集合大小</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt; y</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt; z</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y &lt; z</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ol start="6"><li>是否为子集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.issubset(y)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.issubset(z)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-其他"><a href="#2-4-3-其他" class="headerlink" title="2.4.3 其他"></a>2.4.3 其他</h3><p>作为集合的具体应用，可以使用集合快速提取序列中单一元素</p><p>如果使用传统方式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment"># 100个介于0~999之间的随机数</span></span><br><span class="line">listRandom = [randint(<span class="number">0</span>, <span class="number">9999</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">noRepeat = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listRandom:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> noRepeat:</span><br><span class="line">    noRepeat.append(i)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(listRandom)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(noRepeat)</span><br></pre></td></tr></table></figure><p>但是使用集合，只需要如下一行代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newSet = set(listRandom)</span><br></pre></td></tr></table></figure><p><br><br></p><hr><p><b><i>end</i></b></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python序列&quot;&gt;&lt;a href=&quot;#Python序列&quot; class=&quot;headerlink&quot; title=&quot;Python序列&quot;&gt;&lt;/a&gt;&lt;center&gt;Python序列&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本文章总结了董付国老师的Pthon程序设计
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="序列" scheme="http://yoursite.com/categories/Python/%E5%BA%8F%E5%88%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序设计目录</title>
    <link href="http://yoursite.com/2019/05/10/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2019/05/10/Python程序设计目录/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-05-27T14:28:16.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python程序设计"><a href="#Python程序设计" class="headerlink" title="Python程序设计"></a><center>Python程序设计</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除   &emsp; &emsp;  by：mfdy</i></p><p><br><br><b>链接包含本博客链接和CSDN同步链接</b><br>CSDN目录：<a href="https://blog.csdn.net/mofadiyu/article/details/90178542" target="_blank" rel="noopener">https://blog.csdn.net/mofadiyu/article/details/90178542</a></p><p><b><i>文章正在持续更新中……</i></b><br><br></p><h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 基础知识"></a>第一章 基础知识</h2><h2 id="第二章-Python-序列"><a href="#第二章-Python-序列" class="headerlink" title="第二章 Python 序列"></a>第二章 Python 序列</h2><p><b>文章链接：<a href="https://mfdy.tech/2019/05/10/Python序列/" target="_blank" rel="noopener">mfdy’s blog:  Python序列：https://mfdy.tech/2019/05/10/Python序列</a></b></p><p>2.1 <a href="https://blog.csdn.net/mofadiyu/article/details/90178323" target="_blank" rel="noopener">列表：https://blog.csdn.net/mofadiyu/article/details/90178323</a></p><p>2.2 <a href="https://blog.csdn.net/mofadiyu/article/details/90178507" target="_blank" rel="noopener">元组：https://blog.csdn.net/mofadiyu/article/details/90178507</a></p><p>2.3 <a href="https://blog.csdn.net/mofadiyu/article/details/90613279" target="_blank" rel="noopener">字典：https://blog.csdn.net/mofadiyu/article/details/90613279</a></p><p>2.4 <a href="https://blog.csdn.net/mofadiyu/article/details/90613321" target="_blank" rel="noopener">集合：https://blog.csdn.net/mofadiyu/article/details/90613321</a></p><h2 id="第三章-选择与循环"><a href="#第三章-选择与循环" class="headerlink" title="第三章 选择与循环"></a>第三章 选择与循环</h2><p><b>文章链接：<a href="https://mfdy.tech/2019/05/13/Python选择与循环/" target="_blank" rel="noopener">mfdy’s blog:  Python选择与循环：https://mfdy.tech/2019/05/13/Python选择与循环/</a></b></p><h2 id="第四章-字符串与正则表达式"><a href="#第四章-字符串与正则表达式" class="headerlink" title="第四章 字符串与正则表达式"></a>第四章 字符串与正则表达式</h2><h2 id="第五章-函数设计与使用"><a href="#第五章-函数设计与使用" class="headerlink" title="第五章 函数设计与使用"></a>第五章 函数设计与使用</h2><h2 id="第六章-面向对象程序设计"><a href="#第六章-面向对象程序设计" class="headerlink" title="第六章 面向对象程序设计"></a>第六章 面向对象程序设计</h2><h2 id="第七章-文件操作"><a href="#第七章-文件操作" class="headerlink" title="第七章 文件操作"></a>第七章 文件操作</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python程序设计&quot;&gt;&lt;a href=&quot;#Python程序设计&quot; class=&quot;headerlink&quot; title=&quot;Python程序设计&quot;&gt;&lt;/a&gt;&lt;center&gt;Python程序设计&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本文章总结了董付国老师的P
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="目录" scheme="http://yoursite.com/categories/Python/%E7%9B%AE%E5%BD%95/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第十二届河南省ACM大学生程序设计竞赛赛后总结</title>
    <link href="http://yoursite.com/2019/05/09/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E6%B2%B3%E5%8D%97%E7%9C%81ACM%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/09/第十二届河南省ACM大学生程序设计竞赛赛后总结/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-05-09T05:23:38.475Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>第十二届河南省ACM大学生程序设计竞赛赛后总结</center></h3><br>&emsp;&emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体育馆里面举办的了。<br><br><br>下面说一下这次比赛的题吧<br>&emsp;&emsp;先说总结：题很烂，连我们自己院赛题出的都不如，题目难度和知识点分配不均，题目数据频频出问题，幕后据说也有不知名交易。<p></p><h4 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h4><p>&emsp;&emsp;一道KMP裸题，但是暴力也能过</p><h4 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h4><p>&emsp;&emsp;动态规划</p><h4 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h4><p>&emsp;&emsp;也是一道字符串处理问题，等于找若干个子串的不同就行，暴力就过</p><h4 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h4><p>&emsp;&emsp;一道线性方程的水题，求若干个点相加之和。但是开场两小时之内基本所有队伍交上去全是TLE。1e5的复杂度怎可能会超时，提问说数据有没有问题得到回复没有，但是后来又重判两次……<br>&emsp;&emsp;赛后我们讨论题意还有问题，题目第一句话告诉我们十点已经会发车，但是过的没有算直接sort就过了，不知道算是题描述错还是数据太水……</p><h4 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h4><p>&emsp;&emsp;题目大意是描述找有向图中先升高再降低的路，直接转化为树即可</p><h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>&emsp;&emsp;骂街题目1号<br>&emsp;&emsp;大意是一个01的图中找11的数量，剩下的1算加1，正确做法二分图匹配，赛后被爆出POJ原题，链接：<a href="http://poj.org/problem?id=3020" target="_blank" rel="noopener"> POJ - 3020: http://poj.org/problem?id=3020 </a><br>结果大家死活做不出来，有很多队伍后来AC了，说是用的贪心直接过，但是贪心很明显不对，比如<br><code>111</code><br><code>100</code><br>贪心跑出来的答案会是3，但明显是2</p><h4 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h4><p>&emsp;&emsp;骂街题目2号<br>&emsp;&emsp;一道强连通分量的题，但是全场除了冠军队没一个能再做出来，讲题人始终坚持数据没问题，冠军队1发就AC，赛后讲题支支吾吾，唔…不做评价</p><h4 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h4><p>&emsp;&emsp;一道很简答的最短路变形问题，但是全场基本被DFG三道题给绊住，基本没人做</p><h4 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h4><p>&emsp;&emsp;你能听到赛后讲题人直接说这个题我们拿出来就是专门为了防AK的，这道题我们也不会做的话吗？？？</p><h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>&emsp;&emsp;一道二叉树的，很多人直接用树存值过的，但是这道题我觉得还是数据水了，因为2<sup>31</sup>的数据量…<br>&emsp;&emsp;这道题分析后会发现是先求出X的因子中有多少个2，即2<sup>n</sup>，然后输出<code>x-2^n+1 x+2^n-1</code>即可<br><br><br><br>以上基本就是这次比赛的总结，大家往年都是吐槽数据弱，比如去年的一道最小费用流问题直接深搜就过…结果今年直接数据出错不说，还……<br>今年比赛已经导致cy等大佬上台怒怼了，如果河南省赛再这么下去…哎……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;center&gt;第十二届河南省ACM大学生程序设计竞赛赛后总结&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ftp打开方式更改为资源管理器方法</title>
    <link href="http://yoursite.com/2018/08/29/ftp%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E6%9B%B4%E6%94%B9%E4%B8%BA%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/29/ftp打开方式更改为资源管理器方法/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T02:38:46.997Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。<br>&emsp;目前我的系统是Windows10 1803.<br>&emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的<b>完全没有半毛钱效果</b>  </p><p>&emsp;在即将崩溃的时候发现了这篇文章<a href="https://blog.csdn.net/tianwuya217/article/details/8674622" target="_blank" rel="noopener">https://blog.csdn.net/tianwuya217/article/details/8674622</a><br>由于这篇文章博主操作系统是Win8,所以更改注册表时我发现内容结构不一样，不能按照这个修改方法，但是给我提供了一个思路就是修改[HKEY_CLASSES_ROOT\ftp]目录下的所有内容。  </p><p>&emsp;如果身旁有小伙伴电脑操作系统跟自己的一样，按照小伙伴的内容的更改即可。  </p><p>&emsp;下面列出我的更改内容供大家参考 </p><hr><ul><li><p>win + R 输入 regedit 打开注册表格, 直接地址栏输入[计算机\HKEY_CLASSES_ROOT\ftp]， 此时我发现我的文件夹里空空如也。（哇，这到底是哪个软件搞的鬼啊 (╯‵□′)╯ ︵ ┻━┻）</p></li><li><p>将(默认)的字符串值更改为 <code>URL:File Transfer Protocol</code><br>新建名为 AppUserModelID 字符串值, 输入<code>Microsoft.InternetExplorer.Default</code><br>新建名为 EditFlags DWORD(32位值), 输入 <code>2</code><br>新建名为 FriendlyTypeName 字符串值, 输入<code>@C:\WINDOWS\system32\ieframe.dll,-905</code><br>新建名为 ShellFolder 字符串值, 输入<code>{63da6ec0-2e98-11cf-8d82-444553540000}</code><br>新建名为 ShellFolder 字符串值, 输入<code>{E436EBB6-524F-11CE-9F53-0020AF0BA770}</code><br>新建名为 AppUserModelID 字符串值, 无输入  </p></li><li><p>在ftp中新建项, 命名为 Defaultlcon<br>将(默认)的字符串值更改为 <code>%SystemRoot%\system32\url.dll,0</code>   </p></li><li><p>在ftp中新建项, 命名为 shell<br>将(默认)的字符串值更改为 <code>open</code></p></li><li><p>在shell中新建项，命名为 open<br>新建名为 CommandId 字符串值, 输入 <code>IE.Protocol</code><br>(默认)字符串值无需更改  </p></li><li><p>在open中新建项， 命名为 command<br>将(默认)的字符串值更改为<br>&emsp;<code>&quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; %1</code><br>新建名为 DelegateExecute 字符串值, 输入<code>{17FE9752-0B5A-4665-84CD-569794602F5C}</code>  </p></li><li><p>此时尝试一下，发现ftp可以用资源管理器打开了。</p></li></ul><hr><p>附上参考博客的博主的话:   </p><p>搜索问题最好看那些博客类，相对来说准确度较高！<br>&emsp;<small>——你想想大部分人为什么写博客？大部分都是自己千般万苦的搜索了半天或研究了半天才解决的问题。只是想用博客的形式记录下来，记录下自己的成就感。这成果来之不易 ~</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。&lt;br&gt;&amp;emsp;目前我的系统是Windows10 1803.&lt;br&gt;&amp;emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的&lt;b&gt;完全没有半毛钱
      
    
    </summary>
    
      <category term="系统" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="windows" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/windows/"/>
    
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>ftp打开方式更改为资源管理器方法</title>
    <link href="http://yoursite.com/2018/08/29/ACM-ICPC%202018%20%E5%8D%97%E4%BA%AC%E8%B5%9B%E5%8C%BA%E7%BD%91%E7%BB%9C%E9%A2%84%E8%B5%9B%20%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/29/ACM-ICPC 2018 南京赛区网络预赛 题解/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T02:38:46.997Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。<br>&emsp;目前我的系统是Windows10 1803.<br>&emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的<b>完全没有半毛钱效果</b>  </p><p>&emsp;在即将崩溃的时候发现了这篇文章<a href="https://blog.csdn.net/tianwuya217/article/details/8674622" target="_blank" rel="noopener">https://blog.csdn.net/tianwuya217/article/details/8674622</a><br>由于这篇文章博主操作系统是Win8,所以更改注册表时我发现内容结构不一样，不能按照这个修改方法，但是给我提供了一个思路就是修改[HKEY_CLASSES_ROOT\ftp]目录下的所有内容。  </p><p>&emsp;如果身旁有小伙伴电脑操作系统跟自己的一样，按照小伙伴的内容的更改即可。  </p><p>&emsp;下面列出我的更改内容供大家参考 </p><hr><ul><li><p>win + R 输入 regedit 打开注册表格, 直接地址栏输入[计算机\HKEY_CLASSES_ROOT\ftp]， 此时我发现我的文件夹里空空如也。（哇，这到底是哪个软件搞的鬼啊 (╯‵□′)╯ ︵ ┻━┻）</p></li><li><p>将(默认)的字符串值更改为 <code>URL:File Transfer Protocol</code><br>新建名为 AppUserModelID 字符串值, 输入<code>Microsoft.InternetExplorer.Default</code><br>新建名为 EditFlags DWORD(32位值), 输入 <code>2</code><br>新建名为 FriendlyTypeName 字符串值, 输入<code>@C:\WINDOWS\system32\ieframe.dll,-905</code><br>新建名为 ShellFolder 字符串值, 输入<code>{63da6ec0-2e98-11cf-8d82-444553540000}</code><br>新建名为 ShellFolder 字符串值, 输入<code>{E436EBB6-524F-11CE-9F53-0020AF0BA770}</code><br>新建名为 AppUserModelID 字符串值, 无输入  </p></li><li><p>在ftp中新建项, 命名为 Defaultlcon<br>将(默认)的字符串值更改为 <code>%SystemRoot%\system32\url.dll,0</code>   </p></li><li><p>在ftp中新建项, 命名为 shell<br>将(默认)的字符串值更改为 <code>open</code></p></li><li><p>在shell中新建项，命名为 open<br>新建名为 CommandId 字符串值, 输入 <code>IE.Protocol</code><br>(默认)字符串值无需更改  </p></li><li><p>在open中新建项， 命名为 command<br>将(默认)的字符串值更改为<br>&emsp;<code>&quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; %1</code><br>新建名为 DelegateExecute 字符串值, 输入<code>{17FE9752-0B5A-4665-84CD-569794602F5C}</code>  </p></li><li><p>此时尝试一下，发现ftp可以用资源管理器打开了。</p></li></ul><hr><p>附上参考博客的博主的话:   </p><p>搜索问题最好看那些博客类，相对来说准确度较高！<br>&emsp;<small>——你想想大部分人为什么写博客？大部分都是自己千般万苦的搜索了半天或研究了半天才解决的问题。只是想用博客的形式记录下来，记录下自己的成就感。这成果来之不易 ~</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。&lt;br&gt;&amp;emsp;目前我的系统是Windows10 1803.&lt;br&gt;&amp;emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的&lt;b&gt;完全没有半毛钱
      
    
    </summary>
    
      <category term="系统" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="windows" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/windows/"/>
    
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>动态规划—最长上升子序列问题 两种角度及优化算法</title>
    <link href="http://yoursite.com/2018/08/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%20%E4%B8%A4%E7%A7%8D%E8%A7%92%E5%BA%A6%E5%8F%8A%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/12/动态规划—最长上升子序列问题 两种角度及优化算法/</id>
    <published>2018-08-11T16:00:00.000Z</published>
    <updated>2018-08-12T11:06:26.817Z</updated>
    
    <content type="html"><![CDATA[<h1><center>动态规划—最长上升子序列问题</center></h1><hr><p></p><h2><center>最长上升子序列</center></h2><p></p><p align="right"><a href="https://cn.vjudge.net/problem/OpenJ_Bailian-2757" target="_blank" rel="noopener">[ OpenJ_Bailian - 2757 ]</a></p>  <p>一个数的序列 bi，当 b1 &lt; b2 &lt; … &lt; bS的时候，我们称这个序列是上升的。对于给定的一个序列( a1, a2, …, aN)，我们可以得到一些上升的子序列( ai1, ai2, …, aiK)，这里1 &lt;= i1 &lt; i2 &lt; … &lt; iK &lt;= N。比如，对于序列(1, 7, 3, 5, 9, 4, 8)，有它的一些上升子序列，如(1, 7), (3, 4, 8)等等。这些子序列中最长的长度是4，比如子序列(1, 3, 5, 8). </p><p>你的任务，就是对于给定的序列，求出最长上升子序列的长度。</p><p></p><h4><b>Input</b></h4><br>输入的第一行是序列的长度N (1 &lt;= N &lt;= 1000)。第二行给出序列中的N个整数，这些整数的取值范围都在0到10000。<p></p><p></p><h4><b>Output</b></h4><br>最长上升子序列的长度。<p></p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span> <span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">4</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><hr><p></p><h2>题解</h2><br>找子问题 “求以ak（k=1, 2, 3…N）为终点的最长上升子序列的 一个上升子序列中最右边的那个数，称为该子序列的长度” “终点”。<p></p><p>虽然这个子问题和原问题形式上并不完全一样，但是只要这N个子问题都解决了，那么这N个子问题的解中，最大的那个就是整个问题的解。</p><hr><p></p><h2>方法一</h2><br>状态i的值dp[i] 由若干个值已知的状态值dp[0], dp[1], …, dp[i-1]推出。<br>复杂度<b><i>O(n<sup>2</sup>)</i></b><p></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[i])</span><br><span class="line">dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *max_element(dp, dp + n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p></p><h2>方法二</h2><br>状态i的值dp[i]在被更新的时候, 依据dp[i]去更新和状态i相关的dp[i+1], …, dp[n-1]的值。<br>复杂度<b><i>O(n<sup>2</sup>)</i></b><p></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[i])</span><br><span class="line">dp[j] = max(dp[j], dp[i] + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *max_element(dp, dp + n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4>优化</h4><br>将全部dp[i]的值初始化为INF。然后数组中除了INF之外为单调递增，所以每个dp[i]最多只需要一次更新。对于更新位置不必逐个遍历，可以利用二分搜索，这样复杂度可降为<b><i>O(nlogn)</i></b><p></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">9999999</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">fill(dp, dp + n, INF);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">*lower_bound(dp, dp + n, a[i]) = a[i];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lower_bound(dp, dp + n, INF) - dp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;center&gt;动态规划—最长上升子序列问题&lt;/center&gt;&lt;/h1&gt;

&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;center&gt;最长上升子序列&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://cn.vjudge.n
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>动态规划—最长公共子序列问题 HDU-1159 Common Subsequence</title>
    <link href="http://yoursite.com/2018/08/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%20HDU-1159%20Common%20Subsequence/"/>
    <id>http://yoursite.com/2018/08/09/动态规划—最长公共子序列问题 HDU-1159 Common Subsequence/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2018-08-09T09:06:37.978Z</updated>
    
    <content type="html"><![CDATA[<h1><center>动态规划—最长公共子序列问题</center></h1><hr><p></p><h2><center>Common Subsequence</center></h2><p></p><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1159" target="_blank" rel="noopener">[ HDU - 1159 ]</a></p>  <p>A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = &lt;x1, x2, …, xm&gt; another sequence Z = &lt;z1, z2, …, zk&gt; is a subsequence of X if there exists a strictly increasing sequence &lt;i1, i2, …, ik&gt; of indices of X such that for all j = 1,2,…,k, xij = zj. For example, Z = &lt;a, b, f, c&gt; is a subsequence of X = &lt;a, b, c, f, b, c&gt; with index sequence &lt;1, 2, 4, 6&gt;. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y.<br>The program input is from a text file. Each data set in the file contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct. For each set of data the program prints on the standard output the length of the maximum-length common subsequence from the beginning of a separate line. </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abcfbc abfcab</span></span><br><span class="line"><span class="attribute">programming contest</span> </span><br><span class="line"><span class="attribute">abcd mnp</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><hr><p></p><h2>题解</h2><br>输入两个串s,t, 设dp(i,j)表示: s的左边i个字符形成的子串，与t左边的j个 字符形成的子串的最长公共子序列的长度(i,j从0 开始算)<br>dp(i,j) 就是本题的“状态”<br>假定 len1 = strlen(s),len2 = strlen(t）<br>那么题目就是要求 dp[len1,len2]  <p></p><p>显然：<br>dp(n,0) = 0 ( n= 0…len1）<br>dp(0,n) = 0 ( n= 0…len2）  </p><p>递推公式：<br>if ( s[i-1] == t[j-1] )    //s的最左边字符是s1[0]<br>&emsp;dp(i,j) = dp(i-1,j-1) + 1;<br>else<br>&emsp;dp(i,j) = max(dp(i,j-1), dp(i-1,j) );</p><p>时间复杂度O(mn) m,n是两个字串长度</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>], t[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span> ,s ,t))&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1; i++)</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len2; i++)</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==t[j])</span><br><span class="line">dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = max(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[len1][len2] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;center&gt;动态规划—最长公共子序列问题&lt;/center&gt;&lt;/h1&gt;

&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;center&gt;Common Subsequence&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Github博客打开速度太慢利用Coding处理方法</title>
    <link href="http://yoursite.com/2018/08/06/Github%E5%8D%9A%E5%AE%A2%E6%89%93%E5%BC%80%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E5%88%A9%E7%94%A8Coding%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/06/Github博客打开速度太慢利用Coding处理方法/</id>
    <published>2018-08-05T16:00:00.000Z</published>
    <updated>2018-08-06T13:28:39.537Z</updated>
    
    <content type="html"><![CDATA[<p>很多人都选择用github搭建个人博客，但是国内很多地方访问速度都很慢。<br>因此可以选择将博客同时同步到coding和github<br>然后二者绑定同一域名即可<br>可以自己购买一个域名，或者<br>不想花钱或嫌域名备案麻烦的可以<b>直接绑定自己的github博客地址</b><br>同理也可以选择在github中绑定自己的coding博客地址</p><h4>具体操作如下：</h4><hr><p>博客设置文件更改如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: </span><br><span class="line">    <span class="attribute">hithub</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:mfdy/mfdy.github.io.git</span><br><span class="line">    <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:mfdy/mfdy.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>在coding上建立项目等与github类似，所以省略……<br>然后SSH可以直接用当时github生成的，建议直接添加到个人设置里。添加到项目设置中默认权限是只读的，可能会造成一系列的问题。</p><p>coding上要用户名在前的地址是需要启动 代码 - pages服务 的<br>&nbsp;&nbsp;&nbsp;&nbsp;这里选择静态Pages即可。</p><p>之后在博客根目录右键Git Bash，输入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">git</span>.<span class="keyword">coding</span>.<span class="keyword">net</span></span><br></pre></td></tr></table></figure></p><p>得到以下回复即为成功<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coding.<span class="keyword">net</span> Tips : [Hello ! You've conected to Coding.<span class="keyword">net</span> <span class="keyword">by</span> SSH successfully! ]</span><br></pre></td></tr></table></figure></p><p>下来CMD输入命令上传并发布<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure></p><p>截至到此，你的两个代码仓库都部署好博客了<br>然后给二者绑定同一域名<br>这里可以选择购买一个个人域名绑定<br>但是个人域名需要花钱而且备案时间又有点长比较麻烦  </p><p>这时候就——<b>重点来了</b></p><p><b>在coding的pages自定义域名中直接绑定自己的github域名即可</b><br><img src="https://img-blog.csdn.net/20180806204732516?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZmFkaXl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="avatar"></p><p>同理也可以选择在github中绑定自己的coding博客地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人都选择用github搭建个人博客，但是国内很多地方访问速度都很慢。&lt;br&gt;因此可以选择将博客同时同步到coding和github&lt;br&gt;然后二者绑定同一域名即可&lt;br&gt;可以自己购买一个域名，或者&lt;br&gt;不想花钱或嫌域名备案麻烦的可以&lt;b&gt;直接绑定自己的github博客
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>更换个人博客地址</title>
    <link href="http://yoursite.com/2018/08/05/%E6%9B%B4%E6%8D%A2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2018/08/05/更换个人博客地址/</id>
    <published>2018-08-04T16:39:07.904Z</published>
    <updated>2018-08-04T17:05:38.198Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>博客搬家了！</center></h3><br><br>&emsp;从csdn搬过来了，同时原csdn博客基本不再更新（有时候嫌麻烦会更新，但这里会同步）<br><br> <br><br>原csdn博客地址：<a href="https://blog.csdn.net/mofadiyu" target="_blank" rel="noopener">MFDY’s csdn blog</a><br><br><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;center&gt;博客搬家了！&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&amp;emsp;从csdn搬过来了，同时原csdn博客基本不再更新（有时候嫌麻烦会更新，但这里会同步）&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;原csdn博客地址：&lt;a href=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线段树 &amp;nbsp;HDU-1166 &amp;nbsp;敌兵布阵</title>
    <link href="http://yoursite.com/2018/08/05/%E7%BA%BF%E6%AE%B5%E6%A0%91-HDU-1166/"/>
    <id>http://yoursite.com/2018/08/05/线段树-HDU-1166/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T05:59:23.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敌兵布阵"><a href="#敌兵布阵" class="headerlink" title="敌兵布阵"></a><h1><center>敌兵布阵</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1166" target="_blank" rel="noopener">[HDU - 1166]</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>&nbsp;&nbsp;&nbsp;&nbsp;中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. </p><h4><b>Input</b></h4><p>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令 </p><h4><b>Output</b></h4><p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">Query <span class="number">1</span> <span class="number">3</span></span><br><span class="line">Add <span class="number">3</span> <span class="number">6</span></span><br><span class="line">Query <span class="number">2</span> <span class="number">7</span></span><br><span class="line">Sub <span class="number">10</span> <span class="number">2</span></span><br><span class="line">Add <span class="number">6</span> <span class="number">3</span></span><br><span class="line">Query <span class="number">3</span> <span class="number">10</span></span><br><span class="line">End</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="number">1</span>:</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">59</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">&#125;t[<span class="number">210000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">210000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span>         </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[k].l=l;</span><br><span class="line">    t[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum=a[r];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        build(l, (l+r)/<span class="number">2</span>, k*<span class="number">2</span>);</span><br><span class="line">build((l+r)/<span class="number">2</span>+<span class="number">1</span>, r, k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">t[k].sum=t[k*<span class="number">2</span>].sum+t[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=l &amp;&amp; t[k].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[k].sum;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> m=(t[k].l+t[k].r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=m)</span><br><span class="line">ans+=query(l, r, <span class="number">2</span>*k);</span><br><span class="line"><span class="keyword">if</span>(r&gt;m)</span><br><span class="line">ans+=query(l, r, <span class="number">2</span>*k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].sum+=b;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==a &amp;&amp; t[k].r==a)</span><br><span class="line">      <span class="keyword">return</span>;   </span><br><span class="line"> <span class="keyword">if</span>(a&gt;(t[k].l+t[k].r)/<span class="number">2</span>)</span><br><span class="line"> add(a, b, <span class="number">2</span>*k+<span class="number">1</span>); </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">   add(a, b, <span class="number">2</span>*k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].sum-=b;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==a &amp;&amp; t[k].r==a)</span><br><span class="line">    <span class="keyword">return</span>;   </span><br><span class="line">  <span class="keyword">if</span>(a&gt;(t[k].l+t[k].r)/<span class="number">2</span>)</span><br><span class="line">    sub(a, b, <span class="number">2</span>*k+<span class="number">1</span>); </span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">   sub(a, b, <span class="number">2</span>*k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,T;</span><br><span class="line"><span class="keyword">char</span> command[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=T; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[j]);</span><br><span class="line">build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, command)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(command,<span class="string">"End"</span>)==<span class="number">0</span>)</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(command,<span class="string">"Query"</span>)==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; query(a, b, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(command,<span class="string">"Add"</span>)==<span class="number">0</span>)</span><br><span class="line">add(a, b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(command,<span class="string">"Sub"</span>)==<span class="number">0</span>)   </span><br><span class="line">        sub(a, b, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敌兵布阵&quot;&gt;&lt;a href=&quot;#敌兵布阵&quot; class=&quot;headerlink&quot; title=&quot;敌兵布阵&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;敌兵布阵&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://cn.vj
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>DFS:图的联通块&amp;nbsp; AOJ-0118&amp;nbsp; Property Distribution</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20AOJ-0118%20Property%20Distribution/"/>
    <id>http://yoursite.com/2018/08/05/DFS AOJ-0118 Property Distribution/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2019-05-09T04:24:13.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Property-Distribution"><a href="#Property-Distribution" class="headerlink" title="Property Distribution"></a><h1><center>Property Distribution</center></h1></h2><h2 id="Aizu-0118"><a href="#Aizu-0118" class="headerlink" title="[ Aizu - 0118 ]  "></a><p align="right"><a href="https://cn.vjudge.net/problem/Aizu-0118" target="_blank" rel="noopener">[ Aizu - 0118 ]</a></p>  </h2><p>这道题类似于联通图问题，将联通的归成一个，数一下总共有几个即可。</p><p>因为题目告诉不会有空格，所以排除标记用空格表示即可。</p><hr><p>タナカ氏が HW アールの果樹園を残して亡くなりました。果樹園は東西南北方向に H × W の区画に分けられ、区画ごとにリンゴ、カキ、ミカンが植えられています。タナカ氏はこんな遺言を残していました。</p><p>果樹園は区画単位でできるだけ多くの血縁者に分けること。ただし、ある区画の東西南北どれかの方向にとなりあう区画に同じ種類の果物が植えられていた場合は、区画の境界が分からないのでそれらは 1 つの大きな区画として扱うこと。</p><p>例えば次のような 3 × 10 の区画であれば (‘リ’はリンゴ、’カ’はカキ、’ミ’はミカンを表す)</p><p><img src="https://vj.ti12z.cn/06e2e89f1456440ea922e3c35f8138dc?v=1557288929" alt="avatar"></p><p>同じ樹がある区画の間の境界を消すと次のようになり、</p><p><img src="https://vj.ti12z.cn/b3cbb27032c86ca044bd03e50507096b?v=1557288929" alt="avatar"></p><p>結局 10 個の区画、つまり 10 人で分けられることになります。</p><p>雪が降って区画の境界が見えなくなる前に分配を終えなくてはなりません。あなたの仕事は果樹園の地図をもとに分配する区画の数を決めることです。</p><p>果樹園の地図を読み込み、分配を受けられる血縁者の人数を出力するプログラムを作成してください。</p><h4><b>Input</b></h4><p>複数のデータセットが与えられます。各データセットは空白で区切られた H, W (H, W ≤ 100) を含む行から始まり、続いて H × W の文字からなる H 行の文字列が与えられます。この文字列には、リンゴを表す ‘@’、カキを表す ‘#’、ミカンを表す ‘*’、の 3 文字しか現れません。</p><p>入力はゼロが２つの行で終わります。データセットの数は 20 を超えません。</p><h4><b>Output</b></h4><p>複数のデータセットが与えられます。各データセットは空白で区切られた H, W (H, W ≤ 100) を含む行から始まり、続いて H × W の文字からなる H 行の文字列が与えられます。この文字列には、リンゴを表す ‘@’、カキを表す ‘#’、ミカンを表す ‘*’、の 3 文字しか現れません。</p><p>入力はゼロが２つの行で終わります。データセットの数は 20 を超えません。</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line">####*****@</span><br><span class="line">@#@@@@#*#*</span><br><span class="line">@##***@@@*</span><br><span class="line">#****#*@**</span><br><span class="line">##@*#@@*##</span><br><span class="line">*@@@@*@@@#</span><br><span class="line">***#@*@##*</span><br><span class="line">*@@@*@@##@</span><br><span class="line">*@*#*@##**</span><br><span class="line">@****#@@#@</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(garden[x][y] == c)&#123;</span><br><span class="line">garden[x][y] = <span class="string">' '</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ny = y + d[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; n &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; m &amp;&amp; garden[nx][ny] != <span class="string">' '</span>)</span><br><span class="line">dfs(nx, ny, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; m+n)&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] != <span class="string">' '</span>)&#123;</span><br><span class="line">dfs(i, j, garden[i][j]);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Property-Distribution&quot;&gt;&lt;a href=&quot;#Property-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Property Distribution&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Property Di
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>并查集 &amp;nbsp;HDU-1213 &amp;nbsp;How Many Tables</title>
    <link href="http://yoursite.com/2018/08/05/%E5%B9%B6%E6%9F%A5%E9%9B%86%20HDU-1213%20How%20Many%20Tables/"/>
    <id>http://yoursite.com/2018/08/05/并查集 HDU-1213 How Many Tables/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:39:14.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-Many-Tables"><a href="#How-Many-Tables" class="headerlink" title="How Many Tables"></a><h1><center>How Many Tables</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1213" target="_blank" rel="noopener">[ HDU - 1213 ]</a></p>  <p>Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.<br>One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.<br>For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.  </p><h4><b>Input</b></h4><p>The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases.</p><h4><b>Output</b></h4><p>For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> par[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ran[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ran[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ran[x]&lt;ran[y])&#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(ran[x]==ran[y])</span><br><span class="line">            ran[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, n, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">                swap(a, b);</span><br><span class="line">            unite(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(par[i]==i)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;How-Many-Tables&quot;&gt;&lt;a href=&quot;#How-Many-Tables&quot; class=&quot;headerlink&quot; title=&quot;How Many Tables&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;How Many Tables&lt;/center&gt;&lt;/h1&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/ACM/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>并查集 &amp;nbsp;HDU-1232 &amp;nbsp;畅通工程​​​​​​​</title>
    <link href="http://yoursite.com/2018/08/05/%E5%B9%B6%E6%9F%A5%E9%9B%86%20HDU-1232%20%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B/"/>
    <id>http://yoursite.com/2018/08/05/并查集 HDU-1232 畅通工程​​​​​​​/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:36:27.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="畅通工程"><a href="#畅通工程" class="headerlink" title="畅通工程"></a><h1><center>畅通工程</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1232" target="_blank" rel="noopener">[ HDU - 1232 ]</a></p>  <p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ </p><h4><b>Input</b></h4><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。 </p><h4><b>Output</b></h4><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。 </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">999 </span><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">998</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br>Huge input, scanf is recommended.<p></p><hr><p>赤裸裸的并查集……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> par[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ran[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ran[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ran[x]&lt;ran[y])&#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(ran[x]==ran[y])</span><br><span class="line">            ran[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n!=<span class="number">0</span>)&#123;</span><br><span class="line">    init(n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">                swap(a,b);</span><br><span class="line">            unite(a, b);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">if</span>(par[i]==i)</span><br><span class="line">                sum++;</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;畅通工程&quot;&gt;&lt;a href=&quot;#畅通工程&quot; class=&quot;headerlink&quot; title=&quot;畅通工程&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;畅通工程&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://cn.vj
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/ACM/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>DFS图的联通块 &amp;nbsp;UVA-572 &amp;nbsp;Oil Deposits</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20UVA-572%20Oil%20Deposits/"/>
    <id>http://yoursite.com/2018/08/05/DFS UVA-572 Oil Deposits/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:08:57.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a><h1><center>Oil Deposits</center></h1></h2><p></p><p align="right"><a href="https://cn.vjudge.net/problem/UVA-572" target="_blank" rel="noopener">[ UVA - 572 ]</a></p><br>&nbsp;&nbsp;The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil.<p></p><p>&nbsp;&nbsp;A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.</p><h4><b>Input</b></h4><p>The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 ≤ m ≤ 100 and 1 ≤ n ≤ 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either ‘*’, representing the absence of oil, or ‘@’, representing an oil pocket.</p><h4><b>Output</b></h4><p>For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">*</span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">*@*@*</span><br><span class="line">**@**</span><br><span class="line">*@*@*</span><br><span class="line"><span class="number">1</span> <span class="number">8</span></span><br><span class="line">@@****@*</span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">****@</span><br><span class="line">*@@*@</span><br><span class="line">*@**@</span><br><span class="line">@@@*@</span><br><span class="line">@@**@</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><hr><p></p><h4><b>分析</b></h4><br>从每个”@”格子出发，递归遍历它周围的”@”格子。<p></p><h2 id="每次访问就把他标记成”-”，即不通路（或者可以用数组表示是否访问过）"><a href="#每次访问就把他标记成”-”，即不通路（或者可以用数组表示是否访问过）" class="headerlink" title="每次访问就把他标记成”*”，即不通路（或者可以用数组表示是否访问过）"></a>每次访问就把他标记成”*”，即不通路（或者可以用数组表示是否访问过）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将当前点取消标记，避免重复查找</span></span><br><span class="line">garden[x][y] = <span class="string">'*'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//遍历周围的八个点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>;dy++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx;</span><br><span class="line"><span class="keyword">int</span> ny = y + dy;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx &amp;&amp; nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny &amp;&amp; ny&lt;m &amp;&amp; garden[nx][ny]==<span class="string">'@'</span>)</span><br><span class="line">dfs(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; m+n)&#123;</span><br><span class="line">getchar();<span class="comment">//吸收两数字后的换行符</span></span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();<span class="comment">//吸收每次输入一行后的换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] == <span class="string">'@'</span>)&#123;</span><br><span class="line">dfs(i, j);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Oil-Deposits&quot;&gt;&lt;a href=&quot;#Oil-Deposits&quot; class=&quot;headerlink&quot; title=&quot;Oil Deposits&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Oil Deposits&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>DFS深入优先搜索 &amp;nbsp;POJ-2386 &amp;nbsp;Lake Counting</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20POJ-2386%20Lake%20Counting/"/>
    <id>http://yoursite.com/2018/08/05/DFS POJ-2386 Lake Counting/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:04:28.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lake-Counting"><a href="#Lake-Counting" class="headerlink" title="Lake Counting"></a><h1><center>Lake Counting</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/POJ-2386" target="_blank" rel="noopener">[POJ - 2386]</a></p>  <p>Due to recent rains, water has pooled in various places in Farmer John’s field, which is represented by a rectangle of N x M (1 &lt;= N &lt;= 100; 1 &lt;= M &lt;= 100) squares. Each square contains either water (‘W’) or dry land (‘.’). Farmer John would like to figure out how many ponds have formed in his field. A pond is a connected set of squares with water in them, where a square is considered adjacent to all eight of its neighbors.<br>Given a diagram of Farmer John’s field, determine how many ponds he has.</p><h4><b>Input</b></h4><ul><li>Line 1: Two space-separated integers: N and M   </li><li>Lines 2..N+1: M characters per line representing one row of Farmer John’s field. Each character is either ‘W’ or ‘.’. The characters do not have spaces between them.</li></ul><h4><b>Output</b></h4><ul><li>Line 1: The number of ponds in Farmer John’s field.</li></ul><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">12</span></span><br><span class="line">W.......<span class="selector-class">.WW</span>.</span><br><span class="line"><span class="selector-class">.WWW</span>.....WWW</span><br><span class="line">...<span class="selector-class">.WW</span>..<span class="selector-class">.WW</span>.</span><br><span class="line">........<span class="selector-class">.WW</span>.</span><br><span class="line">........<span class="selector-class">.W</span>..</span><br><span class="line">.<span class="selector-class">.W</span>.....<span class="selector-class">.W</span>..</span><br><span class="line"><span class="selector-class">.W</span><span class="selector-class">.W</span>....<span class="selector-class">.WW</span>.</span><br><span class="line">W<span class="selector-class">.W</span><span class="selector-class">.W</span>....<span class="selector-class">.W</span>.</span><br><span class="line"><span class="selector-class">.W</span><span class="selector-class">.W</span>.....<span class="selector-class">.W</span>.</span><br><span class="line">.<span class="selector-class">.W</span>......<span class="selector-class">.W</span>.</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br>OUTPUT DETAILS:<br>There are three ponds: one in the upper left, one in the lower left,and one along the right side.<p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将当前点取消标记，避免重复查找</span></span><br><span class="line">garden[x][y] = <span class="string">'.'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//遍历周围的八个点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>;dy++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx;</span><br><span class="line"><span class="keyword">int</span> ny = y + dy;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx &amp;&amp; nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny &amp;&amp; ny&lt;m &amp;&amp; garden[nx][ny]==<span class="string">'W'</span>)</span><br><span class="line">dfs(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,&amp;m))&#123;</span><br><span class="line">getchar();<span class="comment">//吸收两数字后的换行符</span></span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();<span class="comment">//吸收每次输入一行后的换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] == <span class="string">'W'</span>)&#123;</span><br><span class="line">dfs(i, j);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lake-Counting&quot;&gt;&lt;a href=&quot;#Lake-Counting&quot; class=&quot;headerlink&quot; title=&quot;Lake Counting&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Lake Counting&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>DFS:图的联通块 &amp;nbsp;POJ-1979 &amp;nbsp;Red and Black</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20POJ-1979%20Red%20and%20Black/"/>
    <id>http://yoursite.com/2018/08/05/DFS POJ-1979 Red and Black/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:13:42.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Red-and-Black"><a href="#Red-and-Black" class="headerlink" title="Red and Black"></a><h1><center>Red and Black</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/POJ-1979" target="_blank" rel="noopener">[ POJ - 1979]</a></p>  <p>&nbsp;&nbsp;Here is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles.<br>&nbsp;&nbsp;Write a program to count the number of black tiles which he can reach by repeating the moves described above. </p><h4><b>Input</b></h4><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.<br>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.<br>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set)<br>The end of the input is indicated by a line consisting of two zeros. </p><h4><b>Output</b></h4><p>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself).</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">9</span></span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line"><span class="number">11</span> <span class="number">9</span></span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line"><span class="number">7</span> <span class="number">7</span></span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">59</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n, sum;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">garden[x][y] = <span class="string">'#'</span>;</span><br><span class="line">sum++;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ny = y + d[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx &amp;&amp; nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny &amp;&amp; ny&lt;m &amp;&amp; garden[nx][ny]==<span class="string">'.'</span>)</span><br><span class="line">dfs(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n) &amp;&amp; m+n)&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] == <span class="string">'@'</span>)</span><br><span class="line">dfs(i, j);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Red-and-Black&quot;&gt;&lt;a href=&quot;#Red-and-Black&quot; class=&quot;headerlink&quot; title=&quot;Red and Black&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Red and Black&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
</feed>
