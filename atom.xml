<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mfdy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-11T12:19:41.919Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MFDY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python序列</title>
    <link href="http://yoursite.com/2019/05/10/Python%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2019/05/10/Python序列/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-05-11T12:19:41.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python序列"><a href="#Python序列" class="headerlink" title="Python序列"></a><center>Python序列</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><h3 id="2-1-1-列表的创建与删除"><a href="#2-1-1-列表的创建与删除" class="headerlink" title="2.1.1 列表的创建与删除"></a>2.1.1 列表的创建与删除</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>].</span><br><span class="line">a_list = []</span><br><span class="line"><span class="comment"># 创建空列表</span></span><br></pre></td></tr></table></figure><p>或者是用list()函数将元组、range对象、字符串或者其他类型的可迭代对象类型的数据转换为列表，例如：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a_list = list((<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment"># [3, 5, 7, 9, 11]</span></span><br><span class="line">list(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9]</span></span><br><span class="line">print(list(<span class="string">'hello world'</span>))</span><br><span class="line"><span class="comment"># ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span></span><br><span class="line">x =list()</span><br><span class="line"><span class="comment"># 创建空列表</span></span><br></pre></td></tr></table></figure></p><p>当不再使用时，使用del命令删除整个列表，如果列表对象所指向的值不再有其他对象指向，同时删除该值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> a_list</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a_list</span><br><span class="line">NameError: name <span class="string">'a_list'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h3 id="2-1-2-列表元素的增加"><a href="#2-1-2-列表元素的增加" class="headerlink" title="2.1.2 列表元素的增加"></a>2.1.2 列表元素的增加</h3><ol><li><p>可以使用 <code>+</code> 运算符添加，但是其实这个是重新创建一个列表，并将元素复制过来</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">aList = aList + [<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">7</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用列表对象的append()方法，再不改变列表在内存中的首地址情况下修改列表，推荐方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList.append(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span> ,<span class="number">9</span>]</span><br></pre></td></tr></table></figure></li></ol><p>Python 采用的是基于值的自动内存管理方式，当为对象修改值得时候，是使变量直接指向新的值，适用于所有类型的变量<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a) </span><br><span class="line"><span class="number">1234589</span></span><br></pre></td></tr></table></figure></p><p>但如果是通过修改下标来修改序列中元素的值或者通过可变序列对象自身提供的方法来增加和删除元素的时候，序列对象在内存中的起始地址是不变的，<b>仅仅是被修改的元素地址发生变化</b><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b </span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a) == id(b)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>]) == id(b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>extend(): 将另一个迭代对象的所有元素添加至该列表对象的尾部</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">a.extend([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure></li><li><p>insert(i, j): 在列表的第i个位置插入j元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList.insert(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用乘法来扩展列表，将列表与整数相乘，生成一个新的列表，但是只是引用已有对象，当修改其中的一个值的时候，相关引用都会被修改</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bList = aList</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">aList = aList * <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">x = [[asd] * <span class="number">2</span>] * <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[asd, asd], [asd, asd]]</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] * <span class="number">3</span></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-1-3-列表元素的删除"><a href="#2-1-3-列表元素的删除" class="headerlink" title="2.1.3 列表元素的删除"></a>2.1.3 列表元素的删除</h3><ol><li><p>使用del命令删除列表或者列表中的指定位置上的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> aList[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> aList</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a_list</span><br><span class="line">NameError: name <span class="string">'a_list'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></li><li><p>pop(): 删除并返回指定位置的元素，没有则默认为最后一个，如果超出范围则抛回异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = list((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">aList.pop(<span class="number">1</span>)</span><br><span class="line">aList.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li><p>remove(): 删除首次出现的指定元素，不存在则返回异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">aList.remove(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-1-4-列表元素访问与计数"><a href="#2-1-4-列表元素访问与计数" class="headerlink" title="2.1.4 列表元素访问与计数"></a>2.1.4 列表元素访问与计数</h3><p>可以使用下标直接访问，如果不存在则抛出异常<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">10</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></p><p>index(i): 找到元素i首次出现时的下标<br>count(i): 统计指定元素i在列表对象中出现的次数<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList.index(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="2-1-5-成员资格判断"><a href="#2-1-5-成员资格判断" class="headerlink" title="2.1.5 成员资格判断"></a>2.1.5 成员资格判断</h3><ol><li>count(): 大于0成立    </li><li>in 关键词<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">bList =[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">cList = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> aList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>] <span class="keyword">in</span> cList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>, <span class="string">'a'</span>) <span class="keyword">in</span> zip(aList, bList)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-1-6-切片操作"><a href="#2-1-6-切片操作" class="headerlink" title="2.1.6 切片操作"></a>2.1.6 切片操作</h3><p>切片使用2个冒号分隔的3个数字来完成： <code>[x:y:z]</code><br>&emsp;x表示切片开始的位置，默认为0<br>&emsp;y表示切片截止的为，默认为列表长度<br>&emsp;z表示切片的步长，默认为1<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[::]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">1</span>:<span class="number">100</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aLIst[<span class="number">100</span>:]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>注意：切片操作在程序中书写时如果要更改，则需要进行赋值操作<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(aList)</span><br><span class="line">aList = aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(aList)</span><br><span class="line"><span class="comment"># 输出内容</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure></p><p>可以使用切片原地地址修改列表内容<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在尾部追加元素</span></span><br><span class="line">aList[len(aList):] = [<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换前3个元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除前3个元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-9的十个数</span></span><br><span class="line">aList = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换偶数位置上的元素</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片不连续，两个元素个数必须一样多</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line">line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    aList[::<span class="number">2</span>] = [<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">3</span> to extended slice of size <span class="number">5</span></span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python序列&quot;&gt;&lt;a href=&quot;#Python序列&quot; class=&quot;headerlink&quot; title=&quot;Python序列&quot;&gt;&lt;/a&gt;&lt;center&gt;Python序列&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本文章总结了董付国老师的Pthon程序设计
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第十二届河南省ACM大学生程序设计竞赛赛后总结</title>
    <link href="http://yoursite.com/2019/05/09/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E6%B2%B3%E5%8D%97%E7%9C%81ACM%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/09/第十二届河南省ACM大学生程序设计竞赛赛后总结/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-05-09T05:23:38.475Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>第十二届河南省ACM大学生程序设计竞赛赛后总结</center></h3><br>&emsp;&emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体育馆里面举办的了。<br><br><br>下面说一下这次比赛的题吧<br>&emsp;&emsp;先说总结：题很烂，连我们自己院赛题出的都不如，题目难度和知识点分配不均，题目数据频频出问题，幕后据说也有不知名交易。<p></p><h4 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h4><p>&emsp;&emsp;一道KMP裸题，但是暴力也能过</p><h4 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h4><p>&emsp;&emsp;动态规划</p><h4 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h4><p>&emsp;&emsp;也是一道字符串处理问题，等于找若干个子串的不同就行，暴力就过</p><h4 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h4><p>&emsp;&emsp;一道线性方程的水题，求若干个点相加之和。但是开场两小时之内基本所有队伍交上去全是TLE。1e5的复杂度怎可能会超时，提问说数据有没有问题得到回复没有，但是后来又重判两次……<br>&emsp;&emsp;赛后我们讨论题意还有问题，题目第一句话告诉我们十点已经会发车，但是过的没有算直接sort就过了，不知道算是题描述错还是数据太水……</p><h4 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h4><p>&emsp;&emsp;题目大意是描述找有向图中先升高再降低的路，直接转化为树即可</p><h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>&emsp;&emsp;骂街题目1号<br>&emsp;&emsp;大意是一个01的图中找11的数量，剩下的1算加1，正确做法二分图匹配，赛后被爆出POJ原题，链接：<a href="http://poj.org/problem?id=3020" target="_blank" rel="noopener"> POJ - 3020: http://poj.org/problem?id=3020 </a><br>结果大家死活做不出来，有很多队伍后来AC了，说是用的贪心直接过，但是贪心很明显不对，比如<br><code>111</code><br><code>100</code><br>贪心跑出来的答案会是3，但明显是2</p><h4 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h4><p>&emsp;&emsp;骂街题目2号<br>&emsp;&emsp;一道强连通分量的题，但是全场除了冠军队没一个能再做出来，讲题人始终坚持数据没问题，冠军队1发就AC，赛后讲题支支吾吾，唔…不做评价</p><h4 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h4><p>&emsp;&emsp;一道很简答的最短路变形问题，但是全场基本被DFG三道题给绊住，基本没人做</p><h4 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h4><p>&emsp;&emsp;你能听到赛后讲题人直接说这个题我们拿出来就是专门为了防AK的，这道题我们也不会做的话吗？？？</p><h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>&emsp;&emsp;一道二叉树的，很多人直接用树存值过的，但是这道题我觉得还是数据水了，因为2<sup>31</sup>的数据量…<br>&emsp;&emsp;这道题分析后会发现是先求出X的因子中有多少个2，即2<sup>n</sup>，然后输出<code>x-2^n+1 x+2^n-1</code>即可<br><br><br><br>以上基本就是这次比赛的总结，大家往年都是吐槽数据弱，比如去年的一道最小费用流问题直接深搜就过…结果今年直接数据出错不说，还……<br>今年比赛已经导致cy等大佬上台怒怼了，如果河南省赛再这么下去…哎……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;center&gt;第十二届河南省ACM大学生程序设计竞赛赛后总结&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ftp打开方式更改为资源管理器方法</title>
    <link href="http://yoursite.com/2018/08/29/ACM-ICPC%202018%20%E5%8D%97%E4%BA%AC%E8%B5%9B%E5%8C%BA%E7%BD%91%E7%BB%9C%E9%A2%84%E8%B5%9B%20%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/29/ACM-ICPC 2018 南京赛区网络预赛 题解/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T02:38:46.997Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。<br>&emsp;目前我的系统是Windows10 1803.<br>&emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的<b>完全没有半毛钱效果</b>  </p><p>&emsp;在即将崩溃的时候发现了这篇文章<a href="https://blog.csdn.net/tianwuya217/article/details/8674622" target="_blank" rel="noopener">https://blog.csdn.net/tianwuya217/article/details/8674622</a><br>由于这篇文章博主操作系统是Win8,所以更改注册表时我发现内容结构不一样，不能按照这个修改方法，但是给我提供了一个思路就是修改[HKEY_CLASSES_ROOT\ftp]目录下的所有内容。  </p><p>&emsp;如果身旁有小伙伴电脑操作系统跟自己的一样，按照小伙伴的内容的更改即可。  </p><p>&emsp;下面列出我的更改内容供大家参考 </p><hr><ul><li><p>win + R 输入 regedit 打开注册表格, 直接地址栏输入[计算机\HKEY_CLASSES_ROOT\ftp]， 此时我发现我的文件夹里空空如也。（哇，这到底是哪个软件搞的鬼啊 (╯‵□′)╯ ︵ ┻━┻）</p></li><li><p>将(默认)的字符串值更改为 <code>URL:File Transfer Protocol</code><br>新建名为 AppUserModelID 字符串值, 输入<code>Microsoft.InternetExplorer.Default</code><br>新建名为 EditFlags DWORD(32位值), 输入 <code>2</code><br>新建名为 FriendlyTypeName 字符串值, 输入<code>@C:\WINDOWS\system32\ieframe.dll,-905</code><br>新建名为 ShellFolder 字符串值, 输入<code>{63da6ec0-2e98-11cf-8d82-444553540000}</code><br>新建名为 ShellFolder 字符串值, 输入<code>{E436EBB6-524F-11CE-9F53-0020AF0BA770}</code><br>新建名为 AppUserModelID 字符串值, 无输入  </p></li><li><p>在ftp中新建项, 命名为 Defaultlcon<br>将(默认)的字符串值更改为 <code>%SystemRoot%\system32\url.dll,0</code>   </p></li><li><p>在ftp中新建项, 命名为 shell<br>将(默认)的字符串值更改为 <code>open</code></p></li><li><p>在shell中新建项，命名为 open<br>新建名为 CommandId 字符串值, 输入 <code>IE.Protocol</code><br>(默认)字符串值无需更改  </p></li><li><p>在open中新建项， 命名为 command<br>将(默认)的字符串值更改为<br>&emsp;<code>&quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; %1</code><br>新建名为 DelegateExecute 字符串值, 输入<code>{17FE9752-0B5A-4665-84CD-569794602F5C}</code>  </p></li><li><p>此时尝试一下，发现ftp可以用资源管理器打开了。</p></li></ul><hr><p>附上参考博客的博主的话:   </p><p>搜索问题最好看那些博客类，相对来说准确度较高！<br>&emsp;<small>——你想想大部分人为什么写博客？大部分都是自己千般万苦的搜索了半天或研究了半天才解决的问题。只是想用博客的形式记录下来，记录下自己的成就感。这成果来之不易 ~</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。&lt;br&gt;&amp;emsp;目前我的系统是Windows10 1803.&lt;br&gt;&amp;emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的&lt;b&gt;完全没有半毛钱
      
    
    </summary>
    
      <category term="系统" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="windows" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/windows/"/>
    
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>ftp打开方式更改为资源管理器方法</title>
    <link href="http://yoursite.com/2018/08/29/ftp%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E6%9B%B4%E6%94%B9%E4%B8%BA%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/29/ftp打开方式更改为资源管理器方法/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T02:38:46.997Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。<br>&emsp;目前我的系统是Windows10 1803.<br>&emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的<b>完全没有半毛钱效果</b>  </p><p>&emsp;在即将崩溃的时候发现了这篇文章<a href="https://blog.csdn.net/tianwuya217/article/details/8674622" target="_blank" rel="noopener">https://blog.csdn.net/tianwuya217/article/details/8674622</a><br>由于这篇文章博主操作系统是Win8,所以更改注册表时我发现内容结构不一样，不能按照这个修改方法，但是给我提供了一个思路就是修改[HKEY_CLASSES_ROOT\ftp]目录下的所有内容。  </p><p>&emsp;如果身旁有小伙伴电脑操作系统跟自己的一样，按照小伙伴的内容的更改即可。  </p><p>&emsp;下面列出我的更改内容供大家参考 </p><hr><ul><li><p>win + R 输入 regedit 打开注册表格, 直接地址栏输入[计算机\HKEY_CLASSES_ROOT\ftp]， 此时我发现我的文件夹里空空如也。（哇，这到底是哪个软件搞的鬼啊 (╯‵□′)╯ ︵ ┻━┻）</p></li><li><p>将(默认)的字符串值更改为 <code>URL:File Transfer Protocol</code><br>新建名为 AppUserModelID 字符串值, 输入<code>Microsoft.InternetExplorer.Default</code><br>新建名为 EditFlags DWORD(32位值), 输入 <code>2</code><br>新建名为 FriendlyTypeName 字符串值, 输入<code>@C:\WINDOWS\system32\ieframe.dll,-905</code><br>新建名为 ShellFolder 字符串值, 输入<code>{63da6ec0-2e98-11cf-8d82-444553540000}</code><br>新建名为 ShellFolder 字符串值, 输入<code>{E436EBB6-524F-11CE-9F53-0020AF0BA770}</code><br>新建名为 AppUserModelID 字符串值, 无输入  </p></li><li><p>在ftp中新建项, 命名为 Defaultlcon<br>将(默认)的字符串值更改为 <code>%SystemRoot%\system32\url.dll,0</code>   </p></li><li><p>在ftp中新建项, 命名为 shell<br>将(默认)的字符串值更改为 <code>open</code></p></li><li><p>在shell中新建项，命名为 open<br>新建名为 CommandId 字符串值, 输入 <code>IE.Protocol</code><br>(默认)字符串值无需更改  </p></li><li><p>在open中新建项， 命名为 command<br>将(默认)的字符串值更改为<br>&emsp;<code>&quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; %1</code><br>新建名为 DelegateExecute 字符串值, 输入<code>{17FE9752-0B5A-4665-84CD-569794602F5C}</code>  </p></li><li><p>此时尝试一下，发现ftp可以用资源管理器打开了。</p></li></ul><hr><p>附上参考博客的博主的话:   </p><p>搜索问题最好看那些博客类，相对来说准确度较高！<br>&emsp;<small>——你想想大部分人为什么写博客？大部分都是自己千般万苦的搜索了半天或研究了半天才解决的问题。只是想用博客的形式记录下来，记录下自己的成就感。这成果来之不易 ~</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。&lt;br&gt;&amp;emsp;目前我的系统是Windows10 1803.&lt;br&gt;&amp;emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的&lt;b&gt;完全没有半毛钱
      
    
    </summary>
    
      <category term="系统" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="windows" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/windows/"/>
    
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>动态规划—最长上升子序列问题 两种角度及优化算法</title>
    <link href="http://yoursite.com/2018/08/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%20%E4%B8%A4%E7%A7%8D%E8%A7%92%E5%BA%A6%E5%8F%8A%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/12/动态规划—最长上升子序列问题 两种角度及优化算法/</id>
    <published>2018-08-11T16:00:00.000Z</published>
    <updated>2018-08-12T11:06:26.817Z</updated>
    
    <content type="html"><![CDATA[<h1><center>动态规划—最长上升子序列问题</center></h1><hr><p></p><h2><center>最长上升子序列</center></h2><p></p><p align="right"><a href="https://cn.vjudge.net/problem/OpenJ_Bailian-2757" target="_blank" rel="noopener">[ OpenJ_Bailian - 2757 ]</a></p>  <p>一个数的序列 bi，当 b1 &lt; b2 &lt; … &lt; bS的时候，我们称这个序列是上升的。对于给定的一个序列( a1, a2, …, aN)，我们可以得到一些上升的子序列( ai1, ai2, …, aiK)，这里1 &lt;= i1 &lt; i2 &lt; … &lt; iK &lt;= N。比如，对于序列(1, 7, 3, 5, 9, 4, 8)，有它的一些上升子序列，如(1, 7), (3, 4, 8)等等。这些子序列中最长的长度是4，比如子序列(1, 3, 5, 8). </p><p>你的任务，就是对于给定的序列，求出最长上升子序列的长度。</p><p></p><h4><b>Input</b></h4><br>输入的第一行是序列的长度N (1 &lt;= N &lt;= 1000)。第二行给出序列中的N个整数，这些整数的取值范围都在0到10000。<p></p><p></p><h4><b>Output</b></h4><br>最长上升子序列的长度。<p></p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span> <span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">4</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><hr><p></p><h2>题解</h2><br>找子问题 “求以ak（k=1, 2, 3…N）为终点的最长上升子序列的 一个上升子序列中最右边的那个数，称为该子序列的长度” “终点”。<p></p><p>虽然这个子问题和原问题形式上并不完全一样，但是只要这N个子问题都解决了，那么这N个子问题的解中，最大的那个就是整个问题的解。</p><hr><p></p><h2>方法一</h2><br>状态i的值dp[i] 由若干个值已知的状态值dp[0], dp[1], …, dp[i-1]推出。<br>复杂度<b><i>O(n<sup>2</sup>)</i></b><p></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[i])</span><br><span class="line">dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *max_element(dp, dp + n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p></p><h2>方法二</h2><br>状态i的值dp[i]在被更新的时候, 依据dp[i]去更新和状态i相关的dp[i+1], …, dp[n-1]的值。<br>复杂度<b><i>O(n<sup>2</sup>)</i></b><p></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[i])</span><br><span class="line">dp[j] = max(dp[j], dp[i] + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *max_element(dp, dp + n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4>优化</h4><br>将全部dp[i]的值初始化为INF。然后数组中除了INF之外为单调递增，所以每个dp[i]最多只需要一次更新。对于更新位置不必逐个遍历，可以利用二分搜索，这样复杂度可降为<b><i>O(nlogn)</i></b><p></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">9999999</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">fill(dp, dp + n, INF);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">*lower_bound(dp, dp + n, a[i]) = a[i];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lower_bound(dp, dp + n, INF) - dp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;center&gt;动态规划—最长上升子序列问题&lt;/center&gt;&lt;/h1&gt;

&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;center&gt;最长上升子序列&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://cn.vjudge.n
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>动态规划—最长公共子序列问题 HDU-1159 Common Subsequence</title>
    <link href="http://yoursite.com/2018/08/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%20HDU-1159%20Common%20Subsequence/"/>
    <id>http://yoursite.com/2018/08/09/动态规划—最长公共子序列问题 HDU-1159 Common Subsequence/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2018-08-09T09:06:37.978Z</updated>
    
    <content type="html"><![CDATA[<h1><center>动态规划—最长公共子序列问题</center></h1><hr><p></p><h2><center>Common Subsequence</center></h2><p></p><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1159" target="_blank" rel="noopener">[ HDU - 1159 ]</a></p>  <p>A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = &lt;x1, x2, …, xm&gt; another sequence Z = &lt;z1, z2, …, zk&gt; is a subsequence of X if there exists a strictly increasing sequence &lt;i1, i2, …, ik&gt; of indices of X such that for all j = 1,2,…,k, xij = zj. For example, Z = &lt;a, b, f, c&gt; is a subsequence of X = &lt;a, b, c, f, b, c&gt; with index sequence &lt;1, 2, 4, 6&gt;. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y.<br>The program input is from a text file. Each data set in the file contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct. For each set of data the program prints on the standard output the length of the maximum-length common subsequence from the beginning of a separate line. </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abcfbc abfcab</span></span><br><span class="line"><span class="attribute">programming contest</span> </span><br><span class="line"><span class="attribute">abcd mnp</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><hr><p></p><h2>题解</h2><br>输入两个串s,t, 设dp(i,j)表示: s的左边i个字符形成的子串，与t左边的j个 字符形成的子串的最长公共子序列的长度(i,j从0 开始算)<br>dp(i,j) 就是本题的“状态”<br>假定 len1 = strlen(s),len2 = strlen(t）<br>那么题目就是要求 dp[len1,len2]  <p></p><p>显然：<br>dp(n,0) = 0 ( n= 0…len1）<br>dp(0,n) = 0 ( n= 0…len2）  </p><p>递推公式：<br>if ( s[i-1] == t[j-1] )    //s的最左边字符是s1[0]<br>&emsp;dp(i,j) = dp(i-1,j-1) + 1;<br>else<br>&emsp;dp(i,j) = max(dp(i,j-1), dp(i-1,j) );</p><p>时间复杂度O(mn) m,n是两个字串长度</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>], t[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span> ,s ,t))&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1; i++)</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len2; i++)</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==t[j])</span><br><span class="line">dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = max(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[len1][len2] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;center&gt;动态规划—最长公共子序列问题&lt;/center&gt;&lt;/h1&gt;

&lt;hr&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;center&gt;Common Subsequence&lt;/center&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Github博客打开速度太慢利用Coding处理方法</title>
    <link href="http://yoursite.com/2018/08/06/Github%E5%8D%9A%E5%AE%A2%E6%89%93%E5%BC%80%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E5%88%A9%E7%94%A8Coding%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/06/Github博客打开速度太慢利用Coding处理方法/</id>
    <published>2018-08-05T16:00:00.000Z</published>
    <updated>2018-08-06T13:28:39.537Z</updated>
    
    <content type="html"><![CDATA[<p>很多人都选择用github搭建个人博客，但是国内很多地方访问速度都很慢。<br>因此可以选择将博客同时同步到coding和github<br>然后二者绑定同一域名即可<br>可以自己购买一个域名，或者<br>不想花钱或嫌域名备案麻烦的可以<b>直接绑定自己的github博客地址</b><br>同理也可以选择在github中绑定自己的coding博客地址</p><h4>具体操作如下：</h4><hr><p>博客设置文件更改如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: </span><br><span class="line">    <span class="attribute">hithub</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:mfdy/mfdy.github.io.git</span><br><span class="line">    <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:mfdy/mfdy.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>在coding上建立项目等与github类似，所以省略……<br>然后SSH可以直接用当时github生成的，建议直接添加到个人设置里。添加到项目设置中默认权限是只读的，可能会造成一系列的问题。</p><p>coding上要用户名在前的地址是需要启动 代码 - pages服务 的<br>&nbsp;&nbsp;&nbsp;&nbsp;这里选择静态Pages即可。</p><p>之后在博客根目录右键Git Bash，输入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">git</span>.<span class="keyword">coding</span>.<span class="keyword">net</span></span><br></pre></td></tr></table></figure></p><p>得到以下回复即为成功<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coding.<span class="keyword">net</span> Tips : [Hello ! You've conected to Coding.<span class="keyword">net</span> <span class="keyword">by</span> SSH successfully! ]</span><br></pre></td></tr></table></figure></p><p>下来CMD输入命令上传并发布<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo d -g</span></span><br></pre></td></tr></table></figure></p><p>截至到此，你的两个代码仓库都部署好博客了<br>然后给二者绑定同一域名<br>这里可以选择购买一个个人域名绑定<br>但是个人域名需要花钱而且备案时间又有点长比较麻烦  </p><p>这时候就——<b>重点来了</b></p><p><b>在coding的pages自定义域名中直接绑定自己的github域名即可</b><br><img src="https://img-blog.csdn.net/20180806204732516?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vZmFkaXl1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="avatar"></p><p>同理也可以选择在github中绑定自己的coding博客地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人都选择用github搭建个人博客，但是国内很多地方访问速度都很慢。&lt;br&gt;因此可以选择将博客同时同步到coding和github&lt;br&gt;然后二者绑定同一域名即可&lt;br&gt;可以自己购买一个域名，或者&lt;br&gt;不想花钱或嫌域名备案麻烦的可以&lt;b&gt;直接绑定自己的github博客
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>更换个人博客地址</title>
    <link href="http://yoursite.com/2018/08/05/%E6%9B%B4%E6%8D%A2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2018/08/05/更换个人博客地址/</id>
    <published>2018-08-04T16:39:07.904Z</published>
    <updated>2018-08-04T17:05:38.198Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>博客搬家了！</center></h3><br><br>&emsp;从csdn搬过来了，同时原csdn博客基本不再更新（有时候嫌麻烦会更新，但这里会同步）<br><br> <br><br>原csdn博客地址：<a href="https://blog.csdn.net/mofadiyu" target="_blank" rel="noopener">MFDY’s csdn blog</a><br><br><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;center&gt;博客搬家了！&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&lt;br&gt;&amp;emsp;从csdn搬过来了，同时原csdn博客基本不再更新（有时候嫌麻烦会更新，但这里会同步）&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;原csdn博客地址：&lt;a href=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>并查集 &amp;nbsp;HDU-1232 &amp;nbsp;畅通工程​​​​​​​</title>
    <link href="http://yoursite.com/2018/08/05/%E5%B9%B6%E6%9F%A5%E9%9B%86%20HDU-1232%20%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B/"/>
    <id>http://yoursite.com/2018/08/05/并查集 HDU-1232 畅通工程​​​​​​​/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:36:27.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="畅通工程"><a href="#畅通工程" class="headerlink" title="畅通工程"></a><h1><center>畅通工程</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1232" target="_blank" rel="noopener">[ HDU - 1232 ]</a></p>  <p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ </p><h4><b>Input</b></h4><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。 </p><h4><b>Output</b></h4><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。 </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">999 </span><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">998</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br>Huge input, scanf is recommended.<p></p><hr><p>赤裸裸的并查集……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> par[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ran[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ran[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ran[x]&lt;ran[y])&#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(ran[x]==ran[y])</span><br><span class="line">            ran[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n!=<span class="number">0</span>)&#123;</span><br><span class="line">    init(n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">                swap(a,b);</span><br><span class="line">            unite(a, b);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">if</span>(par[i]==i)</span><br><span class="line">                sum++;</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;畅通工程&quot;&gt;&lt;a href=&quot;#畅通工程&quot; class=&quot;headerlink&quot; title=&quot;畅通工程&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;畅通工程&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://cn.vj
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/ACM/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>DFS图的联通块 &amp;nbsp;UVA-572 &amp;nbsp;Oil Deposits</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20UVA-572%20Oil%20Deposits/"/>
    <id>http://yoursite.com/2018/08/05/DFS UVA-572 Oil Deposits/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:08:57.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a><h1><center>Oil Deposits</center></h1></h2><p></p><p align="right"><a href="https://cn.vjudge.net/problem/UVA-572" target="_blank" rel="noopener">[ UVA - 572 ]</a></p><br>&nbsp;&nbsp;The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil.<p></p><p>&nbsp;&nbsp;A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.</p><h4><b>Input</b></h4><p>The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 ≤ m ≤ 100 and 1 ≤ n ≤ 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either ‘*’, representing the absence of oil, or ‘@’, representing an oil pocket.</p><h4><b>Output</b></h4><p>For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">*</span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">*@*@*</span><br><span class="line">**@**</span><br><span class="line">*@*@*</span><br><span class="line"><span class="number">1</span> <span class="number">8</span></span><br><span class="line">@@****@*</span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">****@</span><br><span class="line">*@@*@</span><br><span class="line">*@**@</span><br><span class="line">@@@*@</span><br><span class="line">@@**@</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><hr><p></p><h4><b>分析</b></h4><br>从每个”@”格子出发，递归遍历它周围的”@”格子。<p></p><h2 id="每次访问就把他标记成”-”，即不通路（或者可以用数组表示是否访问过）"><a href="#每次访问就把他标记成”-”，即不通路（或者可以用数组表示是否访问过）" class="headerlink" title="每次访问就把他标记成”*”，即不通路（或者可以用数组表示是否访问过）"></a>每次访问就把他标记成”*”，即不通路（或者可以用数组表示是否访问过）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将当前点取消标记，避免重复查找</span></span><br><span class="line">garden[x][y] = <span class="string">'*'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//遍历周围的八个点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>;dy++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx;</span><br><span class="line"><span class="keyword">int</span> ny = y + dy;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx &amp;&amp; nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny &amp;&amp; ny&lt;m &amp;&amp; garden[nx][ny]==<span class="string">'@'</span>)</span><br><span class="line">dfs(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; m+n)&#123;</span><br><span class="line">getchar();<span class="comment">//吸收两数字后的换行符</span></span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();<span class="comment">//吸收每次输入一行后的换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] == <span class="string">'@'</span>)&#123;</span><br><span class="line">dfs(i, j);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Oil-Deposits&quot;&gt;&lt;a href=&quot;#Oil-Deposits&quot; class=&quot;headerlink&quot; title=&quot;Oil Deposits&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Oil Deposits&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>BFS:图的最短路径 &amp;nbsp;Aizu-0558 &amp;nbsp;​​​​​​​Cheese</title>
    <link href="http://yoursite.com/2018/08/05/BFS%20Aizu%20-%200558%20%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8BCheese/"/>
    <id>http://yoursite.com/2018/08/05/BFS Aizu - 0558 ​​​​​​​Cheese/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:28:34.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cheese"><a href="#Cheese" class="headerlink" title="Cheese"></a><h1><center>Cheese</center></h1></h2><h2 id="Aizu-0558"><a href="#Aizu-0558" class="headerlink" title="[ Aizu - 0558 ]  "></a><p align="right"><a href="https://cn.vjudge.net/problem/Aizu-0558" target="_blank" rel="noopener">[ Aizu - 0558 ]</a></p>  </h2><p>大意：在H * W的地图上有N个奶酪工厂，每个工厂分别生产硬度为1-N的奶酪。有一只老鼠准备从出发点吃遍每一个工厂的奶酪。老鼠有一个体力值，初始时为1，每吃一个工厂的奶酪体力值增加1（每个工厂只能吃一次），且老鼠只能吃硬度不大于当前体力值的奶酪。 老鼠从当前格到上下左右相邻的无障碍物的格需要时间1单位，有障碍物的格不能走。走到工厂上时即可吃到该工厂的奶酪，吃奶酪时间不计。问吃遍所有奶酪最少用时。 输入：第一行三个整数H(1 &lt;= H &lt;= 1000)、W(1 &lt;= W &lt;=1000)、N(1 &lt;= N &lt;= 9)，之后H行W列为地图， “.“为空地， ”X“为障碍物，”S“为老鼠洞， 1-N代表硬度为1-N的奶酪的工厂。输出最少用时。</p><hr><p>今年も JOI 町のチーズ工場がチーズの生産を始め，ねずみが巣から顔を出した．JOI 町は東西南北に区画整理されていて，各区画は巣，チーズ工場，障害物，空き地のいずれかである．ねずみは巣から出発して全てのチーズ工場を訪れチーズを 1 個ずつ食べる．</p><p>この町には，N 個のチーズ工場があり，どの工場も１種類のチーズだけを生産している．チーズの硬さは工場によって異なっており，硬さ 1 から N までのチーズを生産するチーズ工場がちょうど 1 つずつある．</p><p>ねずみの最初の体力は 1 であり，チーズを 1 個食べるごとに体力が 1 増える．ただし，ねずみは自分の体力よりも硬いチーズを食べることはできない．</p><p>ねずみは，東西南北に隣り合う区画に 1 分で移動することができるが，障害物の区画には入ることができない．チーズ工場をチーズを食べずに通り過ぎることもできる．すべてのチーズを食べ終えるまでにかかる最短時間を求めるプログラムを書け．ただし，ねずみがチーズを食べるのにかかる時間は無視できる．</p><h4><b>Input</b></h4><p>入力は H+1 行ある．1 行目には 3 つの整数 H，W，N (1 ≤ H ≤ 1000，1 ≤ W ≤ 1000，1 ≤ N ≤ 9) がこの順に空白で区切られて書かれている．2 行目から H+1 行目までの各行には，’S’，’1’, ‘2’, …, ‘9’，’X’，’.’ からなる W 文字の文字列が書かれており，各々が各区画の状態を表している．北から i 番目，西から j 番目の区画を (i,j) と記述することにすると (1 ≤ i ≤ H, 1 ≤ j ≤ W)，第 i+1 行目の j 番目の文字は，区画 (i,j) が巣である場合は ‘S’ となり，障害物である場合は ‘X’ となり，空き地である場合は ‘.’ となり，硬さ 1, 2, …, 9 のチーズを生産する工場である場合はそれぞれ ‘1’, ‘2’, …, ‘9’ となる．入力には巣と硬さ 1, 2, …, N のチーズを生産する工場がそれぞれ 1 つずつある．他のマスは障害物または空き地であることが保証されている．ねずみは全てのチーズを食べられることが保証されている．</p><h4><b>Output</b></h4><p>すべてのチーズを食べ終えるまでにかかる最短時間（分）を表す整数を 1 行で出力せよ．</p><p></p><h4><b>Sample Input 1</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">S..</span><br><span class="line">...</span><br><span class="line">.<span class="number">.1</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output 1</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Input 2</b></h4><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="selector-class">.X</span>..<span class="number">1</span></span><br><span class="line">....X</span><br><span class="line"><span class="selector-class">.XX</span><span class="selector-class">.S</span></span><br><span class="line">.<span class="number">2</span><span class="selector-class">.X</span>.</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output 2</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Input 3</b></h4><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">10</span> <span class="number">9</span></span><br><span class="line"><span class="selector-class">.X</span>..<span class="selector-class">.X</span><span class="selector-class">.S</span><span class="selector-class">.X</span></span><br><span class="line"><span class="number">6</span>..<span class="number">5</span>X..X1X</span><br><span class="line">..<span class="selector-class">.XXXX</span>..X</span><br><span class="line">X..<span class="number">9</span>X..<span class="selector-class">.X</span>.</span><br><span class="line"><span class="number">8</span><span class="selector-class">.X2X</span>..X3X</span><br><span class="line">..<span class="selector-class">.XX</span><span class="selector-class">.X4</span>..</span><br><span class="line">XX....<span class="number">7</span>X..</span><br><span class="line">X.<span class="selector-class">.X</span>.<span class="selector-class">.XX</span>..</span><br><span class="line">X..<span class="selector-class">.X</span><span class="selector-class">.XX</span>..</span><br><span class="line">.<span class="selector-class">.X</span>.......</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output 3</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">91</span></span><br></pre></td></tr></table></figure><p></p><p>問題文と自動審判に使われるデータは、情報オリンピック日本委員会が作成し公開している問題文と採点用テストデータです。</p><hr><p>BFS变下形就行，注意数组范围……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000000</span>, maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="comment">//可以使用结构体</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, k, sx, sy, gx[<span class="number">10</span>], gy[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//到各个位置的最短距离的数组</span></span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br><span class="line"><span class="comment">//4个方向移动的向量</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//求从(sx,sy)到(gx,gy)的最短距离</span></span><br><span class="line"><span class="comment">//若无法到达则是INF</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy, <span class="keyword">int</span> gx, <span class="keyword">int</span> gy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line"><span class="comment">//所有的位置都初始化为INF</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">d[i][j] = INF;</span><br><span class="line"> </span><br><span class="line">que.push(P(sx, sy)); <span class="comment">//将起点加入队列中</span></span><br><span class="line">d[sx][sy] = <span class="number">0</span>; <span class="comment">//并把这一地点的距离设置为0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//不断循环直到队列的长度为0</span></span><br><span class="line"><span class="keyword">while</span> (que.size())&#123;</span><br><span class="line">P p = que.front(); <span class="comment">// 从队列的最前段取出元素</span></span><br><span class="line">que.pop();   <span class="comment">//取出后从队列中删除该元素</span></span><br><span class="line"><span class="keyword">if</span> (p.first == gx &amp;&amp; p.second == gy)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//四个方向的循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="comment">//移动后的位置标记为(nx,ny)</span></span><br><span class="line"><span class="keyword">int</span> nx = p.first + dx[i], ny = p.second + dy[i];</span><br><span class="line"><span class="comment">//判断是否可以移动以及是否访问过(即d[nx][ny]!=INF）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; n &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; m &amp;&amp; maze[nx][ny] != <span class="string">'X'</span> &amp;&amp; d[nx][ny] == INF)&#123;</span><br><span class="line">que.push(P(nx, ny));  <span class="comment">//可以移动，添加到队列</span></span><br><span class="line">d[nx][ny] = d[p.first][p.second] + <span class="number">1</span>; <span class="comment">//到该位置的距离为到p的距离+1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> d[gx][gy];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; maze[i][j];</span><br><span class="line"><span class="keyword">if</span>(maze[i][j]==<span class="string">'S'</span>)&#123;</span><br><span class="line">gx[<span class="number">0</span>] = i;</span><br><span class="line">gy[<span class="number">0</span>] = j;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(maze[i][j]))&#123;</span><br><span class="line">t = maze[i][j] - <span class="string">'0'</span>;</span><br><span class="line">gx[t] = i;</span><br><span class="line">gy[t] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">sum += bfs(gx[i - <span class="number">1</span>], gy[i - <span class="number">1</span>], gx[i], gy[i]);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cheese&quot;&gt;&lt;a href=&quot;#Cheese&quot; class=&quot;headerlink&quot; title=&quot;Cheese&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Cheese&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;Aizu-0558&quot;&gt;&lt;a href=&quot;#Ai
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="BFS" scheme="http://yoursite.com/categories/ACM/BFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>并查集 &amp;nbsp;HDU-1213 &amp;nbsp;How Many Tables</title>
    <link href="http://yoursite.com/2018/08/05/%E5%B9%B6%E6%9F%A5%E9%9B%86%20HDU-1213%20How%20Many%20Tables/"/>
    <id>http://yoursite.com/2018/08/05/并查集 HDU-1213 How Many Tables/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:39:14.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-Many-Tables"><a href="#How-Many-Tables" class="headerlink" title="How Many Tables"></a><h1><center>How Many Tables</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1213" target="_blank" rel="noopener">[ HDU - 1213 ]</a></p>  <p>Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.<br>One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.<br>For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.  </p><h4><b>Input</b></h4><p>The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases.</p><h4><b>Output</b></h4><p>For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> par[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ran[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ran[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ran[x]&lt;ran[y])&#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(ran[x]==ran[y])</span><br><span class="line">            ran[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, n, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">                swap(a, b);</span><br><span class="line">            unite(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(par[i]==i)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;How-Many-Tables&quot;&gt;&lt;a href=&quot;#How-Many-Tables&quot; class=&quot;headerlink&quot; title=&quot;How Many Tables&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;How Many Tables&lt;/center&gt;&lt;/h1&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/ACM/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>贪心 &amp;nbsp;POJ-3617 ​​​​​​​&amp;nbsp;Best Cow Line</title>
    <link href="http://yoursite.com/2018/08/05/%E8%B4%AA%E5%BF%83%20POJ%20-%203617%20%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8BBest%20Cow%20Line/"/>
    <id>http://yoursite.com/2018/08/05/贪心 POJ - 3617 ​​​​​​​Best Cow Line/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:43:25.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Best-Cow-Line"><a href="#Best-Cow-Line" class="headerlink" title="Best Cow Line"></a><h1><center>Best Cow Line</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/POJ-3617" target="_blank" rel="noopener">[ POJ - 3617 ]</a></p>  <p>&nbsp;&nbsp;FJ is about to take his N (1 ≤ N ≤ 2,000) cows to the annual”Farmer of the Year” competition. In this contest every farmer arranges his cows in a line and herds them past the judges.<br>&nbsp;&nbsp;The contest organizers adopted a new registration scheme this year: simply register the initial letter of every cow in the order they will appear (i.e., If FJ takes Bessie, Sylvia, and Dora in that order he just registers BSD). After the registration phase ends, every group is judged in increasing lexicographic order according to the string of the initials of the cows’ names.<br>&nbsp;&nbsp;FJ is very busy this year and has to hurry back to his farm, so he wants to be judged as early as possible. He decides to rearrange his cows, who have already lined up, before registering them.<br>&nbsp;&nbsp;FJ marks a location for a new line of the competing cows. He then proceeds to marshal the cows from the old line to the new one by repeatedly sending either the first or last cow in the (remainder of the) original line to the end of the new line. When he’s finished, FJ takes his cows for registration in this new order.<br>&nbsp;&nbsp;Given the initial order of his cows, determine the least lexicographic string of initials he can make this way. </p><h4><b>Input</b></h4><ul><li>Line 1: A single integer: N  </li><li>Lines 2..N+1: Line i+1 contains a single initial (‘A’..’Z’) of the cow in the ith position in the original line</li></ul><h4><b>Output</b></h4><p>The least lexicographic string he can make. Every line (except perhaps the last one) contains the initials of 80 cows (‘A’..’Z’) in the new line.</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">A</span><br><span class="line"><span class="keyword">C</span></span><br><span class="line"><span class="keyword">D</span></span><br><span class="line">B</span><br><span class="line"><span class="keyword">C</span></span><br><span class="line">B</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ABCBCD</span></span><br></pre></td></tr></table></figure><p></p><hr><p>这道题就每次比较前后即可<br>主要是细节方面的问题<br>1.这道题字符串输入是一个一个输入……要么用getchar()收集，或者直接scanf(“ %c”, &amp;s[i])收集空白符<br>2.注意每80个换一下行<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> par[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> ran[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ran[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ran[x]&lt;ran[y])&#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(ran[x]==ran[y])</span><br><span class="line">            ran[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, n, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">                swap(a, b);</span><br><span class="line">            unite(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(par[i]==i)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Best-Cow-Line&quot;&gt;&lt;a href=&quot;#Best-Cow-Line&quot; class=&quot;headerlink&quot; title=&quot;Best Cow Line&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Best Cow Line&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/categories/ACM/%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>DFS深入优先搜索 &amp;nbsp;POJ-2386 &amp;nbsp;Lake Counting</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20POJ-2386%20Lake%20Counting/"/>
    <id>http://yoursite.com/2018/08/05/DFS POJ-2386 Lake Counting/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:04:28.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lake-Counting"><a href="#Lake-Counting" class="headerlink" title="Lake Counting"></a><h1><center>Lake Counting</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/POJ-2386" target="_blank" rel="noopener">[POJ - 2386]</a></p>  <p>Due to recent rains, water has pooled in various places in Farmer John’s field, which is represented by a rectangle of N x M (1 &lt;= N &lt;= 100; 1 &lt;= M &lt;= 100) squares. Each square contains either water (‘W’) or dry land (‘.’). Farmer John would like to figure out how many ponds have formed in his field. A pond is a connected set of squares with water in them, where a square is considered adjacent to all eight of its neighbors.<br>Given a diagram of Farmer John’s field, determine how many ponds he has.</p><h4><b>Input</b></h4><ul><li>Line 1: Two space-separated integers: N and M   </li><li>Lines 2..N+1: M characters per line representing one row of Farmer John’s field. Each character is either ‘W’ or ‘.’. The characters do not have spaces between them.</li></ul><h4><b>Output</b></h4><ul><li>Line 1: The number of ponds in Farmer John’s field.</li></ul><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">12</span></span><br><span class="line">W.......<span class="selector-class">.WW</span>.</span><br><span class="line"><span class="selector-class">.WWW</span>.....WWW</span><br><span class="line">...<span class="selector-class">.WW</span>..<span class="selector-class">.WW</span>.</span><br><span class="line">........<span class="selector-class">.WW</span>.</span><br><span class="line">........<span class="selector-class">.W</span>..</span><br><span class="line">.<span class="selector-class">.W</span>.....<span class="selector-class">.W</span>..</span><br><span class="line"><span class="selector-class">.W</span><span class="selector-class">.W</span>....<span class="selector-class">.WW</span>.</span><br><span class="line">W<span class="selector-class">.W</span><span class="selector-class">.W</span>....<span class="selector-class">.W</span>.</span><br><span class="line"><span class="selector-class">.W</span><span class="selector-class">.W</span>.....<span class="selector-class">.W</span>.</span><br><span class="line">.<span class="selector-class">.W</span>......<span class="selector-class">.W</span>.</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br>OUTPUT DETAILS:<br>There are three ponds: one in the upper left, one in the lower left,and one along the right side.<p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将当前点取消标记，避免重复查找</span></span><br><span class="line">garden[x][y] = <span class="string">'.'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//遍历周围的八个点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>;dy++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx;</span><br><span class="line"><span class="keyword">int</span> ny = y + dy;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx &amp;&amp; nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny &amp;&amp; ny&lt;m &amp;&amp; garden[nx][ny]==<span class="string">'W'</span>)</span><br><span class="line">dfs(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,&amp;m))&#123;</span><br><span class="line">getchar();<span class="comment">//吸收两数字后的换行符</span></span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();<span class="comment">//吸收每次输入一行后的换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] == <span class="string">'W'</span>)&#123;</span><br><span class="line">dfs(i, j);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lake-Counting&quot;&gt;&lt;a href=&quot;#Lake-Counting&quot; class=&quot;headerlink&quot; title=&quot;Lake Counting&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Lake Counting&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>DFS:图的联通块&amp;nbsp; AOJ-0118&amp;nbsp; Property Distribution</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20AOJ-0118%20Property%20Distribution/"/>
    <id>http://yoursite.com/2018/08/05/DFS AOJ-0118 Property Distribution/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2019-05-09T04:24:13.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Property-Distribution"><a href="#Property-Distribution" class="headerlink" title="Property Distribution"></a><h1><center>Property Distribution</center></h1></h2><h2 id="Aizu-0118"><a href="#Aizu-0118" class="headerlink" title="[ Aizu - 0118 ]  "></a><p align="right"><a href="https://cn.vjudge.net/problem/Aizu-0118" target="_blank" rel="noopener">[ Aizu - 0118 ]</a></p>  </h2><p>这道题类似于联通图问题，将联通的归成一个，数一下总共有几个即可。</p><p>因为题目告诉不会有空格，所以排除标记用空格表示即可。</p><hr><p>タナカ氏が HW アールの果樹園を残して亡くなりました。果樹園は東西南北方向に H × W の区画に分けられ、区画ごとにリンゴ、カキ、ミカンが植えられています。タナカ氏はこんな遺言を残していました。</p><p>果樹園は区画単位でできるだけ多くの血縁者に分けること。ただし、ある区画の東西南北どれかの方向にとなりあう区画に同じ種類の果物が植えられていた場合は、区画の境界が分からないのでそれらは 1 つの大きな区画として扱うこと。</p><p>例えば次のような 3 × 10 の区画であれば (‘リ’はリンゴ、’カ’はカキ、’ミ’はミカンを表す)</p><p><img src="https://vj.ti12z.cn/06e2e89f1456440ea922e3c35f8138dc?v=1557288929" alt="avatar"></p><p>同じ樹がある区画の間の境界を消すと次のようになり、</p><p><img src="https://vj.ti12z.cn/b3cbb27032c86ca044bd03e50507096b?v=1557288929" alt="avatar"></p><p>結局 10 個の区画、つまり 10 人で分けられることになります。</p><p>雪が降って区画の境界が見えなくなる前に分配を終えなくてはなりません。あなたの仕事は果樹園の地図をもとに分配する区画の数を決めることです。</p><p>果樹園の地図を読み込み、分配を受けられる血縁者の人数を出力するプログラムを作成してください。</p><h4><b>Input</b></h4><p>複数のデータセットが与えられます。各データセットは空白で区切られた H, W (H, W ≤ 100) を含む行から始まり、続いて H × W の文字からなる H 行の文字列が与えられます。この文字列には、リンゴを表す ‘@’、カキを表す ‘#’、ミカンを表す ‘*’、の 3 文字しか現れません。</p><p>入力はゼロが２つの行で終わります。データセットの数は 20 を超えません。</p><h4><b>Output</b></h4><p>複数のデータセットが与えられます。各データセットは空白で区切られた H, W (H, W ≤ 100) を含む行から始まり、続いて H × W の文字からなる H 行の文字列が与えられます。この文字列には、リンゴを表す ‘@’、カキを表す ‘#’、ミカンを表す ‘*’、の 3 文字しか現れません。</p><p>入力はゼロが２つの行で終わります。データセットの数は 20 を超えません。</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line">####*****@</span><br><span class="line">@#@@@@#*#*</span><br><span class="line">@##***@@@*</span><br><span class="line">#****#*@**</span><br><span class="line">##@*#@@*##</span><br><span class="line">*@@@@*@@@#</span><br><span class="line">***#@*@##*</span><br><span class="line">*@@@*@@##@</span><br><span class="line">*@*#*@##**</span><br><span class="line">@****#@@#@</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(garden[x][y] == c)&#123;</span><br><span class="line">garden[x][y] = <span class="string">' '</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ny = y + d[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; n &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; m &amp;&amp; garden[nx][ny] != <span class="string">' '</span>)</span><br><span class="line">dfs(nx, ny, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; m+n)&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] != <span class="string">' '</span>)&#123;</span><br><span class="line">dfs(i, j, garden[i][j]);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Property-Distribution&quot;&gt;&lt;a href=&quot;#Property-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Property Distribution&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Property Di
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>DFS:图的联通块 &amp;nbsp;POJ-1979 &amp;nbsp;Red and Black</title>
    <link href="http://yoursite.com/2018/08/05/DFS%20POJ-1979%20Red%20and%20Black/"/>
    <id>http://yoursite.com/2018/08/05/DFS POJ-1979 Red and Black/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:13:42.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Red-and-Black"><a href="#Red-and-Black" class="headerlink" title="Red and Black"></a><h1><center>Red and Black</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/POJ-1979" target="_blank" rel="noopener">[ POJ - 1979]</a></p>  <p>&nbsp;&nbsp;Here is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles.<br>&nbsp;&nbsp;Write a program to count the number of black tiles which he can reach by repeating the moves described above. </p><h4><b>Input</b></h4><p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.<br>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.<br>‘.’ - a black tile<br>‘#’ - a red tile<br>‘@’ - a man on a black tile(appears exactly once in a data set)<br>The end of the input is indicated by a line consisting of two zeros. </p><h4><b>Output</b></h4><p>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself).</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">9</span></span><br><span class="line">....#.</span><br><span class="line">.....#</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">#@...#</span><br><span class="line">.#..#.</span><br><span class="line"><span class="number">11</span> <span class="number">9</span></span><br><span class="line">.#.........</span><br><span class="line">.#.#######.</span><br><span class="line">.#.#.....#.</span><br><span class="line">.#.#.###.#.</span><br><span class="line">.#.#..@#.#.</span><br><span class="line">.#.#####.#.</span><br><span class="line">.#.......#.</span><br><span class="line">.#########.</span><br><span class="line">...........</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..###</span><br><span class="line">..#..#..#@.</span><br><span class="line">..#..#..#..</span><br><span class="line">..#..#..#..</span><br><span class="line"><span class="number">7</span> <span class="number">7</span></span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line">###.###</span><br><span class="line">...@...</span><br><span class="line">###.###</span><br><span class="line">..#.#..</span><br><span class="line">..#.#..</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">59</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m, n, sum;</span><br><span class="line"><span class="keyword">char</span> garden[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">garden[x][y] = <span class="string">'#'</span>;</span><br><span class="line">sum++;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ny = y + d[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx &amp;&amp; nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny &amp;&amp; ny&lt;m &amp;&amp; garden[nx][ny]==<span class="string">'.'</span>)</span><br><span class="line">dfs(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n) &amp;&amp; m+n)&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">memset</span>(garden, <span class="number">0</span>, <span class="keyword">sizeof</span>(garden));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;garden[i][j]);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line"><span class="keyword">if</span> (garden[i][j] == <span class="string">'@'</span>)</span><br><span class="line">dfs(i, j);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Red-and-Black&quot;&gt;&lt;a href=&quot;#Red-and-Black&quot; class=&quot;headerlink&quot; title=&quot;Red and Black&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Red and Black&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/categories/ACM/DFS/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>线段树 &amp;nbsp;HDU-1754 &amp;nbsp;I Hate It</title>
    <link href="http://yoursite.com/2018/08/05/%E7%BA%BF%E6%AE%B5%E6%A0%91-HDU-1754/"/>
    <id>http://yoursite.com/2018/08/05/线段树-HDU-1754/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T05:59:21.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-Hate-It"><a href="#I-Hate-It" class="headerlink" title="I Hate It"></a><h1><center>I Hate It</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1754" target="_blank" rel="noopener">[HDU - 1754]</a></p><p>很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br>这让很多学生很反感。<br>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。</p><h4><b>Input</b></h4><p>本题目包含多组测试，请处理到文件结束。<br>在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br>学生ID编号分别从1编到N。<br>第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br>接下来有M行。每一行有一个字符 C (只取’Q’或’U’) ，和两个正整数A，B。<br>当C为’Q’的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br>当C为’U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。   </p><h4><b>Output</b></h4><p>对于每一次询问操作，在一行里面输出最高成绩。</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Q <span class="number">1</span> <span class="number">5</span></span><br><span class="line">U <span class="number">3</span> <span class="number">6</span></span><br><span class="line">Q <span class="number">3</span> <span class="number">4</span></span><br><span class="line">Q <span class="number">4</span> <span class="number">5</span></span><br><span class="line">U <span class="number">2</span> <span class="number">9</span></span><br><span class="line">Q <span class="number">1</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Huge <span class="built_in">input</span>,the C <span class="function"><span class="keyword">function</span> <span class="title">scanf</span><span class="params">()</span></span> will work better than cin</span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,max;</span><br><span class="line">&#125;t[<span class="number">810000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> A[<span class="number">210000</span>],max;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MAX</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b ? a:b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].l=l;</span><br><span class="line">t[k].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">t[k].max=A[r];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">build(l,(l+r)/<span class="number">2</span>,k&lt;&lt;<span class="number">1</span>);</span><br><span class="line">build((l+r)/<span class="number">2</span>+<span class="number">1</span>,r,k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">t[k].max=MAX(t[k&lt;&lt;<span class="number">1</span>].max, t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l&gt;=l &amp;&amp; t[k].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[k].max;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m=(t[k].l+t[k].r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=m)</span><br><span class="line">ans=query(l,r,k&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;m)</span><br><span class="line">ans=MAX(ans,query(l,r,k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==a &amp;&amp; t[k].r==a)&#123;</span><br><span class="line">      t[k].max=b;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">if</span>(a&gt;(t[k].l+t[k].r)/<span class="number">2</span>)</span><br><span class="line"> change(a,b,<span class="number">2</span>*k+<span class="number">1</span>); </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">   change(a,b,<span class="number">2</span>*k);</span><br><span class="line">   t[k].max=MAX(t[k*<span class="number">2</span>].max, t[k*<span class="number">2</span>+<span class="number">1</span>].max);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,k,n,m;</span><br><span class="line"><span class="keyword">char</span> command;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line"><span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(A));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span>(m--&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c%d%d"</span>,&amp;command,&amp;a,&amp;b);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(command==<span class="string">'Q'</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; query(a,b,<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">'U'</span>)</span><br><span class="line">change(a,b,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-Hate-It&quot;&gt;&lt;a href=&quot;#I-Hate-It&quot; class=&quot;headerlink&quot; title=&quot;I Hate It&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;I Hate It&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>线段树 &amp;nbsp;HDU-1166 &amp;nbsp;敌兵布阵</title>
    <link href="http://yoursite.com/2018/08/05/%E7%BA%BF%E6%AE%B5%E6%A0%91-HDU-1166/"/>
    <id>http://yoursite.com/2018/08/05/线段树-HDU-1166/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T05:59:23.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敌兵布阵"><a href="#敌兵布阵" class="headerlink" title="敌兵布阵"></a><h1><center>敌兵布阵</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/HDU-1166" target="_blank" rel="noopener">[HDU - 1166]</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>&nbsp;&nbsp;&nbsp;&nbsp;中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. </p><h4><b>Input</b></h4><p>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令 </p><h4><b>Output</b></h4><p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 </p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">Query <span class="number">1</span> <span class="number">3</span></span><br><span class="line">Add <span class="number">3</span> <span class="number">6</span></span><br><span class="line">Query <span class="number">2</span> <span class="number">7</span></span><br><span class="line">Sub <span class="number">10</span> <span class="number">2</span></span><br><span class="line">Add <span class="number">6</span> <span class="number">3</span></span><br><span class="line">Query <span class="number">3</span> <span class="number">10</span></span><br><span class="line">End</span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="number">1</span>:</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">59</span></span><br></pre></td></tr></table></figure><p></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, sum;</span><br><span class="line">&#125;t[<span class="number">210000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">210000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span>         </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[k].l=l;</span><br><span class="line">    t[k].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        t[k].sum=a[r];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        build(l, (l+r)/<span class="number">2</span>, k*<span class="number">2</span>);</span><br><span class="line">build((l+r)/<span class="number">2</span>+<span class="number">1</span>, r, k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">t[k].sum=t[k*<span class="number">2</span>].sum+t[k*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[k].l&gt;=l &amp;&amp; t[k].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[k].sum;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> m=(t[k].l+t[k].r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=m)</span><br><span class="line">ans+=query(l, r, <span class="number">2</span>*k);</span><br><span class="line"><span class="keyword">if</span>(r&gt;m)</span><br><span class="line">ans+=query(l, r, <span class="number">2</span>*k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].sum+=b;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==a &amp;&amp; t[k].r==a)</span><br><span class="line">      <span class="keyword">return</span>;   </span><br><span class="line"> <span class="keyword">if</span>(a&gt;(t[k].l+t[k].r)/<span class="number">2</span>)</span><br><span class="line"> add(a, b, <span class="number">2</span>*k+<span class="number">1</span>); </span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">   add(a, b, <span class="number">2</span>*k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].sum-=b;</span><br><span class="line"><span class="keyword">if</span>(t[k].l==a &amp;&amp; t[k].r==a)</span><br><span class="line">    <span class="keyword">return</span>;   </span><br><span class="line">  <span class="keyword">if</span>(a&gt;(t[k].l+t[k].r)/<span class="number">2</span>)</span><br><span class="line">    sub(a, b, <span class="number">2</span>*k+<span class="number">1</span>); </span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">   sub(a, b, <span class="number">2</span>*k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,T;</span><br><span class="line"><span class="keyword">char</span> command[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=T; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[j]);</span><br><span class="line">build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, command)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(command,<span class="string">"End"</span>)==<span class="number">0</span>)</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(command,<span class="string">"Query"</span>)==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; query(a, b, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(command,<span class="string">"Add"</span>)==<span class="number">0</span>)</span><br><span class="line">add(a, b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(command,<span class="string">"Sub"</span>)==<span class="number">0</span>)   </span><br><span class="line">        sub(a, b, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敌兵布阵&quot;&gt;&lt;a href=&quot;#敌兵布阵&quot; class=&quot;headerlink&quot; title=&quot;敌兵布阵&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;敌兵布阵&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://cn.vj
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>网络流—Edmonds-Karp最短增广路算法(最大流)</title>
    <link href="http://yoursite.com/2018/08/05/%E7%BD%91%E7%BB%9C%E6%B5%81%E2%80%94Edmonds-Karp%20%E6%9C%80%E7%9F%AD%E5%A2%9E%E5%B9%BF%E8%B7%AF%E7%AE%97%E6%B3%95(%E6%9C%80%E5%A4%A7%E6%B5%81)/"/>
    <id>http://yoursite.com/2018/08/05/网络流—Edmonds-Karp 最短增广路算法(最大流)/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T08:40:22.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络流—Edmonds-Karp-最短增广路算法-最大流"><a href="#网络流—Edmonds-Karp-最短增广路算法-最大流" class="headerlink" title="网络流—Edmonds-Karp 最短增广路算法(最大流)"></a><h1><center>网络流—Edmonds-Karp 最短增广路算法(最大流)</center></h1></h2><h4>思路</h4><br>■求最大流的过程，就是不断找到一条源到汇的路径，然后构建残余网络，再在残余网络上寻找新的路径，使总流量增加，然后形成新的残余网络，再寻找新路径…..直到某个残余网络上找不到从源到汇的路径为止，最大流就算出来了。<br><br>■每次寻找新流量并构造新残余网络的过程，就叫做寻找流量的“增广路径”，也叫“增广”<br><br>现在假设每条边的容量都是整数，这个算法每次都能将流至少增加1<br><br>由于整个网络的流量最多不超过 图中所有的边的容量和C，从而算法会结束<br><br><h4>复杂度</h4><br>找增广路径的算法可以用dfs，复杂度为边数m+顶点数n ，Dfs 最多运行C次 ，所以时间复杂度为C<em>(m+n) =C</em> n^2<br>这个算法实现很简单<br>但是注意到在图中C可能会非常大<br><br>因此在每次增广的时候，选择从源到汇的具有最少边数的增广路径,即不是通过dfs寻找增广路径，而是通过bfs寻找增广路径。<br><br>这就是<b>Edmonds-Karp 最短增广路算法 </b><br><br>已经证明这种算法的复杂度上限为nm<sup>2</sup> (n是点数，m是边数）<br><br>—<br><h2><center>例题： Drainage Ditches</center></h2><br><br><p align="right"><a href="https://cn.vjudge.net/problem/POJ-1273" target="_blank" rel="noopener">[ POJ - 1273 ]</a></p><br><br>Every time it rains on Farmer John’s fields, a pond forms over Bessie’s favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie’s clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch.<br>Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network.<br>Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle.<br><br><h4><b>Input</b></h4><p><b><i>The input includes several cases.</i></b> For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 200) and M (2 &lt;= M &lt;= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 10,000,000) is the maximum rate at which water will flow through the ditch.</p><h4><b>Output</b></h4><p>For each case, output a single integer, the maximum rate at which water may emptied from the pond.</p><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">40</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">30</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><p></p><hr><p>赤裸裸的网络流题目。给定点数，边数，每条边的容量，以及源点，汇点，求最大流。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> G[<span class="number">300</span>][<span class="number">300</span>];</span><br><span class="line"><span class="keyword">int</span> Prev[<span class="number">300</span>]; <span class="comment">//路径上每个节点的前驱节点</span></span><br><span class="line"><span class="keyword">bool</span> Visited[<span class="number">300</span>];</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="comment">//m是顶点数目，顶点编号从1开始 1是源，m是汇, n是边数</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">Augment</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(Prev, <span class="number">0</span>, <span class="keyword">sizeof</span>(Prev));</span><br><span class="line"><span class="built_in">memset</span>(Visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(Visited));</span><br><span class="line">Prev[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">Visited[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">q.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">bool</span> bFindPath = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用bfs寻找一条源到汇的可行路径</span></span><br><span class="line"><span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">v = q.front();</span><br><span class="line">q.pop_front();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (G[v][i] &gt; <span class="number">0</span> &amp;&amp; Visited[i] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//必须是依然有容量的边，才可以走</span></span><br><span class="line">Prev[i] = v;</span><br><span class="line">Visited[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i == m)&#123;</span><br><span class="line">bFindPath = <span class="literal">true</span>;</span><br><span class="line">q.clear();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">q.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!bFindPath)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> nMinFlow = <span class="number">999999999</span>;</span><br><span class="line">v = m;</span><br><span class="line"><span class="comment">//寻找源到汇路径上容量最小的边，其容量就是此次增加的总流量</span></span><br><span class="line"><span class="keyword">while</span> (Prev[v])&#123;</span><br><span class="line">nMinFlow = min(nMinFlow, G[Prev[v]][v]);</span><br><span class="line">v = Prev[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//沿此路径添加反向边，同时修改路径上每条边的容量</span></span><br><span class="line">v = m;</span><br><span class="line"><span class="keyword">while</span> (Prev[v])&#123;</span><br><span class="line">G[Prev[v]][v] -= nMinFlow;</span><br><span class="line">G[v][Prev[v]] += nMinFlow;</span><br><span class="line">v = Prev[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nMinFlow;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</span><br><span class="line"><span class="comment">//m是顶点数目，顶点编号从1开始</span></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> s, e, c;</span><br><span class="line"><span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span>(G));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s, &amp;e, &amp;c);</span><br><span class="line">G[s][e] += c; <span class="comment">//两点之间可能有多条边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> MaxFlow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> aug;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (aug = Augment())</span><br><span class="line">MaxFlow += aug;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; MaxFlow &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网络流—Edmonds-Karp-最短增广路算法-最大流&quot;&gt;&lt;a href=&quot;#网络流—Edmonds-Karp-最短增广路算法-最大流&quot; class=&quot;headerlink&quot; title=&quot;网络流—Edmonds-Karp 最短增广路算法(最大流)&quot;&gt;&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="网络流" scheme="http://yoursite.com/categories/ACM/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="http://yoursite.com/categories/ACM/%E7%BD%91%E7%BB%9C%E6%B5%81/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>贪心 &amp;nbsp;POJ-2376 ​​​​​​​&amp;nbsp;Cleaning Shifts</title>
    <link href="http://yoursite.com/2018/08/05/%E8%B4%AA%E5%BF%83%20POJ%20-%202376%20%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8BCleaning%20Shifts/"/>
    <id>http://yoursite.com/2018/08/05/贪心 POJ - 2376 ​​​​​​​Cleaning Shifts/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T07:47:02.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cleaning-Shifts"><a href="#Cleaning-Shifts" class="headerlink" title="Cleaning Shifts"></a><h1><center>Cleaning Shifts</center></h1></h2><p align="right"><a href="https://cn.vjudge.net/problem/POJ-2376" target="_blank" rel="noopener">[ POJ - 2376 ]</a></p>  <p>Farmer John is assigning some of his N (1 &lt;= N &lt;= 25,000) cows to do some cleaning chores around the barn. He always wants to have one cow working on cleaning things up and has divided the day into T shifts (1 &lt;= T &lt;= 1,000,000), the first being shift 1 and the last being shift T.<br>Each cow is only available at some interval of times during the day for work on cleaning. Any cow that is selected for cleaning duty will work for the entirety of her interval.<br>Your job is to help Farmer John assign some cows to shifts so that (i) every shift has at least one cow assigned to it, and (ii) as few cows as possible are involved in cleaning. If it is not possible to assign a cow to each shift, print -1.</p><h4><b>Input</b></h4><ul><li>Line 1: Two space-separated integers: N and T   </li><li>Lines 2..N+1: Each line contains the start and end times of the interval during which a cow can work. A cow starts work at the start time and finishes after the end time.</li></ul><h4><b>Output</b></h4><ul><li>Line 1: The minimum number of cows Farmer John needs to hire or -1 if it is not possible to assign a cow to each shift.</li></ul><p></p><h4><b>Sample Input</b></h4><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">6 </span><span class="number">10</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Sample Output</b></h4><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p></p><h4><b>Hint</b></h4><br>This problem has huge input data,use scanf() instead of cin to read data to avoid time limit exceed.<br>INPUT DETAILS:<br>There are 3 cows and 10 shifts. Cow #1 can work shifts 1..7, cow #2 can work shifts 3..6, and cow #3 can work shifts 6..10.<br>OUTPUT DETAILS:<br>By selecting cows #1 and #3, all shifts are covered. There is no way to cover all the shifts using fewer than 2 cows.<p></p><hr><p>先对起始时间进行排序，然后对于没有取过的牛进行处理，判断即可。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">25050</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; it[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, t;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;it[i].first, &amp;it[i].second);</span><br><span class="line">   &#125;</span><br><span class="line">   sort(it, it + n);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> ju = <span class="number">0</span>, maxn = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (maxn &lt; t) &#123;</span><br><span class="line">      <span class="keyword">int</span> ans = maxn + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = ju; i &lt; n; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (it[i].first &lt;= ans &amp;&amp; it[i].second &gt;= ans) &#123;</span><br><span class="line">            maxn = max(maxn, it[i].second);</span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span> (it[i].first &gt; ans) &#123;</span><br><span class="line">            ju = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span>(ans &gt; maxn)</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         sum++;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (maxn &gt;= t)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cleaning-Shifts&quot;&gt;&lt;a href=&quot;#Cleaning-Shifts&quot; class=&quot;headerlink&quot; title=&quot;Cleaning Shifts&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Cleaning Shifts&lt;/center&gt;&lt;/h1&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/categories/ACM/%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
</feed>
