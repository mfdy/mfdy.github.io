<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mfdy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-23T02:26:59.614Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MFDY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模拟退火 HDU - 2899 Strange Function</title>
    <link href="http://yoursite.com/2019/09/22/ACM/Thinking/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%20HDU%20-%202899%20Strange%20Function/"/>
    <id>http://yoursite.com/2019/09/22/ACM/Thinking/模拟退火 HDU - 2899 Strange Function/</id>
    <published>2019-09-21T16:00:00.000Z</published>
    <updated>2019-09-23T02:26:59.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Strange-Function"><a href="#Strange-Function" class="headerlink" title="Strange Function"></a><h1><center>Strange Function</center></h1></h2><h2 id="HDU-2899"><a href="#HDU-2899" class="headerlink" title="[ HDU - 2899 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2899" target="_blank" rel="noopener">[ HDU - 2899 ]</a></p>  </h2><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>函数 F(x) = 6x<sup>7</sup> + 8x<sup>6</sup> + 7x<sup>3</sup> + 5x<sup>2</sup> - yx, 其中x的范围是0 ≤ x ≤ 100.<br>输入y值，输出F(x)的最小值</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>模拟退火就是类似于物体降温的概率，来进行多次搜索迭代</p><p>在迭代过程中，模拟退火算法随机选择下一个状态，有两种可能</p><ol><li>新状态比原来状态更优，那么接受这个新状态</li><li>新状态更差，那么以一定的概率接受该状态，不过这个概率应该随着时间的推移逐渐降低</li></ol><h4 id="模拟退火算法的主要步骤如下："><a href="#模拟退火算法的主要步骤如下：" class="headerlink" title="模拟退火算法的主要步骤如下："></a>模拟退火算法的主要步骤如下：</h4><ol><li>设置一个初始的温度T</li><li>温度下降，状态转移。从当前温度按降温系数下降到下一个温度，在新的温度计算当前状态</li><li>如果温度降到设定的温度下界，程序停止</li></ol><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eps = <span class="number">1e-8</span>;              <span class="comment">// 终止温度，接近0，用于控制精度</span></span><br><span class="line">T = <span class="number">100</span>;                 <span class="comment">// 初始温度，应该是高温，以100℃为例</span></span><br><span class="line">delta = <span class="number">0.98</span>;            <span class="comment">// 降温系数，控制退火的快慢，小于1，以0.98为例</span></span><br><span class="line">g(x);                    <span class="comment">// 状态x时的评价函数，例如物理意义上的能量</span></span><br><span class="line">now, next;               <span class="comment">// 当前状态和新状态</span></span><br><span class="line"><span class="keyword">while</span> (T &gt; eps) &#123;                   <span class="comment">// 如果温度未降到eps</span></span><br><span class="line">    g(next), g(now);                <span class="comment">// 计算能量</span></span><br><span class="line">    dE = g(next) - g(now);          <span class="comment">// 能量差</span></span><br><span class="line">    <span class="keyword">if</span> (dE &gt;= <span class="number">0</span>)                    <span class="comment">// 新状态更优， 接受新状态</span></span><br><span class="line">        now = next;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span>(dE / T) &gt; rand())  <span class="comment">// 如果新状态更差，在一定概率下接受他，e^(dE/T)</span></span><br><span class="line">        now = next;</span><br><span class="line">    T *= delta;                     <span class="comment">// 降温，退火过程模拟</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>模拟退火算法在ACM中的典型问题有函数最值问题、TSP旅行商问题、最小圆覆盖、最小球覆盖等</p><h3 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;    <span class="comment">// 终止温度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> x)</span>   <span class="comment">// 计算函数值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span> * <span class="built_in">pow</span>(x, <span class="number">7.0</span>) + <span class="number">8</span> * <span class="built_in">pow</span>(x, <span class="number">6.0</span>) + <span class="number">7</span> * <span class="built_in">pow</span>(x, <span class="number">3.0</span>) + <span class="number">5</span> * <span class="built_in">pow</span>(x, <span class="number">2.0</span>) - y * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> T = <span class="number">100</span>;         <span class="comment">// 初始温度</span></span><br><span class="line">    <span class="keyword">double</span> delta = <span class="number">0.98</span>;    <span class="comment">// 降温系数</span></span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">50.0</span>;        <span class="comment">// x的初始值</span></span><br><span class="line">    <span class="keyword">double</span> now = func(x);   <span class="comment">// 计算初始函数值</span></span><br><span class="line">    <span class="keyword">double</span> ans = now;       <span class="comment">// 返回值</span></span><br><span class="line">    <span class="keyword">while</span> (T &gt; eps) &#123;</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> newx = x + f[rand() % <span class="number">2</span>] * T;    <span class="comment">// 按概率改变x，随t的降温而减少</span></span><br><span class="line">        <span class="keyword">if</span> (newx &gt;= <span class="number">0</span> &amp;&amp; newx &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> next = func(newx);</span><br><span class="line">            ans = min(ans, next);</span><br><span class="line">            <span class="keyword">if</span> (now - next &gt; eps) &#123;</span><br><span class="line">                x = newx;</span><br><span class="line">                now = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        T *= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cas);</span><br><span class="line">    <span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Strange-Function&quot;&gt;&lt;a href=&quot;#Strange-Function&quot; class=&quot;headerlink&quot; title=&quot;Strange Function&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Strange Function&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/categories/ACM/Thinking/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/categories/ACM/Thinking/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/tags/Thinking/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>二维前缀和+差分 HDU6514 Monitor</title>
    <link href="http://yoursite.com/2019/09/18/ACM/Thinking/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C+%E5%B7%AE%E5%88%86%20HDU6514%20Monitor/"/>
    <id>http://yoursite.com/2019/09/18/ACM/Thinking/二维前缀和+差分 HDU6514 Monitor/</id>
    <published>2019-09-17T16:00:00.000Z</published>
    <updated>2019-09-18T12:24:59.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a><h1><center>Monitor</center></h1></h2><h2 id="HDU-6514"><a href="#HDU-6514" class="headerlink" title="[ HDU - 6514 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6514" target="_blank" rel="noopener">[ HDU - 6514 ]</a></p>  </h2><p>题目大意：给你个n×m的区域，每个区域被选中标记为1，没被选中标记为0，然后给一些标记的区域，查询若干个区域问是否有0的</p><p>一道二维前缀和的题目，想通没什么难度</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout freopen(<span class="meta-string">"out.txt"</span>, <span class="meta-string">"w"</span>, stdout)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, p, q;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span> || i &gt; n || j &gt; m)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (i - <span class="number">1</span>) * m + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = getid(i, j);</span><br><span class="line">    <span class="keyword">if</span> (!id)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    a[id] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            add(x1, y1, <span class="number">1</span>);</span><br><span class="line">            add(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            add(x1, y2 + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            add(x2 + <span class="number">1</span>, y1, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                a[getid(i, j)] += a[getid(i - <span class="number">1</span>, j)] + a[getid(i, j - <span class="number">1</span>)] - a[getid(i - <span class="number">1</span>, j - <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="keyword">if</span> (a[getid(i,j)] &gt; <span class="number">0</span>)</span><br><span class="line">                    a[getid(i, j)] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                a[getid(i, j)] += a[getid(i - <span class="number">1</span>, j)] + a[getid(i, j - <span class="number">1</span>)] - a[getid(i - <span class="number">1</span>, j - <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            <span class="keyword">int</span> ans = a[getid(x2, y2)] - a[getid(x1 - <span class="number">1</span>, y2)] - a[getid(x2, y1 - <span class="number">1</span>)] + a[getid(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>)];</span><br><span class="line">            <span class="keyword">if</span> (ans == (x2 - x1 + <span class="number">1</span>) * (y2 - y1 + <span class="number">1</span>))</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Monitor&quot;&gt;&lt;a href=&quot;#Monitor&quot; class=&quot;headerlink&quot; title=&quot;Monitor&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Monitor&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-6514&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/categories/ACM/Thinking/"/>
    
      <category term="前缀和" scheme="http://yoursite.com/categories/ACM/Thinking/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/tags/Thinking/"/>
    
      <category term="前缀和" scheme="http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>bitset HDU6515 Coding Problem</title>
    <link href="http://yoursite.com/2019/09/18/ACM/STL/bitset%20HDU6515%20Coding%20Problem/"/>
    <id>http://yoursite.com/2019/09/18/ACM/STL/bitset HDU6515 Coding Problem/</id>
    <published>2019-09-17T16:00:00.000Z</published>
    <updated>2019-09-18T12:25:02.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Coding-Problem"><a href="#Coding-Problem" class="headerlink" title="Coding Problem"></a><h1><center>Coding Problem</center></h1></h2><h2 id="HDU-6515"><a href="#HDU-6515" class="headerlink" title="[ HDU - 6515 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6515" target="_blank" rel="noopener">[ HDU - 6515 ]</a></p>  </h2><p>题目大意：给你一个字符串，每个字母的ASCII二级制颠倒过来组成一个01数组。<br>然后这个数组每六位组成一个数字的ASCII输出</p><p>一道模拟题，使用C++中的bitset类型会简单的很多</p><p>那么正好来学习一下bitset的用法：</p><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><p>此处参考了这份博客：<a href="https://www.cnblogs.com/magisk/p/8809922.html" target="_blank" rel="noopener">https://www.cnblogs.com/magisk/p/8809922.html</a></p><p>bitset大概就是一个二进制数组，每个位置只占1bit，想一下状压dp？</p><p>bitset的原理大概是将很多数压成一个，从而节省空间和时间（暴力出奇迹）</p><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>构造时可以直接指定大小，也可以使用string和字符串数组来进行构造<br>需要注意的是，在使用字符串构造时，字符串中只能包含01，否则会抛出异常</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;4&gt; bitset1;　　<span class="comment">//无参构造，长度为４，默认每一位为０</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt; bitset2(<span class="number">12</span>);　　<span class="comment">//长度为８，二进制保存，前面用０补充</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"100101"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt; bitset3(s);　　<span class="comment">//长度为10，前面用０补充</span></span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"10101"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;13&gt; bitset4(s2);　　<span class="comment">//长度为13，前面用０补充</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset1 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0000</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset2 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//00001100</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset3 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0000100101</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset4 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0000000010101</span></span><br></pre></td></tr></table></figure><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>它支持所有的位运算操作：<code>^</code> <code>&amp;</code> <code>|</code> <code>&gt;&gt;</code> 等</p><h4 id="bitset的函数"><a href="#bitset的函数" class="headerlink" title="bitset的函数"></a>bitset的函数</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bit</span>.<span class="built_in">size</span>()       返回大小（位数）</span><br><span class="line"><span class="built_in">bit</span>.count()     返回<span class="number">1</span>的个数</span><br><span class="line"><span class="built_in">bit</span>.any()       返回是否有<span class="number">1</span></span><br><span class="line"><span class="built_in">bit</span>.none()      返回是否没有<span class="number">1</span></span><br><span class="line"><span class="built_in">bit</span>.set()       全都变成<span class="number">1</span></span><br><span class="line"><span class="built_in">bit</span>.set(p)      将第p + <span class="number">1</span>位变成<span class="number">1</span>（bitset是从第<span class="number">0</span>位开始的！）</span><br><span class="line"><span class="built_in">bit</span>.set(p, x)   将第p + <span class="number">1</span>位变成x</span><br><span class="line"><span class="built_in">bit</span>.reset()     全都变成<span class="number">0</span></span><br><span class="line"><span class="built_in">bit</span>.reset(p)    将第p + <span class="number">1</span>位变成<span class="number">0</span></span><br><span class="line"><span class="built_in">bit</span>.flip()      全都取反</span><br><span class="line"><span class="built_in">bit</span>.flip(p)     将第p + <span class="number">1</span>位取反</span><br><span class="line"><span class="built_in">bit</span>.to_ulong()  返回它转换为<span class="keyword">unsigned</span> <span class="keyword">long</span>的结果，如果超出范围则报错</span><br><span class="line"><span class="built_in">bit</span>.to_ullong() 返回它转换为<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>的结果，如果超出范围则报错</span><br><span class="line"><span class="built_in">bit</span>.to_string() 返回它转换为<span class="keyword">string</span>的结果</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>需要注意的坑点是这道题不能有换行符，行尾有空格</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;8&gt; b((<span class="keyword">int</span>)c);</span><br><span class="line">    <span class="built_in">stringstream</span> str;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    str &lt;&lt; b;</span><br><span class="line">    str &gt;&gt; s;</span><br><span class="line">    reverse(s.begin(), s.end());</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i+= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">string</span> ts = change(s[i]) + change(s[i + <span class="number">1</span>]) + change(s[i + <span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ts.size(); j+= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">bitset</span>&lt;6&gt; B(ts, j, <span class="number">6</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Coding-Problem&quot;&gt;&lt;a href=&quot;#Coding-Problem&quot; class=&quot;headerlink&quot; title=&quot;Coding Problem&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Coding Problem&lt;/center&gt;&lt;/h1&gt;&lt;/h2
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="STL" scheme="http://yoursite.com/categories/ACM/STL/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 POJ2482 Stars in Your Windows</title>
    <link href="http://yoursite.com/2019/08/06/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20POJ2482%20Stars%20in%20Your%20Windows/"/>
    <id>http://yoursite.com/2019/08/06/ACM/Data Structure/Segment Tree/线段树+扫描线 POJ2482 Stars in Your Windows/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-09-19T12:51:57.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stars-in-Your-Windows"><a href="#Stars-in-Your-Windows" class="headerlink" title="Stars in Your Windows"></a><h1><center>Stars in Your Windows</center></h1></h2><h2 id="POJ-2482"><a href="#POJ-2482" class="headerlink" title="[ POJ - 2482 ]  "></a><p align="right"><a href="http://poj.org/problem?id=2482" target="_blank" rel="noopener">[ POJ - 2482 ]</a></p>  </h2><p>题目大意：给出n个星星的坐标，每个星星有一个亮度，给出一个矩形的长和宽，问矩形能包括的星星的最大亮度和</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL lx,rx,y,s;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(LL a,LL b,LL c,LL d):lx(a),rx(b),y(c),s(d)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;S)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y==S.y)</span><br><span class="line">        <span class="keyword">return</span> s&gt;S.s;</span><br><span class="line">        <span class="keyword">return</span> y&lt;S.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;te[N];</span><br><span class="line"><span class="keyword">int</span> sum[N&lt;&lt;<span class="number">2</span>],cov[N&lt;&lt;<span class="number">2</span>],que[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin</span><span class="params">(LL x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,e = n,m;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;=e)</span><br><span class="line">    &#123;</span><br><span class="line">        m = (s+e)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(que[m]==x)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(que[m]&gt;x)</span><br><span class="line">        e = m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        s = m+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cov[w])</span><br><span class="line">    &#123;</span><br><span class="line">        cov[w&lt;&lt;<span class="number">1</span>] += cov[w];</span><br><span class="line">        cov[w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += cov[w];</span><br><span class="line">        sum[w&lt;&lt;<span class="number">1</span>] += cov[w];</span><br><span class="line">        sum[w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += cov[w];</span><br><span class="line">        cov[w] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[w] = max(sum[w&lt;&lt;<span class="number">1</span>],sum[w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> d,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=l&amp;&amp;b&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[w]+=d;</span><br><span class="line">        cov[w]+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(w);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=m)</span><br><span class="line">    update(a,b,d,l,m,w&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(b&gt;m)</span><br><span class="line">    update(a,b,d,m+<span class="number">1</span>,r,w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k,n;</span><br><span class="line">    LL w,h,x,y,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w&gt;&gt;h)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        w--;h--;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v;</span><br><span class="line">            que[num] = x;</span><br><span class="line">            te[num++] = node(x,x+w,y,v);</span><br><span class="line">            que[num] = x+w;</span><br><span class="line">            te[num++] = node(x,x+w,y+h,-v);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(que,que+num);</span><br><span class="line">        sort(te,te+num);</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt; num ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(que[i]!=que[i<span class="number">-1</span>])</span><br><span class="line">            que[k++] = que[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; num ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = bin(te[i].lx,k<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">int</span> r = bin(te[i].rx,k<span class="number">-1</span>);</span><br><span class="line">            update(l,r,te[i].s,<span class="number">0</span>,k<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            maxz = max(maxz,sum[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxz &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Stars-in-Your-Windows&quot;&gt;&lt;a href=&quot;#Stars-in-Your-Windows&quot; class=&quot;headerlink&quot; title=&quot;Stars in Your Windows&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Stars in Yo
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU1542 覆盖的面积</title>
    <link href="http://yoursite.com/2019/08/04/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU1255%20%E8%A6%86%E7%9B%96%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/08/04/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU1255 覆盖的面积/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-19T12:47:07.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="覆盖的面积"><a href="#覆盖的面积" class="headerlink" title="覆盖的面积"></a><h1><center>覆盖的面积</center></h1></h2><h2 id="HDU-1255"><a href="#HDU-1255" class="headerlink" title="[ HDU - 1255 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1255" target="_blank" rel="noopener">[ HDU - 1255 ]</a></p>  </h2><p>题目大意：给你n个矩形的左下角坐标和右上角坐标，求矩形相交至少覆盖两次以上的面积。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dif_x[maxn]; <span class="comment">//记录不同的x坐标</span></span><br><span class="line"><span class="keyword">int</span> n, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x1, x2, y;</span><br><span class="line">    <span class="keyword">int</span> flag; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> h, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        x1 = l, x2 = r, y = h, flag = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;line[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, cnt;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">    <span class="keyword">double</span> len2;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[id].l = l;</span><br><span class="line">    tree[id].r = r;</span><br><span class="line">    tree[id].cnt = <span class="number">0</span>;</span><br><span class="line">    tree[id].len = <span class="number">0</span>;</span><br><span class="line">    tree[id].len2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[id].cnt) <span class="comment">//如果该段被覆盖那么就直接由dif_x数组获得长度</span></span><br><span class="line">        tree[id].len = dif_x[tree[id].r + <span class="number">1</span>] - dif_x[tree[id].l]; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tree[id].l == tree[id].r)</span><br><span class="line">        tree[id].len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>              <span class="comment">//如果没有被覆盖，那么应该是由左右孩子的和</span></span><br><span class="line">        tree[id].len = tree[id &lt;&lt; <span class="number">1</span>].len + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (tree[id].cnt &gt;= <span class="number">2</span>)</span><br><span class="line">        tree[id].len2 = dif_x[tree[id].r + <span class="number">1</span>] - dif_x[tree[id].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tree[id].l == tree[id].r)</span><br><span class="line">        tree[id].len2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tree[id].cnt == <span class="number">1</span>)</span><br><span class="line">        tree[id].len2 = tree[id &lt;&lt; <span class="number">1</span>].len + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tree[id].len2 = tree[id &lt;&lt; <span class="number">1</span>].len2 + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[id].l == l &amp;&amp; tree[id].r == r) &#123;</span><br><span class="line">        tree[id].cnt += v;</span><br><span class="line">        getlen(id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    getlen(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> line_num = <span class="number">0</span>; <span class="comment">//一共有多少条横线</span></span><br><span class="line">        <span class="keyword">double</span> x1, y11, x2, y2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;x1, &amp;y11, &amp;x2, &amp;y2);</span><br><span class="line">            line[line_num].init(x1, x2, y11, <span class="number">1</span>);</span><br><span class="line">            dif_x[line_num++] = x1;</span><br><span class="line">            line[line_num].init(x1, x2, y2, <span class="number">-1</span>);</span><br><span class="line">            dif_x[line_num++] = x2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(line, line + line_num);</span><br><span class="line">        sort(dif_x, dif_x + line_num);  <span class="comment">//对dif_x去重，要先排个序，这样更方便</span></span><br><span class="line">        <span class="keyword">int</span> dif_x_num = unique(dif_x, dif_x + line_num) - dif_x; <span class="comment">//dif_x_num表示去重后不同的x坐标的数量</span></span><br><span class="line">        build_tree(<span class="number">1</span>, <span class="number">0</span>, dif_x_num - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0.00</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line_num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ll = lower_bound(dif_x, dif_x + dif_x_num, line[i].x1) - dif_x;</span><br><span class="line">            <span class="keyword">int</span> rr = lower_bound(dif_x, dif_x + dif_x_num, line[i].x2) - dif_x - <span class="number">1</span>;</span><br><span class="line">            update(<span class="number">1</span>, ll, rr, line[i].flag);</span><br><span class="line">            ans += tree[<span class="number">1</span>].len2 * (line[i + <span class="number">1</span>].y - line[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans + <span class="number">0.000001</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;覆盖的面积&quot;&gt;&lt;a href=&quot;#覆盖的面积&quot; class=&quot;headerlink&quot; title=&quot;覆盖的面积&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;覆盖的面积&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-1255&quot;&gt;&lt;a href=&quot;#HDU-125
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU3642 Get The Treasury</title>
    <link href="http://yoursite.com/2019/08/04/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU3642%20Get%20The%20Treasury/"/>
    <id>http://yoursite.com/2019/08/04/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU3642 Get The Treasury/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-19T12:49:44.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Get-The-Treasury"><a href="#Get-The-Treasury" class="headerlink" title="Get The Treasury"></a><h1><center>Get The Treasury</center></h1></h2><h2 id="HDU-3642"><a href="#HDU-3642" class="headerlink" title="[ HDU - 3642 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3642" target="_blank" rel="noopener">[ HDU - 3642 ]</a></p>  </h2><p>题目大意：给你n个立方体的左下角坐标和右上角坐标，求立方体相交至少相交的面积。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>将Z轴离散化，把面积当作二维的底和高</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lf,rf;<span class="comment">//实际的左右端点</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> once,twice,more;</span><br><span class="line">&#125;segTree[MAXN*<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> y[MAXN];</span><br><span class="line"><span class="keyword">int</span> z[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y1,y2;</span><br><span class="line">    <span class="keyword">int</span> z1,z2;<span class="comment">//这两个是枚举的时候判断使用的</span></span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">&#125;line[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Line a,Line b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    segTree[i].l=l;</span><br><span class="line">    segTree[i].r=r;</span><br><span class="line">    segTree[i].lf=y[l];</span><br><span class="line">    segTree[i].rf=y[r];</span><br><span class="line">    segTree[i].c=<span class="number">0</span>;</span><br><span class="line">    segTree[i].once=segTree[i].twice=segTree[i].more=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r==l+<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    Build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    Build((i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(segTree[i].c&gt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        segTree[i].more=segTree[i].rf-segTree[i].lf;</span><br><span class="line">        segTree[i].once=segTree[i].twice=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(segTree[i].c==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(segTree[i].l+<span class="number">1</span>==segTree[i].r)<span class="comment">//叶子结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            segTree[i].more=<span class="number">0</span>;</span><br><span class="line">            segTree[i].twice=segTree[i].rf-segTree[i].lf;</span><br><span class="line">            segTree[i].once=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        segTree[i].more=segTree[i&lt;&lt;<span class="number">1</span>].once+segTree[i&lt;&lt;<span class="number">1</span>].twice+segTree[i&lt;&lt;<span class="number">1</span>].more</span><br><span class="line">                       +segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].once+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].twice+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].more;</span><br><span class="line">        segTree[i].twice=segTree[i].rf-segTree[i].lf-segTree[i].more;</span><br><span class="line">        segTree[i].once=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(segTree[i].c==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(segTree[i].l+<span class="number">1</span>==segTree[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            segTree[i].more=<span class="number">0</span>;</span><br><span class="line">            segTree[i].twice=<span class="number">0</span>;</span><br><span class="line">            segTree[i].once=segTree[i].rf-segTree[i].lf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        segTree[i].more=segTree[i&lt;&lt;<span class="number">1</span>].more+segTree[i&lt;&lt;<span class="number">1</span>].twice</span><br><span class="line">                    +segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].more+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].twice;</span><br><span class="line">        segTree[i].twice=segTree[i&lt;&lt;<span class="number">1</span>].once+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].once;</span><br><span class="line">        segTree[i].once=segTree[i].rf-segTree[i].lf-segTree[i].more-segTree[i].twice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(segTree[i].l+<span class="number">1</span>==segTree[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            segTree[i].more=segTree[i].once=segTree[i].twice=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        segTree[i].more=segTree[i&lt;&lt;<span class="number">1</span>].more+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].more;</span><br><span class="line">        segTree[i].twice=segTree[i&lt;&lt;<span class="number">1</span>].twice+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].twice;</span><br><span class="line">        segTree[i].once=segTree[i&lt;&lt;<span class="number">1</span>].once+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].once;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,Line e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(segTree[i].lf&gt;=e.y1 &amp;&amp; segTree[i].rf&lt;=e.y2)</span><br><span class="line">    &#123;</span><br><span class="line">        segTree[i].c+=e.f;</span><br><span class="line">        push_up(i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(e.y2&lt;=segTree[i&lt;&lt;<span class="number">1</span>].rf) update(i&lt;&lt;<span class="number">1</span>,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.y1&gt;=segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].lf) update((i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,e);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Line temp=e;</span><br><span class="line">        temp.y2=segTree[i&lt;&lt;<span class="number">1</span>].rf;</span><br><span class="line">        update(i&lt;&lt;<span class="number">1</span>,temp);</span><br><span class="line">        temp=e;</span><br><span class="line">        temp.y1=segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].lf;</span><br><span class="line">        update((i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    push_up(i);</span><br><span class="line">&#125;</span><br><span class="line">Line temp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> x1,y1,z1,x2,y2,z2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">int</span> iCase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        iCase++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;z1, &amp;x2, &amp;y2, &amp;z2);</span><br><span class="line">            line[t].x=x1;</span><br><span class="line">            line[t].y1=y1;</span><br><span class="line">            line[t].y2=y2;</span><br><span class="line">            line[t].z1=z1;</span><br><span class="line">            line[t].z2=z2;</span><br><span class="line">            line[t].f=<span class="number">1</span>;</span><br><span class="line">            y[t]=y1;</span><br><span class="line">            z[t++]=z1;</span><br><span class="line"></span><br><span class="line">            line[t].x=x2;</span><br><span class="line">            line[t].y1=y1;</span><br><span class="line">            line[t].y2=y2;</span><br><span class="line">            line[t].z1=z1;</span><br><span class="line">            line[t].z2=z2;</span><br><span class="line">            line[t].f=<span class="number">-1</span>;</span><br><span class="line">            y[t]=y2;</span><br><span class="line">            z[t++]=z2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line,line+t,cmp);</span><br><span class="line">        sort(y,y+t);</span><br><span class="line">        <span class="keyword">int</span> t1=unique(y,y+t)-y;</span><br><span class="line">        Build(<span class="number">1</span>,<span class="number">0</span>,t1<span class="number">-1</span>);</span><br><span class="line">        sort(z,z+t);</span><br><span class="line">        <span class="keyword">int</span> t2=unique(z,z+t)-z;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> area=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t2<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t;j++)</span><br><span class="line">              <span class="keyword">if</span>(line[j].z1&lt;=z[i]&amp;&amp;line[j].z2&gt;z[i])</span><br><span class="line">                 temp[m++]=line[j];</span><br><span class="line">            area=<span class="number">0</span>;</span><br><span class="line">            update(<span class="number">1</span>,temp[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                area+=(<span class="keyword">long</span> <span class="keyword">long</span>)segTree[<span class="number">1</span>].more*(temp[j].x-temp[j<span class="number">-1</span>].x);</span><br><span class="line">                update(<span class="number">1</span>,temp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=area*(z[i+<span class="number">1</span>]-z[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %I64d\n"</span>,iCase,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Get-The-Treasury&quot;&gt;&lt;a href=&quot;#Get-The-Treasury&quot; class=&quot;headerlink&quot; title=&quot;Get The Treasury&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Get The Treasury&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU1542 Picture</title>
    <link href="http://yoursite.com/2019/08/04/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU1828%20Picture/"/>
    <id>http://yoursite.com/2019/08/04/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU1828 Picture/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-19T12:46:44.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a><h1><center>Picture</center></h1></h2><h2 id="HDU-1828"><a href="#HDU-1828" class="headerlink" title="[ HDU - 1828 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542" target="_blank" rel="noopener">[ HDU - 1828 ]</a></p>  </h2><p>题目大意：给你n个矩形的左下角坐标和右上角坐标，求外周长。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>扫描线 + 离散化板子</p><p>将横竖两次扫描简化</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">80010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">1</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        d = d * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w * d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, cnt;</span><br><span class="line">    <span class="keyword">int</span> lc, rc;</span><br><span class="line">    <span class="keyword">int</span> len, num;</span><br><span class="line">&#125; tree[maxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1, x2, y, flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> h, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        x1 = l, x2 = r, y = h, flag = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) &#123;</span><br><span class="line">        <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; line[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, x1, y11, x2, y2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[id].l = l;</span><br><span class="line">    tree[id].r = r;</span><br><span class="line">    tree[id].cnt = <span class="number">0</span>;</span><br><span class="line">    tree[id].len = <span class="number">0</span>;</span><br><span class="line">    tree[id].lc = <span class="number">0</span>;</span><br><span class="line">    tree[id].rc = <span class="number">0</span>;</span><br><span class="line">    tree[id].num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[i].cnt) &#123;</span><br><span class="line">        tree[i].len = tree[i].r - tree[i].l + <span class="number">1</span>;</span><br><span class="line">        tree[i].lc = tree[i].rc = <span class="number">1</span>;</span><br><span class="line">        tree[i].num = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tree[i].l == tree[i].r) &#123;</span><br><span class="line">        tree[i].len = <span class="number">0</span>;</span><br><span class="line">        tree[i].lc = tree[i].rc = <span class="number">0</span>;</span><br><span class="line">        tree[i].num = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tree[i].len = tree[i &lt;&lt; <span class="number">1</span>].len + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">        tree[i].lc = tree[i &lt;&lt; <span class="number">1</span>].lc;</span><br><span class="line">        tree[i].rc = tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rc;</span><br><span class="line">        tree[i].num = tree[i &lt;&lt; <span class="number">1</span>].num + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].num - (tree[i &lt;&lt; <span class="number">1</span>].rc &amp; tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[id].l == l &amp;&amp; tree[id].r == r) &#123;</span><br><span class="line">        tree[id].cnt += v;</span><br><span class="line">        getlen(id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    getlen(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">int</span> minn = INF, maxx = -INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            x1 = read(), y11 = read(), x2 = read(), y2 = read();</span><br><span class="line">            maxx = max(maxx, max(x1, x2));</span><br><span class="line">            minn = min(minn, min(x1, x2));</span><br><span class="line">            line[i].init(x1, x2, y11, <span class="number">1</span>);</span><br><span class="line">            line[i + n].init(x1, x2, y2, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line, line + <span class="number">2</span> * n);</span><br><span class="line"></span><br><span class="line">        build_tree(<span class="number">1</span>, minn, maxx - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">            update(<span class="number">1</span>, line[i].x1, line[i].x2 - <span class="number">1</span>, line[i].flag);</span><br><span class="line">            ans += <span class="built_in">abs</span>(tree[<span class="number">1</span>].len - last);</span><br><span class="line">            ans += (line[i + <span class="number">1</span>].y - line[i].y) * tree[<span class="number">1</span>].num * <span class="number">2</span>;</span><br><span class="line">            last = tree[<span class="number">1</span>].len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Picture&quot;&gt;&lt;a href=&quot;#Picture&quot; class=&quot;headerlink&quot; title=&quot;Picture&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Picture&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-1828&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU1542 Atlantis</title>
    <link href="http://yoursite.com/2019/08/02/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU1542%20Atlantis/"/>
    <id>http://yoursite.com/2019/08/02/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU1542 Atlantis/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2019-09-19T12:41:56.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Atlantis"><a href="#Atlantis" class="headerlink" title="Atlantis"></a><h1><center>Atlantis</center></h1></h2><h2 id="HDU-1542"><a href="#HDU-1542" class="headerlink" title="[ HDU - 1542 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542" target="_blank" rel="noopener">[ HDU - 1542 ]</a></p>  </h2><p>题目大意：给你n个矩形的左下角坐标和右上角坐标，求矩形相交的面积。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>扫描线 + 离散化板子</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dif_x[<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x1,x2,y;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> h, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        x1 = l; x2 = r; y = h; flag = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;line[<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, cnt;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">&#125;tree[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[id].l = l;</span><br><span class="line">    tree[id].r = r;</span><br><span class="line">    tree[id].cnt = <span class="number">0</span>;</span><br><span class="line">    tree[id].len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build_tree((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[id].cnt &gt;= <span class="number">1</span>) </span><br><span class="line">        tree[id].len = dif_x[tree[id].r+<span class="number">1</span>] - dif_x[tree[id].l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tree[id].len = tree[id&lt;&lt;<span class="number">1</span>].len + tree[(id&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[id].l==l &amp;&amp; tree[id].r==r) &#123;</span><br><span class="line">        tree[id].cnt += v;</span><br><span class="line">        getlen(id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>,l,r,v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)</span><br><span class="line">        update((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">        update((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    getlen(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySearch</span><span class="params">(<span class="keyword">double</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(dif_x[mid] == p)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(dif_x[mid] &lt; p)</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, noc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        noc++;</span><br><span class="line">        <span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="keyword">int</span> line_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            line[line_num].init(x1, x2, y1, <span class="number">1</span>);</span><br><span class="line">            dif_x[line_num++] = x1;</span><br><span class="line">            line[line_num].init(x1, x2, y2, <span class="number">-1</span>);</span><br><span class="line">            dif_x[line_num++] = x2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line, line + line_num, cmp);</span><br><span class="line">        sort(dif_x, dif_x + line_num);</span><br><span class="line">        <span class="keyword">int</span> dif_x_num = unique(dif_x, dif_x + line_num) - dif_x;</span><br><span class="line">        build_tree(<span class="number">1</span>, <span class="number">0</span>, dif_x_num - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line_num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> line_l = mySearch(line[i].x1, <span class="number">0</span>, dif_x_num - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> line_r = mySearch(line[i].x2, <span class="number">0</span>, dif_x_num<span class="number">-1</span>) - <span class="number">1</span>;</span><br><span class="line">            update(<span class="number">1</span>, line_l, line_r, line[i].flag);</span><br><span class="line">            ans += tree[<span class="number">1</span>].len * (line[i+<span class="number">1</span>].y - line[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, noc);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2lf\n\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Atlantis&quot;&gt;&lt;a href=&quot;#Atlantis&quot; class=&quot;headerlink&quot; title=&quot;Atlantis&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Atlantis&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-1542&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>树状数组 POJ2155 Matrix</title>
    <link href="http://yoursite.com/2019/07/25/ACM/Data%20Structure/Binary%20Indexed%20Tree/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20POJ2155%20Matrix/"/>
    <id>http://yoursite.com/2019/07/25/ACM/Data Structure/Binary Indexed Tree/树状数组 POJ2155 Matrix/</id>
    <published>2019-07-24T16:00:00.000Z</published>
    <updated>2019-09-19T13:07:54.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a><h1><center>Matrix</center></h1></h2><h2 id="POJ-2155"><a href="#POJ-2155" class="headerlink" title="[ POJ - 2155 ]  "></a><p align="right"><a href="http://poj.org/problem?id=2155" target="_blank" rel="noopener">[ POJ - 2155 ]</a></p>  </h2><p>题目大意：对一个n∗n的矩阵：<br>1.格式C x1 y1 x2 y2，表示将左上角为(x1,y1)，右下角为(x2,y2)的矩阵全部取反，即0变1，1变0.<br>2.Q x y，表示查询位置(x,y)的值.<br>设询问次数为t，则10^3, 1 ≤ t ≤ 10^5, 数据组数 ≤ 10.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>树状数组模板题，此题建立完整的二维树状数组板子</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line">ll t, m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll x, ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))</span><br><span class="line">       <span class="keyword">for</span> (ll j = y; j &gt; <span class="number">0</span>; j -= lowbit(j))</span><br><span class="line">            res += a[i][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll y, ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line">        <span class="keyword">for</span> (ll j = y; j &lt;= n; j += lowbit(j))</span><br><span class="line">            a[i][j] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        ll x1, y1, x2, y2;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c %lld %lld"</span>, &amp;ch, &amp;x1, &amp;y1);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'Q'</span>) </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum(x1, y1) % <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'C'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x2, &amp;y2);</span><br><span class="line">                add(x1, y1, <span class="number">1</span>);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y1, <span class="number">1</span>);</span><br><span class="line">                add(x1, y2 + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Matrix&quot;&gt;&lt;a href=&quot;#Matrix&quot; class=&quot;headerlink&quot; title=&quot;Matrix&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Matrix&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;POJ-2155&quot;&gt;&lt;a href=&quot;#POJ
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>树状数组 POJ3468 A Simple Problem with Integers</title>
    <link href="http://yoursite.com/2019/07/25/ACM/Data%20Structure/Binary%20Indexed%20Tree/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20POJ3468%20A%20Simple%20Problem%20with%20Integers/"/>
    <id>http://yoursite.com/2019/07/25/ACM/Data Structure/Binary Indexed Tree/树状数组 POJ3468 A Simple Problem with Integers/</id>
    <published>2019-07-24T16:00:00.000Z</published>
    <updated>2019-09-19T13:03:10.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Simple-Problem-with-Integers"><a href="#A-Simple-Problem-with-Integers" class="headerlink" title="A Simple Problem with Integers"></a><h1><center>A Simple Problem with Integers</center></h1></h2><h2 id="POJ-3468"><a href="#POJ-3468" class="headerlink" title="[ POJ - 3468 ]  "></a><p align="right"><a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">[ POJ - 3468 ]</a></p>  </h2><p>题目大意：给一个长度为n的数列，有Q次操作Q代表查询区间 a b之间的累加和，操作C代表将a-b区间的所有数加上c</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>树状数组模板题，此题建立完整的一维树状数组板子</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n, m, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    ll a[<span class="number">500050</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (x; x &gt; <span class="number">0</span>; x -= lowbit(x))</span><br><span class="line">            a[x] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addinv</span><span class="params">(ll x, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ll i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line">            a[i] += x * v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Sum</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(x; x &lt;= n; x += lowbit(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Suminv</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (x; x &gt; <span class="number">0</span>; x -= lowbit(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;bit, bitinv;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x)</span><br><span class="line">        <span class="keyword">return</span> bit.Sum(x) * x + bitinv.Suminv(x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l, ll r, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bit.add(r, c);</span><br><span class="line">    bitinv.addinv(r, c);</span><br><span class="line">    <span class="keyword">if</span> (l &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        bit.add(l - <span class="number">1</span>, -c);</span><br><span class="line">        bitinv.addinv(l - <span class="number">1</span>, -c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</span><br><span class="line">        add(i, i, k);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ll l, r, c;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c %lld %lld"</span>, &amp;ch, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'Q'</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum(r) - sum(l - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'C'</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c);</span><br><span class="line">            add(l, r, c);</span><br><span class="line">        &#125;</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-Simple-Problem-with-Integers&quot;&gt;&lt;a href=&quot;#A-Simple-Problem-with-Integers&quot; class=&quot;headerlink&quot; title=&quot;A Simple Problem with Integers&quot;&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2019年牛客多校第1场 赛后总结</title>
    <link href="http://yoursite.com/2019/07/18/ACM/Competition%20Summary/2019%E5%B9%B4%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC1%E5%9C%BA%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/07/18/ACM/Competition Summary/2019年牛客多校第1场赛后总结/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2019-07-20T02:30:41.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019年牛客多校第1场-赛后总结"><a href="#2019年牛客多校第1场-赛后总结" class="headerlink" title="2019年牛客多校第1场 赛后总结"></a><center>2019年牛客多校第1场 赛后总结</center></h1><hr><h3 id="A题-：Equivalent-Prefixes"><a href="#A题-：Equivalent-Prefixes" class="headerlink" title="A题 ：Equivalent Prefixes"></a>A题 ：Equivalent Prefixes</h3><p>&emsp;题意：就是给你两个有n个不同数的串，然后保证1-p区间内任选一个区间，使得区间中最小值的下标相同，找到最大的p值</p><p>&emsp;思路：我的思路是设置两个单调栈，然后每次的第i个数判断大小，放到栈顶（比它大的数弹出栈），当两个栈容量不同时，即不成立。</p><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (s1.size())    s1.pop();</span><br><span class="line">        <span class="keyword">while</span> (s2.size())    s2.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        s1.push(a[<span class="number">1</span>]);</span><br><span class="line">        s2.push(b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (s1.size() &amp;&amp; s1.top() &gt; a[i])</span><br><span class="line">                s1.pop();</span><br><span class="line">            s1.push(a[i]);</span><br><span class="line">            <span class="keyword">while</span> (s2.size() &amp;&amp; s2.top() &gt; b[i])</span><br><span class="line">                s2.pop();</span><br><span class="line">            s2.push(b[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s1.size() != s2.size())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="B题：Integration"><a href="#B题：Integration" class="headerlink" title="B题：Integration"></a>B题：Integration</h3><p>&emsp;题意：已知$ \int_{0}^{∞} \frac{1}{1 + x_{2} } dx = \frac{\pi}{2}$，求$\frac{1}{\pi } \int_{0}^{∞} \frac{1}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}dx $</p><p>这道题强行唤醒我的数学…但最终以失败告终…看了好几个巨巨的博客……这里感谢这位大佬的博客：<a href="https://blog.nowcoder.net/n/01372c5f542b4169a39b9fd48c7427cb" target="_blank" rel="noopener">2019牛客网暑期多校第一场B题</a></p><p>$ \frac{1}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}\,=\,\frac{c_{1} }{a_{1}^{2} + x^{2} }\,+\,\frac{c_{2} }{a_{2}^{2} + x^{2} }\,+…+\frac{c_{n} }{a_{n}^{2} + x^{2} } \\ \, \\<br>\qquad\quad\quad\;\;\, = \frac{c_{1}\cdot \prod_{i\neq 1 }(a_{i}^{2} + x^{2}) + …+c_{i}\cdot \prod_{j\neq i }(a_{j}^{2} + x^{2}) + … + +c_{n}\cdot \prod_{i\neq n }(a_{i}^{2} + x^{2})}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}$</p><p>我们可以得到: $\sum_{i = 1}^{n}C_{i}\cdot \prod_{j\neq i}(a_{i}^{2} + x^{2})\,=\,1$</p><p>由数学归纳法，可得：$C_{i}\,=\,\frac{1}{\prod_{j\neq i}(a_{j}^{2}-a_{i}^{2})}$</p><p>又因为$\int_{0}^{∞} \frac{1}{1 + x_{2} } dx = \frac{\pi}{2}$</p><p>$ \frac{1}{\pi } \int_{0}^{∞} \frac{1}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}dx\,=\,\frac{1}{\pi }\sum_{i=1}^{n}\int_{0}^{∞}\frac{C_{i} }{a_{i}^{2}+x^{2} }dx $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\frac{1}{\pi }\sum_{i=1}^{n}C_{i}\int_{0}^{∞}\frac{1}{a_{i}^{2}+x^{2} }dx $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\frac{1}{\pi }\sum_{i=1}^{n}\frac{c_{i} }{a_{i} }\cdot \frac{\pi}{2} $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\sum_{i=1}^{n}\frac{c_{i} }{2a_{i} } $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\frac{1}{2}\sum_{i=1}^{n}\frac{1}{ {a_{i} }\cdot \prod_{j\neq i}(a_{j}^{2}-a_{i}^{2})} $</p><p>然后进行逆元，费马小定理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ll res = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                res *= (a[j] * a[j] % mod - a[i] * a[i] % mod);</span><br><span class="line">                res %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += qpow(<span class="number">2</span> * a[i] % mod * res % mod, mod - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans % mod + mod) % mod;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="E题：ABBA"><a href="#E题：ABBA" class="headerlink" title="E题：ABBA"></a>E题：ABBA</h3><p>&emsp;题意：有n个＂AB＂,m个＂BA＂，问能结合成多少个序列．这个要求是AB和BA的顺序不变，即A和B的相对位置不变，BA中可以穿插AB，反之亦然</p><p>那么我们采用dp，dp[i][j]表示放置i个A和j个B方案数<br>也就是说我们当前串也就是后面添加A还是添加B的情况  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">dp[i][j] += dp[i][j - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>&emsp;当i ≤ n时，A可以随便放；<br>&emsp;当j ≤ m时，B可以随便放；<br>&emsp;当i &gt; n，如果放A，AB的数量要小于等于n，i - j是至少有多少个AB, i - j ≤ n；<br>&emsp;当j &gt; m，如果放B，BA的数量要小于等于m，j - i是至少有多少个BA, j - i ≤ m;<br>即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i - j &lt;= n) d[i][j] += d[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(j - i &lt;= m) d[i][j] += d[i][j - <span class="number">1</span>]];</span><br></pre></td></tr></table></figure><p>最终代码如下(PS: 用于数据组过多，memset会卡T，跟缓冲区有关)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m + n; j++)</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m + n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - j &lt; n)</span><br><span class="line">                    dp[i + <span class="number">1</span>][j] = (dp[i][j] + dp[i + <span class="number">1</span>][j]) % mod;</span><br><span class="line">                <span class="keyword">if</span> (j - i &lt; m)</span><br><span class="line">                    dp[i][j + <span class="number">1</span>] = (dp[i][j] + dp[i][j + <span class="number">1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n + m][n + m]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="F题：Random-Point-in-Triangle"><a href="#F题：Random-Point-in-Triangle" class="headerlink" title="F题：Random Point in Triangle"></a>F题：Random Point in Triangle</h3><p>&emsp;题意：求三角形内部一个点连三个顶点形成的最大三角形面积的期望，再乘一个36</p><p>&emsp;答案是 11/2 倍三角形 ABC 的面积</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, y;</span><br><span class="line">&#125;a, b, c;</span><br><span class="line"></span><br><span class="line">point AB, BC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a.x &gt;&gt; a.y &gt;&gt; b.x &gt;&gt; b.y &gt;&gt; c.x &gt;&gt; c.y) &#123;</span><br><span class="line">        AB.x = b.x - a.x;</span><br><span class="line">        AB.y = b.y - a.y;</span><br><span class="line">        BC.x = c.x - b.x;</span><br><span class="line">        BC.y = c.y - b.y;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">abs</span>((AB.x * BC.y - AB.y * BC.x)) * <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="J题-：Fraction-Comparision"><a href="#J题-：Fraction-Comparision" class="headerlink" title="J题 ：Fraction Comparision"></a>J题 ：Fraction Comparision</h3><p>&emsp;题意：判断x/a和y/b的大小，其中1 ≤ x, y ≤ 10<sup>18</sup>， 1 ≤ a, b ≤ 10<sup>9</sup></p><p>签到题，这道题我们直接用的大整数写的，判断<code>x * b</code>和<code>y * a</code>，没什么好说的</p><p>其实出题人是想考察数学方面知识的，官方题解是这样的：</p><ol><li>先把 $\frac{x}{a}$ 写成 $[\frac{x}{a}] + \frac{x\,mod\,a}{a}$</li><li>先比整数部分，分数部分分子分母都在 10<sup>9</sup> 范围内，交叉相乘比较</li></ol><p>于是乎，上一下官方题解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">uint64_t</span>&gt; fcompare(<span class="keyword">uint64_t</span> x, <span class="keyword">uint32_t</span> a, <span class="keyword">uint64_t</span> y, <span class="keyword">uint32_t</span> b) &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> p = x / a; <span class="comment">// p &lt;= (x / a) &lt; p + 1</span></span><br><span class="line">    <span class="keyword">uint64_t</span> q = y / b; <span class="comment">// q &lt;= (y / b) &lt; q + 1</span></span><br><span class="line">    <span class="keyword">if</span> (p != q) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;p, q&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    x %= a;</span><br><span class="line">    y %= b;</span><br><span class="line">    <span class="keyword">return</span> &#123;x * b, y * a&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> x, y;</span><br><span class="line">    <span class="keyword">uint32_t</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; a &gt;&gt; y &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">auto</span> result = fcompare(x, a, y, b);</span><br><span class="line">    <span class="keyword">if</span> (result.first == result.second)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result.first &lt; result.second)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"&lt;"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019年牛客多校第1场-赛后总结&quot;&gt;&lt;a href=&quot;#2019年牛客多校第1场-赛后总结&quot; class=&quot;headerlink&quot; title=&quot;2019年牛客多校第1场 赛后总结&quot;&gt;&lt;/a&gt;&lt;center&gt;2019年牛客多校第1场 赛后总结&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="多校训练" scheme="http://yoursite.com/categories/ACM/%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="多校训练" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>树形DP入门</title>
    <link href="http://yoursite.com/2019/07/17/ACM/DP/Tree%20DP/%E6%A0%91%E5%BD%A2DP%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/07/17/ACM/DP/Tree DP/树形DP入门/</id>
    <published>2019-07-16T16:00:00.000Z</published>
    <updated>2019-09-23T10:59:10.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a><h1><center>树形DP</center></h1></h2><h2><center>没有上司的舞会</center></h2><p align="right"><a href="https://vjudge.net/problem/POJ-2342" target="_blank" rel="noopener">[POJ - 2342]</a></p>  某大学有N个职员，编号为1~N。他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数Ri，但是呢，如果某个职员的上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。<h4><b>Input</b></h4>第一行一个整数N。(1<=n<=6000) 0 接下来n行，第i+1行表示i号职员的快乐指数ri。(-128<="Ri<=127)" 接下来n行分别代表每个结点的权值范围从-128到127 接下来n-1行，每行输入一对整数l,k。表示k是l的直接上司。, 最后一行输入0 <h4><b>Output</b>对于每组测试数据，输出一个整数Ans，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。<h4><b>Sample Input</b></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">36 </span><span class="number">9</span> <span class="number">80</span> <span class="number">69</span> <span class="number">85</span></span><br></pre></td></tr></table></figure><h4><b>Sample Output</b></h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure>---<h2>题解</h2><p>这道题我们需要存储当前位置i开始往前m个位置的状态</p><p>在递推式<code>dp[i][j] = max(dp[i - 1][j &gt;&gt; 1], dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>中<br><code>dp[i - 1][j &gt;&gt; 1]</code>、<code>dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>为再往前一个节点为0或者1的状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1050</span>];</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">            sum++;</span><br><span class="line">        j &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum(j) &gt; q)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]) + w[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++)</span><br><span class="line">        sum = max(sum, dp[n][i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></=n<=6000)>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;树形DP&quot;&gt;&lt;a href=&quot;#树形DP&quot; class=&quot;headerlink&quot; title=&quot;树形DP&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;树形DP&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2&gt;&lt;center&gt;没有上司的舞会&lt;/center&gt;&lt;/h2&gt;
&lt;p al
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树形DP" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树形DP" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>状压DP &amp;nbsp;Hiho-1044 &amp;nbsp;状态压缩</title>
    <link href="http://yoursite.com/2019/07/13/ACM/DP/State%20Compression%20DP/%E7%8A%B6%E5%8E%8BDP%20Hiho-1044%20%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/2019/07/13/ACM/DP/State Compression DP/状压DP Hiho-1044 状态压缩/</id>
    <published>2019-07-12T16:00:00.000Z</published>
    <updated>2019-09-23T10:59:12.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a><h1><center>状态压缩</center></h1></h2><p align="right"><a href="https://vjudge.net/problem/HihoCoder-1044" target="_blank" rel="noopener">[HihoCoder - 1044]</a></p>  <p>小Hi和小Ho在兑换到了喜欢的奖品之后，便继续起了他们的美国之行，思来想去，他们决定乘坐火车前往下一座城市——那座城市即将举行美食节！</p><p>但是不幸的是，小Hi和小Ho并没有能够买到很好的火车票——他们只能够乘坐最为破旧的火车进行他们的旅程。</p><p>不仅如此，因为美食节的吸引，许多人纷纷踏上了和小Hi小Ho一样的旅程，于是有相当多的人遭遇到了和小Hi小Ho一样的情况——这导致这辆车上的人非常非常的多，以至于都没有足够的位置能让每一个人都有地方坐下来。</p><p>小Hi和小Ho本着礼让他们的心情——当然还因为本来他们买的就是站票，老老实实的呆在两节车厢的结合处。他们本以为就能够这样安稳抵达目的地，但事与愿违，他们这节车厢的乘务员是一个强迫症，每隔一小会总是要清扫一次卫生，而时值深夜，大家都早已入睡，这种行为总是会惊醒一些人。而一旦相邻的一些乘客被惊醒了大多数的话，就会同乘务员吵起来，弄得大家都睡不好。</p><p>将这一切看在眼里的小Hi与小Ho决定利用他们的算法知识，来帮助这个有着强迫症的乘务员——在不与乘客吵起来的前提下尽可能多的清扫垃圾。</p><p>小Hi和小Ho所处的车厢可以被抽象成连成一列的N个位置，按顺序分别编号为1..N，每个位置上都有且仅有一名乘客在休息。同时每个位置上都有一些垃圾需要被清理，其中第i个位置的垃圾数量为Wi。乘务员可以选择其中一些位置进行清理，但是值得注意的是，一旦有编号连续的M个位置中有超过Q个的位置都在这一次清理中被选中的话（即这M个位置上的乘客有至少Q+1个被惊醒了），就会发生令人不愉快的口角。而小Hi和小Ho的任务是，计算选择哪些位置进行清理，在不发生口角的情况下，清扫尽可能多的垃圾。</p><h4><b>Input</b></h4><p>每个测试点（输入文件）有且仅有一组测试数据。</p><p>每组测试数据的第一行为三个正整数N、M和Q，意义如前文所述。</p><p>每组测试数据的第二行为N个整数，分别为W1到WN，代表每一个位置上的垃圾数目。</p><p>对于100%的数据，满足N&lt;=1000, 2&lt;=M&lt;=10,1&lt;=Q&lt;=M, Wi&lt;=100</p><h4><b>Output</b></h4><p>对于每组测试数据，输出一个整数Ans，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。</p><h4><b>Sample Input</b></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">36 </span><span class="number">9</span> <span class="number">80</span> <span class="number">69</span> <span class="number">85</span></span><br></pre></td></tr></table></figure><h4><b>Sample Output</b></h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure><hr><h2>题解</h2><p>这道题我们需要存储当前位置i开始往前m个位置的状态</p><p>在递推式<code>dp[i][j] = max(dp[i - 1][j &gt;&gt; 1], dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>中<br><code>dp[i - 1][j &gt;&gt; 1]</code>、<code>dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>为再往前一个节点为0或者1的状态</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1050</span>];</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">            sum++;</span><br><span class="line">        j &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum(j) &gt; q)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]) + w[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++)</span><br><span class="line">        sum = max(sum, dp[n][i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;状态压缩&quot;&gt;&lt;a href=&quot;#状态压缩&quot; class=&quot;headerlink&quot; title=&quot;状态压缩&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;状态压缩&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://vjudg
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压DP" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压DP" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象程序设计</title>
    <link href="http://yoursite.com/2019/05/16/Python/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/05/16/Python/Python面向对象程序设计/</id>
    <published>2019-05-15T16:00:00.000Z</published>
    <updated>2019-05-23T03:14:37.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python面向对象程序设计"><a href="#Python面向对象程序设计" class="headerlink" title="Python面向对象程序设计"></a><center>Python面向对象程序设计</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><p>■ Python完全采用了面向对象程序设计的思想，是真正面向对象的高级动态编程语言，完全支持面向对象的基本功能，如封装、继承、多态以及对基类方法的覆盖或重写。</p><p>■ Python中对象的概念很广泛，<b>Python中的一切内容都可以称为对象</b>，除了数字、字符串、列表、元组、字典、集合、range对象、zip对象等等，函数也是对象，类也是对象。</p><p>■ 创建类时用<b>变量形式表示的对象属性称为数据成员或成员属性</b>，用<b>函数形式表示的对象行为称为成员方法</b>，成员属性和成员方法统称为类的成员。</p><hr><h2 id="6-1-类的定义与使用"><a href="#6-1-类的定义与使用" class="headerlink" title="6.1 类的定义与使用"></a>6.1 类的定义与使用</h2><h3 id="6-1-1-类定义语法"><a href="#6-1-1-类定义语法" class="headerlink" title="6.1.1 类定义语法"></a>6.1.1 类定义语法</h3><p>Python使用class关键字来定义类，class关键字之后是一个空格，然后是类的名字，再然后是一个冒号，最后换行并定义类的内部实现。</p><p>定义了类之后，可以用来实例化对象，并通过“对象名.成员”的方式来访问其中的数据成员或成员方法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">infor</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This is a Car"</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; car = Car()</span><br><span class="line">&gt;&gt; car.infor()</span><br><span class="line">This <span class="keyword">is</span> a Car</span><br></pre></td></tr></table></figure><p>Python提供了一个关键字“pass”，类似于空语句，可以用在类和函数的定义中或者选择结构中。当暂时没有确定如何实现功能，或者为以后的软件升级预留空间，或者其他类型功能时，可以使用该关键字来“占位”。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python面向对象程序设计&quot;&gt;&lt;a href=&quot;#Python面向对象程序设计&quot; class=&quot;headerlink&quot; title=&quot;Python面向对象程序设计&quot;&gt;&lt;/a&gt;&lt;center&gt;Python面向对象程序设计&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/Python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数设计与使用</title>
    <link href="http://yoursite.com/2019/05/15/Python/Python%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/15/Python/Python函数设计与使用/</id>
    <published>2019-05-14T16:00:00.000Z</published>
    <updated>2019-05-16T04:16:33.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python函数设计与使用"><a href="#Python函数设计与使用" class="headerlink" title="Python函数设计与使用"></a><center>Python函数设计与使用</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><h2 id="5-1-函数定义与调用"><a href="#5-1-函数定义与调用" class="headerlink" title="5.1 函数定义与调用"></a>5.1 函数定义与调用</h2><p>&emsp;■ 将可能需要反复执行的代码封装为函数，并在需要该功能的地方进行调用，不仅可以实现代码复用，更重要的是可以保证代码的一致性，只需要修改该函数代码则所有调用均受到影响。<br>&emsp;■ 设计函数时，应注意提高模块的内聚性，同时降低模块之间的隐式耦合。<br>&emsp;■ 在实际项目开发中，往往会把一些通用的函数封装到一个模块中，并把这个通用模块文件放到顶层文件夹中，这样更方便管理。</p><p>在Python中，定义函数的语法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">([参数列表])</span>:</span></span><br><span class="line">   <span class="string">'''注释'''</span></span><br><span class="line">   函数体</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>函数形参不需要声明类型，也不需要指定函数返回值类型</li><li>即使该函数不需要接受任何参数，也需要保留圆括号</li><li>括号后面的冒号不可少</li><li>需要有缩进</li><li>Python允许嵌套定义函数</li></ol><p>例如：求斐波那契中小于参数n的所有值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="string">'''accept an integer n.</span></span><br><span class="line"><span class="string">      return ……'''</span></span><br><span class="line">   a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span> a &lt; n:</span><br><span class="line">      print(a, end=<span class="string">' '</span>)</span><br><span class="line">      a, b = b, a + b</span><br><span class="line">   print()</span><br></pre></td></tr></table></figure><p><b>递归调用：</b>函数的递归调用是函数调用的一种特殊情况，函数调用自己，自己再调用自己，自己再调用自己，…，当某个条件得到满足的时候就不再调用了，然后再一层一层地返回直到该函数的第一次调用。</p><p>例：普通递归求斐波那契数列的第n项值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> (n &lt;= <span class="number">1</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">7</span>)</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-2-形参与实参"><a href="#5-2-形参与实参" class="headerlink" title="5.2 形参与实参"></a>5.2 形参与实参</h2><p>&emsp;&emsp;函数定义时括弧内为形参，一个函数可以没有形参，但是括弧必须要有，表示该函数不接受参数。<br>&emsp;&emsp;函数调用时向其传递实参，将实参的值或引用传递给形参。<br>&emsp;&emsp;在定义函数时，对参数个数并没有限制，如果有多个形参，需要使用逗号进行分割。   </p><p><b>对于绝大多数情况下，在函数内部直接修改形参的值不会影响实参。</b></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addone</span><span class="params">(a)</span>:</span></span><br><span class="line">   print(a, end = <span class="string">' '</span>)</span><br><span class="line">   a += <span class="number">1</span></span><br><span class="line">   print(a, end = <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">addone(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>运行结果为: <code>3 4 3</code></p><p><b>但在有些情况下，可以通过特殊的方式在函数内部修改实参的值.</b></p><p>&emsp;&emsp;即如果传递给函数的是可变序列，并且在函数内部使用下标或可变序列自身的方法增加、删除元素或修改元素时，修改后的结果是可以反映到函数之外的，实参也得到相应的修改。</p><ol><li>修改列表元素值</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(v)</span>:</span></span><br><span class="line">   v[<span class="number">0</span>] = v[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">a = [<span class="number">2</span>]</span><br><span class="line">modify(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol><li>为列表增加元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(v, item)</span>:</span></span><br><span class="line">   v.append(item)</span><br><span class="line">a = [<span class="number">2</span>]</span><br><span class="line">modify(a, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol><li>修改字典元素值或为字典增加元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(d)</span>:</span></span><br><span class="line">   d[<span class="string">'age'</span>] = <span class="number">38</span></span><br><span class="line">a = &#123;<span class="string">'name'</span>:<span class="string">'Dong'</span>, <span class="string">'age'</span>:<span class="number">37</span>, <span class="string">'sex'</span>:<span class="string">'Male'</span>&#125;</span><br><span class="line">modify(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'age'</span>: <span class="number">38</span>, <span class="string">'sex'</span>: <span class="string">'Male'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-参数类型"><a href="#5-3-参数类型" class="headerlink" title="5.3 参数类型"></a>5.3 参数类型</h2><p>在Python中，函数参数有很多种：可以为普通参数、默认值参数、关键参数、可变长度参数等等。</p><p>Python在定义函数时不需要指定形参的类型，完全由调用者传递的实参类型以及Python解释器的理解和推断来决定，类似于重载和泛型。</p><p>Python函数定义时也不需要指定函数的类型，这将由函数中的return语句来决定，如果没有return语句或者return没有得到执行，则认为返回空值None。</p><ol><li>Python支持对函数参数和返回值类型的标注，但实际上并不起任何作用，只是看起来方便。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(x:int, y:int)</span> -&gt; int:</span></span><br><span class="line">   <span class="string">'''x and y must be integers, return an integer x+y'''</span></span><br><span class="line">   <span class="keyword">assert</span> isinstance(x, int), <span class="string">'x must be integer'</span></span><br><span class="line">   <span class="keyword">assert</span> isinstance(y, int), <span class="string">'y must be integer'</span></span><br><span class="line">   z = x + y</span><br><span class="line">   <span class="keyword">assert</span> isinstance(z, int), <span class="string">'must return an integer'</span></span><br><span class="line">   <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">2</span>, <span class="number">3.0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(test(<span class="number">2</span>, <span class="number">3.0</span>))</span><br><span class="line">  File <span class="string">"D:1.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> test</span><br><span class="line">    <span class="keyword">assert</span> isinstance(y, int), <span class="string">'y must be integer'</span></span><br><span class="line">AssertionError: y must be integer</span><br></pre></td></tr></table></figure><ol><li>位置参数是比较常用的形式，调用函数时实参和形参的顺序必须严格一致，并且实参和形参的数量必须相同。</li></ol><h3 id="5-3-1-默认值参数"><a href="#5-3-1-默认值参数" class="headerlink" title="5.3.1 默认值参数"></a>5.3.1 默认值参数</h3><ol><li><p>默认值参数必须出现在函数参数列表的最右端，且任何一个默认值参数右边不能有非默认值参数。</p></li><li><p>调用带有默认值参数的函数时，可以不对默认值参数进行赋值，也可以赋值</p></li></ol><h2 id="5-4-return语句"><a href="#5-4-return语句" class="headerlink" title="5.4 return语句"></a>5.4 return语句</h2><h2 id="5-5-变量作用域"><a href="#5-5-变量作用域" class="headerlink" title="5.5 变量作用域"></a>5.5 变量作用域</h2><h2 id="5-6-lambda表达式"><a href="#5-6-lambda表达式" class="headerlink" title="5.6 lambda表达式"></a>5.6 lambda表达式</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python函数设计与使用&quot;&gt;&lt;a href=&quot;#Python函数设计与使用&quot; class=&quot;headerlink&quot; title=&quot;Python函数设计与使用&quot;&gt;&lt;/a&gt;&lt;center&gt;Python函数设计与使用&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="函数" scheme="http://yoursite.com/categories/Python/%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串与正则表达式</title>
    <link href="http://yoursite.com/2019/05/14/Python/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/05/14/Python/Python字符串与正则表达式/</id>
    <published>2019-05-13T16:00:00.000Z</published>
    <updated>2019-06-01T13:49:34.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python字符串与正则表达式"><a href="#Python字符串与正则表达式" class="headerlink" title="Python字符串与正则表达式"></a><center>Python字符串与正则表达式</center></h1><hr><p>&emsp;&emsp;UTF-8对全世界所有国家需要用到的字符进行了编码，以1个字节表示英语字符(兼容ASCII)，以3个字节表示中文，还有些语言的符号使用2个字节（例如俄语和希腊语符号）或4个字节。<br>&emsp;&emsp;GB2312是我国制定的中文编码，使用1个字节表示英语，2个字节表示中文；GBK是GB2312的扩充，而CP936是微软在GBK基础上开发的编码方式。GB2312、GBK和CP936都是使用2个字节表示中文。</p><p>&emsp;&emsp;不同编码格式之间相差很大，采用不同的编码格式意味着不同的表示和存储形式，把同一字符存入文件时，写入的内容可能会不同，在试图理解其内容时必须了解编码规则并进行正确的解码。如果解码方法不正确就无法还原信息，从这个角度来讲，字符串编码也具有加密的效果。</p><p>&emsp;&emsp;Python 3.x完全支持中文字符，默认使用UTF8编码格式，无论是一个数字、英文字母，还是一个汉字，都按一个字符对待和处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'中国山东烟台'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'中国山东烟台ABCDE'</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"></span><br><span class="line">姓名 = <span class="string">'张三'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(姓名)</span><br><span class="line">张三</span><br></pre></td></tr></table></figure><h2 id="4-1-字符串"><a href="#4-1-字符串" class="headerlink" title="4.1 字符串"></a>4.1 字符串</h2><p>&emsp;&emsp;在Python中，字符串属于不可变序列类型，除了支持序列通用方法（包括分片操作）以外，还支持特有的字符串操作方法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">teststring = <span class="string">'good'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(teststring)</span><br><span class="line"><span class="number">3056036964032</span></span><br><span class="line"></span><br><span class="line">teststring[<span class="number">0</span>] = <span class="string">'w'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    teststring[<span class="number">0</span>] = <span class="string">'w'</span></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line">teststring = <span class="string">'well'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(teststring)</span><br><span class="line"><span class="number">3056036964200</span></span><br></pre></td></tr></table></figure><p>Python字符串驻留机制：对于短字符串，将其赋值给多个不同的对象时，内存中只有一个副本，多个对象共享该副本。长字符串不遵守驻留机制。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'1234'</span></span><br><span class="line">b = <span class="string">'1234'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a) == id(b)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'1234'</span> * <span class="number">50</span></span><br><span class="line">b = <span class="string">'1234'</span> * <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a) == id(b)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="4-1-1-字符串的格式化"><a href="#4-1-1-字符串的格式化" class="headerlink" title="4.1.1 字符串的格式化"></a>4.1.1 字符串的格式化</h3><p>‘%&emsp;[-]&emsp;[+]&emsp;[0]&emsp;[m]&emsp;[.n]&emsp;格式字符&emsp;’%&emsp;x<br>1 &emsp; 2 &emsp; 3 &emsp; 4 &emsp; 5 &emsp; 6 &emsp;&emsp;&emsp;7&emsp;&emsp;&emsp; 8 &emsp; 9</p><ol><li>格式标志，表示格式开始</li><li>指定左对齐输出</li><li>对正数加正号</li><li>指定空位填0</li><li>指定最小宽度</li><li>指定精度</li><li>指定类型</li><li>格式运算符</li><li>待转换的表达式</li></ol><div class="table-container"><table><thead><tr><th>格式字符</th><th>说明</th><th>格式字符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>字符串 (采用str()的显示)</td><td>%x</td><td>十六进制整数</td></tr><tr><td>%r</td><td>字符串 (采用repr()的显示)</td><td>%e</td><td>指数 (基底写为e)</td></tr><tr><td>%c</td><td>单个字符</td><td>%E</td><td>指数 (基底写为E)</td></tr><tr><td>%b</td><td>二进制整数</td><td>%f、%F</td><td>浮点数</td></tr><tr><td>%d</td><td>十进制整数</td><td>%g</td><td>指数(e)或浮点数 (根据显示长度)</td></tr><tr><td>%i</td><td>十进制整数</td><td>%G</td><td>指数(E)或浮点数 (根据显示长度)</td></tr><tr><td>%o</td><td>八进制整数</td><td>%%</td><td>字符”%”</td></tr></tbody></table></div><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1235</span></span><br><span class="line">so=<span class="string">"%o"</span> % x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>so</span><br><span class="line"><span class="string">"2323"</span></span><br><span class="line"></span><br><span class="line">sh = <span class="string">"%x"</span> % x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sh</span><br><span class="line"><span class="string">"4d3"</span></span><br><span class="line"></span><br><span class="line">se = <span class="string">"%e"</span> % x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>se</span><br><span class="line"><span class="string">"1.235000e+03"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">"3"</span>)+<span class="number">1</span>)</span><br><span class="line"><span class="string">"4"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%s"</span> % <span class="number">65</span></span><br><span class="line"><span class="string">"65"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%s"</span> % <span class="number">65333</span></span><br><span class="line"><span class="string">"65333"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%d"</span> % <span class="string">"555"</span></span><br><span class="line">TypeError: %d format: a number <span class="keyword">is</span> required, <span class="keyword">not</span> str</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'555'</span>)</span><br><span class="line"><span class="number">555</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%s'</span> % [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">'[1, 2, 3]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="string">'(1, 2, 3)'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%d, %c'</span> % (<span class="number">65</span>, <span class="number">65</span>)</span><br><span class="line"><span class="string">'65, A'</span></span><br></pre></td></tr></table></figure><p>另外，也可使用format方法进行格式化<br>其中，格式化字符串的函数为 str.format()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The number &#123;0:,&#125; in hex is: &#123;0:#x&#125;, the number &#123;1&#125; in oct is &#123;1:#o&#125;"</span>.format(<span class="number">5555</span>,<span class="number">55</span>))</span><br><span class="line">The number <span class="number">5</span>,<span class="number">555</span> <span class="keyword">in</span> hex <span class="keyword">is</span>: <span class="number">0x15b3</span>, the number <span class="number">55</span> <span class="keyword">in</span> oct <span class="keyword">is</span> <span class="number">0o67</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The number &#123;1:,&#125; in hex is: &#123;1:#x&#125;, the number &#123;0&#125; in oct is &#123;0:#o&#125;"</span>.format(<span class="number">5555</span>,<span class="number">55</span>))</span><br><span class="line">The number <span class="number">55</span> <span class="keyword">in</span> hex <span class="keyword">is</span>: <span class="number">0x37</span>, the number <span class="number">5555</span> <span class="keyword">in</span> oct <span class="keyword">is</span> <span class="number">0o12663</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"my name is &#123;name&#125;, my age is &#123;age&#125;, and my QQ is &#123;qq&#125;"</span>.format(name = <span class="string">"mfdy"</span>,age = <span class="number">65524</span>,qq = <span class="string">"123456789"</span>))</span><br><span class="line">my name <span class="keyword">is</span> mfdy, my age <span class="keyword">is</span> <span class="number">65524</span>, <span class="keyword">and</span> my QQ <span class="keyword">is</span> <span class="number">123456789</span></span><br><span class="line"></span><br><span class="line">position = (<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"X:&#123;0[0]&#125;;Y:&#123;0[1]&#125;;Z:&#123;0[2]&#125;"</span>.format(position))</span><br><span class="line">X:<span class="number">5</span>;Y:<span class="number">8</span>;Z:<span class="number">13</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">weather = [(<span class="string">"Monday"</span>,<span class="string">"rain"</span>),(<span class="string">"Tuesday"</span>,<span class="string">"sunny"</span>),(<span class="string">"Wednesday"</span>, <span class="string">"sunny"</span>),(<span class="string">"Thursday"</span>,<span class="string">"rain"</span>),(<span class="string">"Friday"</span>,<span class="string">"Cloudy"</span>)]</span><br><span class="line">formatter = <span class="string">"Weather of '&#123;0[0]&#125;' is '&#123;0[1]&#125;'"</span>.format</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> map(formatter,weather):</span><br><span class="line">   print(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> weather:</span><br><span class="line">   print(formatter(item))</span><br><span class="line"></span><br><span class="line">Weather of <span class="string">'Monday'</span> <span class="keyword">is</span> <span class="string">'rain'</span></span><br><span class="line">Weather of <span class="string">'Tuesday'</span> <span class="keyword">is</span> <span class="string">'sunny'</span></span><br><span class="line">Weather of <span class="string">'Wednesday'</span> <span class="keyword">is</span> <span class="string">'sunny'</span></span><br><span class="line">Weather of <span class="string">'Thursday'</span> <span class="keyword">is</span> <span class="string">'rain'</span></span><br><span class="line">Weather of <span class="string">'Friday'</span> <span class="keyword">is</span> <span class="string">'Cloudy'</span></span><br><span class="line">Weather of <span class="string">'Monday'</span> <span class="keyword">is</span> <span class="string">'rain'</span></span><br><span class="line">Weather of <span class="string">'Tuesday'</span> <span class="keyword">is</span> <span class="string">'sunny'</span></span><br><span class="line">Weather of <span class="string">'Wednesday'</span> <span class="keyword">is</span> <span class="string">'sunny'</span></span><br><span class="line">Weather of <span class="string">'Thursday'</span> <span class="keyword">is</span> <span class="string">'rain'</span></span><br><span class="line">Weather of <span class="string">'Friday'</span> <span class="keyword">is</span> <span class="string">'Cloudy'</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-字符串常用方法"><a href="#4-1-2-字符串常用方法" class="headerlink" title="4.1.2 字符串常用方法"></a>4.1.2 字符串常用方法</h3><p><i>find( )、rfind()、index()、rindex()、count()</i></p><ol><li>find()和rfind方法分别用来查找一个字符串在另一个字符串指定范围（默认是整个字符串）中首次和最后一次出现的位置，如果不存在则返回-1。</li></ol><p>&emsp;&emsp;find()和rifnd() 一个从左往右，一个从右往左</p><p>函数原型：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.find(str, beg=<span class="number">0</span>, end=len(string))</span><br></pre></td></tr></table></figure><p>str — 指定检索的字符串<br>beg — 开始索引，默认为0。<br>end — 结束索引，默认为字符串的长度。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"apple,peach,banana,peach,pear"</span></span><br><span class="line"><span class="comment"># 返回首次出现的位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">"peach"</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="comment"># 从指定位置开始查找</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">"peach"</span>, <span class="number">7</span>)</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="comment"># 在指定范围中查找</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find(<span class="string">"peach"</span>, <span class="number">7</span>, <span class="number">20</span>)</span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rfind(<span class="string">'p'</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><ol><li>index()和rindex()方法用来返回一个字符串在另一个字符串指定范围中首次和最后一次出现的位置，如果不存在则抛出异常。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.index(<span class="string">'p'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.index(<span class="string">'pe'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.index(<span class="string">'pear'</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.index(<span class="string">'ppp'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s.index(<span class="string">'ppp'</span>)</span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><ol><li>count()方法用来返回一个字符串在另一个字符串中出现的次数。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'p'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'pp'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'ppp'</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><i>split()、rsplit()、partition()、rpartition()</i></p><ol><li>split()和rsplit()方法分别用来以指定字符为分隔符，将字符串左端和右端开始将其分割成多个字符串，并返回包含分割结果的列表。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(str=<span class="string">""</span>, num=string.count(str))</span><br></pre></td></tr></table></figure><p>&emsp;str — 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。<br>&emsp;num — 分割次数。默认为 -1, 即分隔所有。</p><p>split()和rsplit()方法，如果不指定分隔符，则字符串中的任何空白符号（包括空格、换行符、制表符等等）都将被认为是分隔符，返回包含最终分割结果的列表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'hello world \n\n My name is Dong   '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br><span class="line"></span><br><span class="line">s = <span class="string">'\n\nhello world \n\n\n My name is Dong   '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br><span class="line"></span><br><span class="line">s = <span class="string">'\n\nhello\t\t world \n\n\n My name\t is Dong   '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br></pre></td></tr></table></figure><p>split()和rsplit()方法还允许指定最大分割次数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'\n\nhello\t\t world \n\n\n My name is Dong   '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(<span class="keyword">None</span>, <span class="number">1</span>)</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world \n\n\n My name is Dong   '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rsplit(<span class="keyword">None</span>, <span class="number">1</span>)</span><br><span class="line">[<span class="string">'\n\nhello\t\t world \n\n\n My name is'</span>, <span class="string">'Dong'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(<span class="keyword">None</span>, <span class="number">2</span>)</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My name is Dong   '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rsplit(<span class="keyword">None</span>, <span class="number">2</span>)</span><br><span class="line">[<span class="string">'\n\nhello\t\t world \n\n\n My name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(maxsplit = <span class="number">6</span>)</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.split(maxsplit = <span class="number">100</span>)</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'My'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'Dong'</span>]</span><br></pre></td></tr></table></figure><p>调用split()方法并且不传递任何参数时，将使用任何空白字符作为分隔符，把连续多个空白字符看作一个；明确传递参数指定split()使用的分隔符时，情况略有不同。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个逗号都被作为独立的分隔符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a,,,bb,,ccc'</span>.split(<span class="string">','</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'bb'</span>, <span class="string">''</span>, <span class="string">'ccc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个制表符都被作为独立的分隔符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a\t\t\tbb\t\tccc'</span>.split(<span class="string">'\t'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'bb'</span>, <span class="string">''</span>, <span class="string">'ccc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续多个制表符被作为一个分隔符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a\t\t\tbb\t\tccc'</span>.split()</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'bb'</span>, <span class="string">'ccc'</span>]</span><br></pre></td></tr></table></figure><ol><li>partition()和rpartition()用来以指定字符串为分隔符将原字符串分割为3部分，即分隔符前的字符串、分隔符字符串、分隔符后的字符串，如果指定的分隔符不在原字符串中，则返回原字符串和两个空字符串。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"apple,peach,banana,pear"</span></span><br><span class="line"><span class="comment"># 从左侧使用逗号进行切分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.partition(<span class="string">','</span>)</span><br><span class="line">(<span class="string">'apple'</span>, <span class="string">','</span>, <span class="string">'peach,banana,pear'</span>)</span><br><span class="line"><span class="comment"># 从右侧使用逗号进行切分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rpartition(<span class="string">','</span>)</span><br><span class="line">(<span class="string">'apple,peach,banana'</span>, <span class="string">','</span>, <span class="string">'pear'</span>)</span><br><span class="line"><span class="comment"># 使用字符串作为分隔符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rpartition(<span class="string">'banana'</span>)</span><br><span class="line">(<span class="string">'apple,peach,'</span>, <span class="string">'banana'</span>, <span class="string">',pear'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abababab'</span>.partition(<span class="string">'a'</span>)</span><br><span class="line">(<span class="string">''</span>, <span class="string">'a'</span>, <span class="string">'bababab'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abababab'</span>.rpartition(<span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'ababab'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><ol><li>字符串连接join()</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">"apple"</span>, <span class="string">"peach"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>]</span><br><span class="line">sep = <span class="string">","</span></span><br><span class="line">s = sep.join(li)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">"apple,peach,banana,pear"</span></span><br></pre></td></tr></table></figure><ol><li>lower()、upper()、capitalize()、title()、swapcase()</li></ol><p>将字符串传华为小写、大写字符串、将字符串首字母变成大写、将每个单词的首字母变为大写以及大小写互换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"What is Your Name?"</span></span><br><span class="line"><span class="comment"># 返回小写字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lower()</span><br><span class="line"><span class="string">'what is your name?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回大写字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.upper()</span><br><span class="line"><span class="string">'WHAT IS YOUR NAME?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串首字符大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</span><br><span class="line"><span class="string">'What is your name?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个单词的首字母大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.title()</span><br><span class="line"><span class="string">'What Is Your Name?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写互换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.swapcase()</span><br><span class="line"><span class="string">'wHAT IS yOUR nAME?'</span></span><br></pre></td></tr></table></figure><ol><li>replace()，类似于“查找与替换”功能</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"123,123"</span></span><br><span class="line">s2 = s.replace(<span class="string">"123"</span>, <span class="string">"456"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2</span><br><span class="line"><span class="number">456</span>,<span class="number">456</span></span><br></pre></td></tr></table></figure><p>例：测试用户输入中是否有敏感词，如果有就把敏感词替换为3个星号<em>*</em>。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">words = (<span class="string">'测试'</span>, <span class="string">'非法'</span>, <span class="string">'暴力'</span>, <span class="string">'话'</span>)</span><br><span class="line">text = <span class="string">'这句话里含有非法内容'</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">   <span class="keyword">if</span> word <span class="keyword">in</span> text:</span><br><span class="line">      text = text.replace(word, <span class="string">'***'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">'这句***里含有***内容'</span></span><br></pre></td></tr></table></figure><ol><li>maketrans()、translate()</li></ol><p>字符串对象的maketrans()方法用来生成字符映射表，而translate()方法用来根据映射表中定义的对应关系转换字符串并替换其中的字符，使用这两个方法的组合可以同时处理多个不同的字符，replace()方法则无法满足这一要求。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建映射表，将字符"abcdef123"一一对应地转换为"uvwxyz@#$"</span></span><br><span class="line">table = <span class="string">''</span>.maketrans(<span class="string">'abcdef123'</span>, <span class="string">'uvwxyz@#$'</span>)</span><br><span class="line">s = <span class="string">"Python is a greate programming language. I like it!"</span></span><br><span class="line"><span class="comment"># 按映射表进行替换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.translate(table)</span><br><span class="line"><span class="string">'Python is u gryuty progrumming lunguugy. I liky it!'</span></span><br></pre></td></tr></table></figure><ol><li>strip()、rstrip()、lstrip()</li></ol><p>分别用来删除两端、右端或者左端的空白字符或连续的指定字符</p><p>&emsp;&emsp;删除空白字符<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">" abc  "</span></span><br><span class="line">s2 = s.strip()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2</span><br><span class="line"><span class="string">"abc"</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;删除空白字符<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\n\nhello world   \n\n'</span>.strip()</span><br><span class="line"><span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;删除指定字符<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aaaassddf"</span>.strip(<span class="string">"a"</span>)</span><br><span class="line"><span class="string">"ssddf"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aaaassddf"</span>.strip(<span class="string">"af"</span>)</span><br><span class="line"><span class="string">"ssdd"</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;删除字符串右端指定字符<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aaaassddfaaa"</span>.rstrip(<span class="string">"a"</span>)</span><br><span class="line"><span class="string">'aaaassddf'</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;删除字符串左端指定字符<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"aaaassddfaaa"</span>.lstrip(<span class="string">"a"</span>)</span><br><span class="line"><span class="string">'ssddfaaa'</span></span><br></pre></td></tr></table></figure></p><p>要注意的是，这三个函数的参数指定的字符串并不作为一个整体对待，而是在原字符串的两侧、右侧、左侧删除参数字符串中包含的所有字符，一层一层地从外往里扒</p><ol><li>eval()：把任意字符串传化为Python表达式并求值</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"3+4"</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'a+b'</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'help(math.sqrt)'</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function sqrt <span class="keyword">in</span> module math:</span><br><span class="line">sqrt(x, /)</span><br><span class="line">   Return the square root of x.</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'math.sqrt(3)'</span>)</span><br><span class="line"><span class="number">1.7320508075688772</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">'aa'</span>)</span><br><span class="line">NameError: name <span class="string">'aa'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>但也需要注意的是，eval函数十分的危险</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开记事本</span></span><br><span class="line">a = <span class="string">"__import__('os').startfile(r'C:\Windows\notepad.exe')"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(a)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(<span class="string">"__import__('os').system('md testtest')"</span>)</span><br></pre></td></tr></table></figure><ol><li>关键词in</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试一个字符中是否存在于另一个字符串中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"a"</span> <span class="keyword">in</span> <span class="string">"abcde"</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ab'</span> <span class="keyword">in</span> <span class="string">'abcde'</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字in左边的字符串作为一个整体对待</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ac'</span> <span class="keyword">in</span> <span class="string">'abcde'</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"j"</span> <span class="keyword">in</span> <span class="string">"abcde"</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ol><li>startswith()、endswith()，判断字符串是否以指定字符串开始或结束</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.startswith(str, beg=<span class="number">0</span>, end=len(string))</span><br><span class="line">str.endswith(str, beg=<span class="number">0</span>, end=len(string))</span><br></pre></td></tr></table></figure><p>&emsp;str — 检测的字符串。<br>&emsp;strbeg — 可选参数用于设置字符串检测的起始位置。<br>&emsp;strend — 可选参数用于设置字符串检测的结束位置。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Beautiful is better than ugly.'</span></span><br><span class="line"><span class="comment"># 检测整个字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">'Be'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># 指定检测范围起始位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">'Be'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="comment"># 指定检测范围起始和结束位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">'Be'</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[filename <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">r'c:\\'</span>) <span class="keyword">if</span> filename.endswith((<span class="string">'.bmp'</span>,<span class="string">'.jpg'</span>,<span class="string">'.gif'</span>))]</span><br></pre></td></tr></table></figure><ol><li>center()、ljust()、rjust()，返回指定宽度的新字符串，原字符串居中、左对齐或右对齐出现在新字符串中，如果指定宽度大于字符串长度，则使用指定的字符（默认为空格）进行填充。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello world!'</span>.center(<span class="number">20</span>)        <span class="comment">#居中对齐，以空格进行填充</span></span><br><span class="line"><span class="string">'    Hello world!    '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello world!'</span>.center(<span class="number">20</span>, <span class="string">'='</span>)   <span class="comment">#居中对齐，以字符=进行填充</span></span><br><span class="line"><span class="string">'====Hello world!===='</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello world!'</span>.ljust(<span class="number">20</span>, <span class="string">'='</span>)    <span class="comment">#左对齐</span></span><br><span class="line"><span class="string">'Hello world!========'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello world!'</span>.rjust(<span class="number">20</span>, <span class="string">'='</span>)    <span class="comment">#右对齐</span></span><br><span class="line"><span class="string">'========Hello world!'</span></span><br></pre></td></tr></table></figure><ol><li>zfill()返回指定宽度的字符串，在左侧以字符0进行填充。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在左侧填充数字字符0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'00abc'</span></span><br><span class="line"><span class="comment"># 指定宽度小于字符串长度时，返回字符串本身</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.zfill(<span class="number">2</span>)</span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'uio'</span>.zfill(<span class="number">20</span>)</span><br><span class="line"><span class="string">'00000000000000000uio'</span></span><br></pre></td></tr></table></figure><ol><li>isalnum()、isalpha()、isdigit()、isdecimal()、isnumeric()、isspace()、isupper()、islower()，用来测试字符串是否为数字或字母、是否为字母、是否为数字字符、是否为空白字符、是否为大写字母以及是否为小写字母。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234abcd'</span>.isalnum()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234abcd'</span>.isalpha() <span class="comment">#全部为英文字母时返回True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234abcd'</span>.isdigit() <span class="comment">#全部为数字时返回True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abcd'</span>.isalpha()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234.0'</span>.isdigit()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'1234'</span>.isdigit()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'九'</span>.isnumeric() <span class="comment">#isnumeric()方法支持汉字数字</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'九'</span>.isdigit()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'九'</span>.isdecimal() <span class="comment">#检查字符串是否只包含十进制字符</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ⅣⅢⅩ'</span>.isdecimal()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ⅣⅢⅩ'</span>.isdigit()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ⅣⅢⅩ'</span>.isnumeric() <span class="comment">#支持罗马数字</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>■ 除了字符串对象提供的方法以外，很多Python内置函数也可以对字符串进行操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">'Hello world.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(x)                    <span class="comment">#字符串长度</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(x)                    <span class="comment">#最大字符</span></span><br><span class="line"><span class="string">'w'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(x)</span><br><span class="line"><span class="string">' '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(x,x))            <span class="comment">#zip()也可以作用于字符串</span></span><br><span class="line">[(<span class="string">'H'</span>, <span class="string">'H'</span>), (<span class="string">'e'</span>, <span class="string">'e'</span>), (<span class="string">'l'</span>, <span class="string">'l'</span>), (<span class="string">'l'</span>, <span class="string">'l'</span>), (<span class="string">'o'</span>, <span class="string">'o'</span>), (<span class="string">' '</span>, <span class="string">' '</span>), (<span class="string">'w'</span>, <span class="string">'w'</span>), (<span class="string">'o'</span>, <span class="string">'o'</span>), (<span class="string">'r'</span>, <span class="string">'r'</span>), (<span class="string">'l'</span>, <span class="string">'l'</span>), (<span class="string">'d'</span>, <span class="string">'d'</span>), (<span class="string">'.'</span>, <span class="string">'.'</span>)]</span><br></pre></td></tr></table></figure><p>■ 切片也适用于字符串，但仅限于读取其中的元素，不支持字符串修改。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Explicit is better than implicit.'</span>[:<span class="number">8</span>]</span><br><span class="line"><span class="string">'Explicit'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Explicit is better than implicit.'</span>[<span class="number">9</span>:<span class="number">23</span>]</span><br><span class="line"><span class="string">'is better than'</span></span><br></pre></td></tr></table></figure><p>■ Pytho标准库zlib中提供的compress()和decompress()函数可以用于数据的压缩和解压缩，在压缩字符串之前需要先编码为字节串。</p><h2 id="4-1-3-字符串常量"><a href="#4-1-3-字符串常量" class="headerlink" title="4.1.3 字符串常量"></a>4.1.3 字符串常量</h2><p>Python标准库string中定义数字字符、标点符号、英文字母、大写字母、小写字母等常量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits</span><br><span class="line"><span class="string">'0123456789'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_letters</span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase</span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure><p><br> <br></p><hr><p><b><i>未完待续……</i></b><i></i></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python字符串与正则表达式&quot;&gt;&lt;a href=&quot;#Python字符串与正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Python字符串与正则表达式&quot;&gt;&lt;/a&gt;&lt;center&gt;Python字符串与正则表达式&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="字符串 正则表达式" scheme="http://yoursite.com/categories/Python/%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python选择与循环</title>
    <link href="http://yoursite.com/2019/05/13/Python/Python%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/05/13/Python/Python选择与循环/</id>
    <published>2019-05-12T16:00:00.000Z</published>
    <updated>2019-05-28T14:22:51.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python选择与循环"><a href="#Python选择与循环" class="headerlink" title="Python选择与循环"></a><center>Python选择与循环</center></h1><h2 id="3-1-条件表达式"><a href="#3-1-条件表达式" class="headerlink" title="3.1 条件表达式"></a>3.1 条件表达式</h2><p>首先，说一下所有的运算符：  </p><ol><li>算术运算符：<code>+</code>、 <code>-</code>、 <code>*</code>、 <code>/</code>、 <code>//</code>、 <code>%</code>、 <code>**</code>  </li><li>关系运算符：<code>&gt;</code>、 <code>&lt;</code>、 <code>==</code>、 <code>&lt;=</code>、 <code>&gt;=</code>、 <code>!=</code>，可以连续使用，如  </li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt; <span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &lt; <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><ol><li>测试运算符：<code>in</code>、 <code>not in</code>、 <code>is</code>、 <code>is not</code>  </li><li>逻辑运算符：<code>and</code>、 <code>or</code>、 <code>not</code>，注意短路求值  </li><li>位运算符：<code>~</code>、 <code>&amp;</code>、 <code>|</code>、 <code>^</code>、 <code>&lt;&lt;</code>、 <code>&gt;&gt;</code>  </li><li>矩阵乘法运算符：<code>@</code>  </li></ol><p>在选择和循环结构中，条件表达式的值只要不是False、0（或0.0、0j等）、空值None、空列表、空元组、空集合、空字典、空字符串、空range对象或其他空迭代对象，Python解释器均认为与True等价。</p><p>从这个意义上来讲，几乎所有的Python合法表达式都可以作为条件表达式，包括含有函数调用的表达式。</p><p>例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> a:</span><br></pre></td></tr></table></figure><p>都是可执行的</p><p>其中需要注意的是，逻辑运算符<code>and</code>和<code>or</code>具有惰性求值的特点，即不管后面的正不正确，先执行前面的判断</p><h2 id="3-2-选择结构"><a href="#3-2-选择结构" class="headerlink" title="3.2 选择结构"></a>3.2 选择结构</h2><h3 id="3-2-1-单分支选择结构"><a href="#3-2-1-单分支选择结构" class="headerlink" title="3.2.1 单分支选择结构"></a>3.2.1 单分支选择结构</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">   语句块</span><br></pre></td></tr></table></figure><p>当表达式值为True或者其他等价值时，表示条件满足，语句块将被执行，否则不执行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = input(<span class="string">'Input two numbers:'</span>)</span><br><span class="line"><span class="comment"># split()返回分割后的字符串列表</span></span><br><span class="line">a, b = map(int, x.split())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">   <span class="comment"># 序列解包，交换两个变量的值</span></span><br><span class="line">   a, b = b, a</span><br><span class="line">print(a, b)</span><br></pre></td></tr></table></figure><p>关于split():</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(str=<span class="string">""</span>, num=string.count(str))</span><br></pre></td></tr></table></figure><p>参数</p><ol><li>str — 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num — 分割次数。默认为 -1, 即分隔所有。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"asdfg \nsarwar \nfegtsgr"</span></span><br><span class="line"><span class="comment"># 以空格为分隔符，包含\n</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split( ))</span><br><span class="line">[<span class="string">'asdfg'</span>, <span class="string">'sarwar'</span>, <span class="string">'fegtsgr'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以空格为分隔符，分割成两个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split(<span class="string">' '</span>, <span class="number">1</span>))</span><br><span class="line">[[<span class="string">'asdfg'</span>, <span class="string">'sarwar \nfegtsgr'</span>]]</span><br></pre></td></tr></table></figure><h3 id="3-2-2-双分支选择结构"><a href="#3-2-2-双分支选择结构" class="headerlink" title="3.2.2 双分支选择结构"></a>3.2.2 双分支选择结构</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">   语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">   print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(b)</span><br></pre></td></tr></table></figure><p>Python还支持如下形式的表达式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value1 <span class="keyword">if</span> condition <span class="keyword">else</span> value2</span><br></pre></td></tr></table></figure><p>即condition的值与True等价时，值为value1，否则值为value2。<br>在value1和value2中可以使用复杂表达式，包括函数调用和基本输出语句。<br>并且该表达式具有惰性求值的特点。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">6</span>) <span class="keyword">if</span> a &gt; <span class="number">3</span> <span class="keyword">else</span> print(<span class="number">5</span>)</span><br><span class="line">print(<span class="number">6</span> <span class="keyword">if</span> a &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x = math.sqrt(<span class="number">9</span>) <span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">3</span> <span class="keyword">else</span> random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">77</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-多结构分支"><a href="#3-2-3-多结构分支" class="headerlink" title="3.2.3 多结构分支"></a>3.2.3 多结构分支</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">   语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">   语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">   语句块<span class="number">3</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   语句块<span class="number">4</span></span><br></pre></td></tr></table></figure><p>其中，关键字<code>elif</code>是<code>else if</code>的缩写</p><h3 id="3-2-4-选择结构的嵌套"><a href="#3-2-4-选择结构的嵌套" class="headerlink" title="3.2.4 选择结构的嵌套"></a>3.2.4 选择结构的嵌套</h3><p>选择结构可以嵌套，比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">   语句块<span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">      语句块<span class="number">2</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="3-2-5-例子"><a href="#3-2-5-例子" class="headerlink" title="3.2.5 例子"></a>3.2.5 例子</h3><ol><li>面试资格确认</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">24</span></span><br><span class="line">subject = <span class="string">"计算机"</span></span><br><span class="line">college = <span class="string">"非重点"</span></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">25</span> <span class="keyword">and</span> subject == <span class="string">"电子信息工程"</span>) <span class="keyword">or</span> (college == <span class="string">"重点"</span> <span class="keyword">and</span> subject == <span class="string">"电子信息工程"</span> ) <span class="keyword">or</span> (age &lt;= <span class="number">28</span> <span class="keyword">and</span> subject == <span class="string">"计算机"</span>):</span><br><span class="line">    print(<span class="string">"恭喜，你已获得我公司的面试机会!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"抱歉，你未达到面试要求"</span>)</span><br></pre></td></tr></table></figure><ol><li>编写程序，判断某天是某年第几天</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">date = time.localtime()</span><br><span class="line">year, month, day = date[:<span class="number">3</span>]</span><br><span class="line">day_month = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">or</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>):</span><br><span class="line">    day_month[<span class="number">1</span>] = <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> month == <span class="number">1</span>:</span><br><span class="line">    print(day)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(sum(day_month[:month - <span class="number">1</span>]) + day)</span><br></pre></td></tr></table></figure><p>其中，判断闰年可以直接使用calendar模块的方法:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>caledar.isleap(<span class="number">2016</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>或者使用下面的方法直接计算今天是今年的第几天:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date.today().timetuple().tm_yday</span><br><span class="line"><span class="number">208</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.date(<span class="number">2015</span>, <span class="number">7</span>, <span class="number">25</span>).timetuple().tm_yday</span><br><span class="line"><span class="number">206</span></span><br></pre></td></tr></table></figure><p>也可以使用datetime模块提供的功能来计算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today</span><br><span class="line">datetime.date(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">firstDay = datetime.date(today.year, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>firstDay</span><br><span class="line">datetime.date(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">daysDelta = today - firstDay + datetime.timedelta(days = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>daysDelta.days</span><br><span class="line"><span class="number">208</span></span><br></pre></td></tr></table></figure><h2 id="3-3-循环结构"><a href="#3-3-循环结构" class="headerlink" title="3.3 循环结构"></a>3.3 循环结构</h2><h3 id="3-3-1-for循环和while循环"><a href="#3-3-1-for循环和while循环" class="headerlink" title="3.3.1 for循环和while循环"></a>3.3.1 for循环和while循环</h3><p>Python提供了两种基本的循环结构语句——while语句、for语句。</p><p>while循环一般用于循环次数难以提前确定的情况，也可以用于循环次数确定的情况。</p><p>for循环一般用于循环次数可以提前确定的情况，尤其是用于枚举序列或迭代对象中的元素。</p><p>一般优先考虑使用for循环。<br>相同或不同的循环结构之间都可以互相嵌套，实现更为复杂的逻辑。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式:</span><br><span class="line">   循环体</span><br><span class="line">[<span class="keyword">else</span>:    <span class="comment">#循环结束，且不是因break结束，执行else部分</span></span><br><span class="line">   <span class="keyword">else</span>子句代码块]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 取值 <span class="keyword">in</span> 序列或迭代对象:</span><br><span class="line">   循环体</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">else</span>子句代码块]</span><br></pre></td></tr></table></figure><h3 id="3-3-2-循环结构的优化"><a href="#3-3-2-循环结构的优化" class="headerlink" title="3.3.2 循环结构的优化"></a>3.3.2 循环结构的优化</h3><p>&emsp;&emsp;为了优化程序以获得更高的效率和运行速度，在编写循环语句时，应尽量减少循环内部不必要的计算，将与循环变量无关的代码尽可能地提取到循环之外。对于使用多重循环嵌套的情况，应尽量减少内层循环中不必要的计算，尽可能地向外提。</p><p>例如：</p><p>优化前的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">   result = []</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> digits:</span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> digits:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> digits:</span><br><span class="line">               result.append(i * <span class="number">100</span> + j * <span class="number">10</span> + k)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>优化后的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">   result = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> digits:</span><br><span class="line">      i = i * <span class="number">100</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> digits:</span><br><span class="line">         j = j * <span class="number">10</span></span><br><span class="line">         <span class="keyword">for</span> k <span class="keyword">in</span> digits:</span><br><span class="line">            result.append(i + j + k)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="3-4-break-和-continue-语句"><a href="#3-4-break-和-continue-语句" class="headerlink" title="3.4 break 和 continue 语句"></a>3.4 break 和 continue 语句</h3><p>break语句在while循环和for循环中都可以使用，一般放在if选择结构中，一旦break语句被执行，将使得整个循环提前结束。</p><p>continue语句的作用是终止当前循环，并忽略continue之后的语句，然后回到循环的顶端，提前进入下一次循环。</p><p>除非break语句让代码更简单或更清晰，否则不要轻易使用。</p><p>例：计算小于100的最大素数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      print(n)</span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>当删除最后一个break时，则为输出1-100的所有素数</p><p>警惕continue可能带来的问题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">   <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(i)</span><br><span class="line">   i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>永不结束的死循环,Ctrl+C强行终止。</p><p>这样子就不会有问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">   <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   print(i, end = <span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h2 id="3-5-案例精选"><a href="#3-5-案例精选" class="headerlink" title="3.5 案例精选"></a>3.5 案例精选</h2><p>例1：计算1 + 2 + … + 100 的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">   s += i</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>例2：输出序列中的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>]</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(a_list):</span><br><span class="line">   print(<span class="string">'列表的第'</span>, i + <span class="number">1</span>, <span class="string">'个元素是：'</span>, v)</span><br></pre></td></tr></table></figure><p>例3：输出“水仙花数”。所谓水仙花数是指1个3位的十进制数，其各位数字的立方和等于该数本身。例如：153是水仙花数，因为153 = 13 + 53 + 33 。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">   <span class="comment">#这里是序列解包的用法</span></span><br><span class="line">   bai, shi, ge = map(int, str(i))</span><br><span class="line">   <span class="keyword">if</span> ge**<span class="number">3</span> + shi**<span class="number">3</span> + bai**<span class="number">3</span> == i:</span><br><span class="line">      print(i)</span><br></pre></td></tr></table></figure><p>例4：打印九九乘法表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i + <span class="number">1</span>):</span><br><span class="line">      print(<span class="string">'&#123;0&#125;*&#123;1&#125;=&#123;2&#125;'</span>.format(i, j, i * j).ljust(<span class="number">6</span>), end = <span class="string">' '</span>)</span><br><span class="line">   print()</span><br></pre></td></tr></table></figure><p>例5：编写程序，生成一个含有20个随机数的列表，要求所有元素不相同，并且每个元素的值介于1到100之间。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">   <span class="keyword">if</span> len(x)==<span class="number">20</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   n = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">   <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> x:</span><br><span class="line">      x.append(n)</span><br><span class="line">print(x)</span><br><span class="line">print(len(x))</span><br><span class="line">print(sorted(x))</span><br></pre></td></tr></table></figure><p>如果用集合来做，会更简单一些</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">x = set()</span><br><span class="line"><span class="keyword">while</span> len(x) &lt; <span class="number">20</span>:</span><br><span class="line">   x.add(randint(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">print(x)</span><br><span class="line">print(sorted(x))</span><br></pre></td></tr></table></figure><p>例6:  递归算法求解汉诺塔问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hannoi</span><span class="params">(num, src, dst, temp=None)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times    <span class="comment">#声明用来记录移动次数的变量为全局变量</span></span><br><span class="line">    <span class="keyword">assert</span> type(num) == int, <span class="string">'num must be integer'</span>   <span class="comment">#确认参数类型和范围</span></span><br><span class="line">    <span class="keyword">assert</span> num &gt; <span class="number">0</span>, <span class="string">'num must &gt; 0'</span>    </span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>: <span class="comment">#只剩最后或只有一个盘子需要移动，这也是函数递归调用的结束条件</span></span><br><span class="line">        print(<span class="string">'The &#123;0&#125; Times move:&#123;1&#125;==&gt;&#123;2&#125;'</span>.format(times, src, dst))</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#递归调用函数自身，先把除最后一个盘子之外的所有盘子移动到临时柱子上</span></span><br><span class="line">        hannoi(num<span class="number">-1</span>, src, temp, dst)</span><br><span class="line">        hannoi(<span class="number">1</span>, src, dst)   <span class="comment">#把最后一个盘子直接移动到目标柱子上</span></span><br><span class="line">        <span class="comment">#把除最后一个盘子之外的其他盘子从临时柱子上移动到目标柱子上</span></span><br><span class="line">        hannoi(num<span class="number">-1</span>, temp, dst, src)</span><br><span class="line">times = <span class="number">1</span>    <span class="comment">#用来记录移动次数的变量</span></span><br><span class="line">hannoi(<span class="number">3</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>) <span class="comment">#A表示最初放置盘子的柱子，C是目标柱子，B是临时柱子</span></span><br></pre></td></tr></table></figure><p>ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><p><br> <br></p><hr><p><b><i>end</i></b></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python选择与循环&quot;&gt;&lt;a href=&quot;#Python选择与循环&quot; class=&quot;headerlink&quot; title=&quot;Python选择与循环&quot;&gt;&lt;/a&gt;&lt;center&gt;Python选择与循环&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;3-1-条件表达式&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="选择与循环" scheme="http://yoursite.com/categories/Python/%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python序列</title>
    <link href="http://yoursite.com/2019/05/10/Python/Python%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2019/05/10/Python/Python序列/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-06-02T07:44:53.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python序列"><a href="#Python序列" class="headerlink" title="Python序列"></a><center>Python序列</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除    by：mfdy</i></p><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><h3 id="2-1-1-列表的创建与删除"><a href="#2-1-1-列表的创建与删除" class="headerlink" title="2.1.1 列表的创建与删除"></a>2.1.1 列表的创建与删除</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'mpilgrim'</span>, <span class="string">'z'</span>, <span class="string">'example'</span>]</span><br><span class="line">a_list = []</span><br><span class="line"><span class="comment"># 创建空列表</span></span><br></pre></td></tr></table></figure><p>或者是用list()函数将元组、range对象、字符串或者其他类型的可迭代对象类型的数据转换为列表，例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a_list = list((<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment"># [3, 5, 7, 9, 11]</span></span><br><span class="line">list(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9]</span></span><br><span class="line">print(list(<span class="string">'hello world'</span>))</span><br><span class="line"><span class="comment"># ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span></span><br><span class="line">x =list()</span><br><span class="line"><span class="comment"># 创建空列表</span></span><br></pre></td></tr></table></figure><p>当不再使用时，使用del命令删除整个列表，如果列表对象所指向的值不再有其他对象指向，同时删除该值<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> a_list</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a_list</span><br><span class="line">NameError: name <span class="string">'a_list'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h3 id="2-1-2-列表元素的增加"><a href="#2-1-2-列表元素的增加" class="headerlink" title="2.1.2 列表元素的增加"></a>2.1.2 列表元素的增加</h3><ol><li>可以使用 <code>+</code> 运算符添加，但是其实这个是重新创建一个列表，并将元素复制过来</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">aList = aList + [<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><ol><li>使用列表对象的append()方法，再不改变列表在内存中的首地址情况下修改列表，推荐方法</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList.append(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span> ,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>Python 采用的是基于值的自动内存管理方式，当为对象修改值得时候，是使变量直接指向新的值，适用于所有类型的变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1234589</span></span><br></pre></td></tr></table></figure><p>但如果是通过修改下标来修改序列中元素的值或者通过可变序列对象自身提供的方法来增加和删除元素的时候，序列对象在内存中的起始地址是不变的，<b>仅仅是被修改的元素地址发生变化</b></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b </span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a) == id(b)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>]) == id(b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ol><li>extend(): 将另一个迭代对象的所有元素添加至该列表对象的尾部</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">a.extend([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ol><li>insert(i, j): 在列表的第i个位置插入j元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList.insert(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol><li>使用乘法来扩展列表，将列表与整数相乘，生成一个新的列表，但是只是引用已有对象，当修改其中的一个值的时候，相关引用都会被修改</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bList = aList</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">aList = aList * <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">x = [[asd] * <span class="number">2</span>] * <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[asd, asd], [asd, asd]]</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] * <span class="number">3</span></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><h3 id="2-1-3-列表元素的删除"><a href="#2-1-3-列表元素的删除" class="headerlink" title="2.1.3 列表元素的删除"></a>2.1.3 列表元素的删除</h3><ol><li>使用del命令删除列表或者列表中的指定位置上的元素</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> aList[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> aList</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a_list</span><br><span class="line">NameError: name <span class="string">'a_list'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><ol><li>pop(): 删除并返回指定位置的元素，没有则默认为最后一个，如果超出范围则抛回异常</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = list((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">aList.pop(<span class="number">1</span>)</span><br><span class="line">aList.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol><li>remove(): 删除首次出现的指定元素，不存在则返回异常</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">aList.remove(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="2-1-4-列表元素访问与计数"><a href="#2-1-4-列表元素访问与计数" class="headerlink" title="2.1.4 列表元素访问与计数"></a>2.1.4 列表元素访问与计数</h3><p>可以使用下标直接访问，如果不存在则抛出异常</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">10</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>index(i): 找到元素i首次出现时的下标<br>count(i): 统计指定元素i在列表对象中出现的次数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList.index(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-成员资格判断"><a href="#2-1-5-成员资格判断" class="headerlink" title="2.1.5 成员资格判断"></a>2.1.5 成员资格判断</h3><ol><li>count(): 大于0成立    </li><li>in 关键词</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">bList =[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">cList = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> aList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>] <span class="keyword">in</span> cList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>, <span class="string">'a'</span>) <span class="keyword">in</span> zip(aList, bList)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="★2-1-6-切片操作"><a href="#★2-1-6-切片操作" class="headerlink" title="★2.1.6 切片操作"></a>★2.1.6 切片操作</h3><p>切片使用2个冒号分隔的3个数字来完成： <code>[x:y:z]</code><br>&emsp;x表示切片开始的位置，默认为0<br>&emsp;y表示切片截止的为，默认为列表长度<br>&emsp;z表示切片的步长，默认为1     </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[::]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList[<span class="number">1</span>:<span class="number">100</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aLIst[<span class="number">100</span>:]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>注意：切片操作在程序中书写时如果要更改，则需要进行赋值操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(aList)</span><br><span class="line">aList = aList[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(aList)</span><br><span class="line"><span class="comment"># 输出内容</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>可以使用切片原地地址修改列表内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在尾部追加元素</span></span><br><span class="line">aList[len(aList):] = [<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换前3个元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除前3个元素</span></span><br><span class="line">aList[:<span class="number">3</span>] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成0-9的十个数</span></span><br><span class="line">aList = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换偶数位置上的元素</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片不连续，两个元素个数必须一样多</span></span><br><span class="line">aList[::<span class="number">2</span>] = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line">line <span class="number">13</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    aList[::<span class="number">2</span>] = [<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line">ValueError: attempt to assign sequence of size <span class="number">3</span> to extended slice of size <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del指令删除元素</span></span><br><span class="line">aList = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line"><span class="comment">#删除前3个元素</span></span><br><span class="line"><span class="keyword">del</span> aList[:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#删除偶数位置上的元素</span></span><br><span class="line"><span class="keyword">del</span> aList[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>切片返回的是列表元素的浅复制<br>&emsp;浅复制即把原列表所有元素的引用都复制到新列表中，如果只包含数字等基本元素或者元组、字符串这样的<b>不可变类型的数据</b>，进行修改操作不影响原列表<br>&emsp;如果原列表中包含列表等可变数据类型，修改任何一个都会影响到另一个</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bList = aList[::]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList == bList</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList <span class="keyword">is</span> bList</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">bList[<span class="number">1</span>] = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">[<span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">aList = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">bList = aList[::]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(aList) == id(bList)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">aList[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[[<span class="number">8</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">[[<span class="number">8</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h3 id="2-1-7-列表排序"><a href="#2-1-7-列表排序" class="headerlink" title="2.1.7 列表排序"></a>2.1.7 列表排序</h3><ol><li>sort(): 进行原地址排序，为自身进行更改，不需要赋值操作</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"><span class="comment"># 将序列的所有元素进行随机排序</span></span><br><span class="line">random.shuffle(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">13</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序排序</span></span><br><span class="line">aList.sort()</span><br><span class="line"><span class="comment"># 降序排列</span></span><br><span class="line">aList.sort(reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 按转化成字符串的长度排序</span></span><br><span class="line">aList.sort(key = <span class="keyword">lambda</span> x:len(str(x)))</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure><ol><li>sorted(): 排序并返回新列表</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">13</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">1</span>]</span><br><span class="line">aList = sorted(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line">aList = sorted(aList, reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol><li>reverse(): 将函数自身翻转，不需要赋值</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line">aList.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><ol><li>reversed(): 翻转并返回迭代对象</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 返回reversed对象</span></span><br><span class="line">bList = reversed(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">&lt;list_reverseiterator object at <span class="number">0x0000011BE35B86D8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把reversed对象转换成列表</span></span><br><span class="line">bList = list(bList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bList</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bList:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 没有输出内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新创建reversed对象</span></span><br><span class="line">bList = reversed(aList)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bList:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">13</span> <span class="number">12</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><p>reversed（）返回的是一个迭代器对象，只能进行一次循环遍历。显示一次所包含的值！</p><h3 id="2-1-8-列表常用内置函数"><a href="#2-1-8-列表常用内置函数" class="headerlink" title="2.1.8 列表常用内置函数"></a>2.1.8 列表常用内置函数</h3><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>list.append(x)</td><td>将元素x添加至列表尾部</td></tr><tr><td>list.extend(x)</td><td>将列表L中的所有元素添加值列表尾部</td></tr><tr><td>list.insert(index, x) &emsp;</td><td>在列表指定位置index处添加元素x，该位置后面的所有元素后移一个位置</td></tr><tr><td>list.remove(x)</td><td>在列表中删除首次出现的元素x，该元素之后的所有元素前移一个位置</td></tr><tr><td>list.pop([index])</td><td>删除并返回列表中下标为index（默认为-1）的元素</td></tr><tr><td>list.clear()</td><td>删除列表中所有元素，但保留列表对象</td></tr><tr><td>list.index(x)</td><td>返回列表中第一个值为x的元素的下标，若不存在值为x的元素则抛出异常</td></tr><tr><td>list.count(x)</td><td>返回指定元素x在列表中的出现次数</td></tr><tr><td>list.reverse()</td><td>对列表lst所有元素进行逆序</td></tr><tr><td>list.sort()</td><td>对列表lst中的元素进行排序，key用来指定排序依据，reverse决定升序(False)还是降序(True)</td></tr><tr><td>list.copy()</td><td>返回列表lst的浅复制</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>len(list)</td><td>返回列表中的元素个数，适用于元组、字典、集合、字符串等</td></tr><tr><td>max(list)</td><td>返回列表中的最大元素，适用于元组、字典、集合、字符串等</td></tr><tr><td>len(list)</td><td>返回列表中的最小元素，适用于元组、字典、集合、字符串等</td></tr><tr><td>sum(list)</td><td>对列表的元素进行求和运算，对非数值型列表运算需要指定start参数，同样适用于元组、range</td></tr><tr><td>zip()</td><td>返回可迭代的zip对象</td></tr><tr><td>enumerate(list)&emsp;</td><td>枚举列表元素，返回枚举对象，其中每个元素为包含下标和值的元组。该函数对元组、字符串同样有效。</td></tr></tbody></table></div><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum()</span></span><br><span class="line">  <span class="comment"># sum()函数的start参数默认为0</span></span><br><span class="line">  &gt;&gt;&gt; sum(range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">  <span class="number">55</span></span><br><span class="line">  <span class="comment"># 指定start参数为5，等价于5+sum(range(1,11))</span></span><br><span class="line">  &gt;&gt;&gt; sum(range(<span class="number">1</span>, <span class="number">11</span>), <span class="number">5</span>)</span><br><span class="line">  <span class="number">60</span></span><br><span class="line">  <span class="comment">#这个操作占用空间较大，慎用</span></span><br><span class="line">  &gt;&gt;&gt; sum([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]], [])</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip()</span></span><br><span class="line">  aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  bList = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  cList = zip(a, b)</span><br><span class="line">  <span class="comment"># 返回zip对象</span></span><br><span class="line">  &gt;&gt;&gt; cList</span><br><span class="line">  &lt;zip object at <span class="number">0x0000000003728908</span>&gt;</span><br><span class="line">  <span class="comment"># 把zip对象转换成列表</span></span><br><span class="line">  &gt;&gt;&gt; list(cList)</span><br><span class="line">  [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate()</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> enumerate(<span class="string">'abcdef'</span>):</span><br><span class="line">  print(item)</span><br><span class="line">  (<span class="number">0</span>, <span class="string">'a'</span>)</span><br><span class="line">  (<span class="number">1</span>, <span class="string">'b'</span>)</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'c'</span>)</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'d'</span>)</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'e'</span>)</span><br><span class="line">  (<span class="number">5</span>, <span class="string">'f'</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-9-列表推导式"><a href="#2-1-9-列表推导式" class="headerlink" title="2.1.9 列表推导式"></a>2.1.9 列表推导式</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aList = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">  aList.append(x*x)</span><br></pre></td></tr></table></figure><p>也等价于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aList = list(map(<span class="keyword">lambda</span> x: x*x, range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><p>例：阿凡提与国王比赛下棋，国王说要是自己输了的话阿凡提想要什么他都可以拿得出来。阿凡提说那就要点米吧，棋盘一共64个小格子，在第一个格子里放1粒米，第二个格子里放2粒米，第三个格子里放4粒米，第四个格子里放8粒米，以此类推，后面每个格子里的米都是前一个格子里的2倍，一直把64个格子都放满。需要多少粒米呢？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sum([<span class="number">2</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>)]))</span><br></pre></td></tr></table></figure><p>例1. 使用列表推导式实现嵌套列表的平铺</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">aList = [num <span class="keyword">for</span> elem <span class="keyword">in</span> vec <span class="keyword">for</span> num <span class="keyword">in</span> elem]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> vec:</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> elem:</span><br><span class="line">        result.append(num)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">result = sum(vec, [])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># chain()可以把一组迭代对象串联起来，形成一个更大的迭代器</span></span><br><span class="line">vec = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">result = list(chain(*vec))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>例2. 列出当前文件夹下所有Python源文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[filename <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> filename.endswith((<span class="string">'.py'</span>, <span class="string">'.pyw'</span>))]</span><br></pre></td></tr></table></figure><p>例3. 过滤不符合条件的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList = [<span class="number">-1</span>,<span class="number">-4</span>,<span class="number">6</span>,<span class="number">7.5</span>,<span class="number">-2.3</span>,<span class="number">9</span>,<span class="number">-11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> aList <span class="keyword">if</span> i&gt;<span class="number">0</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-元组"><a href="#2-2-元组" class="headerlink" title="2.2 元组"></a>2.2 元组</h2><p>元组和列表类似，但属于不可变序列，元组一旦创建，用任何方法都不可以修改其元素<br>元组的定义方式和列表相同，但定义时所有元素是放在一对圆括号“（）”中，而不是方括号中。</p><h3 id="2-2-1-元组创建与删除"><a href="#2-2-1-元组创建与删除" class="headerlink" title="2.2.1 元组创建与删除"></a>2.2.1 元组创建与删除</h3><ol><li>&emsp;</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a_tuple = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'asd'</span>, <span class="string">'qweasdzxc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含一个元素的元组，最后必须写个逗号</span></span><br><span class="line">a_tuple = (<span class="number">3</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">3</span>,)</span><br><span class="line">a_tuple = (<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">3</span>)</span><br><span class="line">  <span class="comment"># 也可以这样创建</span></span><br><span class="line">a_tuple = <span class="number">3</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">3</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空元组</span></span><br><span class="line">x = ()</span><br></pre></td></tr></table></figure><ol><li>类似与列表的list()函数，使用tuple()函数将其他序列转换为元组</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a_Tuple = tuple(aList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_Tuple</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">b_Tuple = tuple(<span class="string">'asd'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b_Tuple</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>)</span><br></pre></td></tr></table></figure><ol><li>del只能删除整个元组，不能只删除元组中的指定元素</li></ol><h3 id="2-2-2-元组与列表的区别"><a href="#2-2-2-元组与列表的区别" class="headerlink" title="2.2.2 元组与列表的区别"></a>2.2.2 元组与列表的区别</h3><ol><li>元组中的数据一旦定义就不允许更改。</li><li>元组没有append()、extend()和insert()等方法，无法向元组中添加元素。</li><li>元组没有remove()或pop()方法，也无法对元组元素进行del操作，不能从元组中删除元素。</li><li>从效果上看，tuple()冻结列表，而list()融化元组。<br><br></li><li>元组的速度比列表更快。如果定义了一系列常量值，而所需做的仅是对它进行遍历，那么一般使用元组而不用列表。</li><li>元组对不需要改变的数据进行“写保护”将使得代码更加安全。</li><li>元组可用作字典键（特别是包含字符串、数值和其它元组这样的不可变数据的元组）。列表永远不能当做字典键使用，因为列表不是不可变的。</li></ol><h3 id="2-2-3-序列解包"><a href="#2-2-3-序列解包" class="headerlink" title="2.2.3 序列解包"></a>2.2.3 序列解包</h3><ol><li><p>可以使用序列解包功能对多个变量同时赋值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>可以对range对象进行序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>使用迭代器对象进行序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></li><li><p>使用可迭代的map对象进行序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = map(str, range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y, z)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>交换两个变量的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure></li><li><p>sorted()函数返回排序后的列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = sorted([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>字符串也支持序列解包</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="string">'ABC'</span></span><br></pre></td></tr></table></figure></li><li><p>序列解包对于列表和字典同样有效</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">b, c, d = s.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典时不用太多考虑元素的顺序</span></span><br><span class="line">b, c, d = s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line">b, c, d = s.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b, c, d)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-4-生成器推导式"><a href="#2-2-4-生成器推导式" class="headerlink" title="2.2.4 生成器推导式"></a>2.2.4 生成器推导式</h3><p>生成器推导式的结果是一个生成器对象。使用生成器对象的元素时，可以根据需要将其转化为列表或元组，也可以使用生成器对象<strong>next</strong>()方法或内置函数next()进行遍历，或者直接将其作为迭代器对象来使用。  </p><p>生成器对象具有惰性求值的特点，只在需要时生成新元素，比列表推导式具有更高的效率，空间占用非常少，尤其适合大数据处理的场合。  </p><p>不管用哪种方法访问生成器对象，都无法再次访问已访问过的元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">g = ((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x0000011B65812570</span>&gt;</span><br><span class="line"></span><br><span class="line">a_tuple = tuple(g)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple</span><br><span class="line">(<span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>)</span><br><span class="line"></span><br><span class="line">g = ((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">aList = list(g)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aList</span><br><span class="line">[<span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器对象__next__()方法或内置函数next()进行遍历</span></span><br><span class="line">g = ((i+<span class="number">2</span>)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 使用生成器对象的__next__()方法获取元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.__next__()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-字典"><a href="#2-3-字典" class="headerlink" title="2.3 字典"></a>2.3 字典</h2><p>字典是“键-值对”的无序可变序列，字典中的每个元素包含两个部分：“键”和“值”。<br>定义字典时，每个元素的键和值用冒号分隔，元素之间用逗号分隔，所有的元素放在一对大括号“｛｝”中。<br>字典中的键可以为任意不可变数据，比如整数、实数、复数、字符串、元组等等。</p><h3 id="2-3-1-字典创建与删除"><a href="#2-3-1-字典创建与删除" class="headerlink" title="2.3.1 字典创建与删除"></a>2.3.1 字典创建与删除</h3><ol><li>使用<code>=</code>将一个字典赋值给一个变量即可创建一个字典变量</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_dict = &#123;<span class="string">'asd'</span>:<span class="string">'qwe'</span>, <span class="string">'zxc'</span>:<span class="string">'2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_dict</span><br><span class="line">&#123;<span class="string">'asd'</span>: <span class="string">'qwe'</span>, <span class="string">'zxc'</span>: <span class="string">'2'</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>使用内置函数dict()通过已有数据快速创建字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">dictionary = dict(zip(keys, values))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dictionary</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>同时，也可创建空字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = dict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>使用内置函数dict()根据给定的“键-值对”来创建字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = dict(name=<span class="string">'Dong'</span>, age=<span class="number">37</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'age'</span>: <span class="number">37</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>以给定内容为“键”，创建“值”为空的字典</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">adict = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="keyword">None</span>, <span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">aList = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>]</span><br><span class="line">adict = dict.fromkeys(aList, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="number">10</span>, <span class="string">'age'</span>: <span class="number">10</span>, <span class="string">'sex'</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">adict = dict.fromkeys(<span class="string">'age'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">5</span>, <span class="string">'g'</span>: <span class="number">5</span>, <span class="string">'e'</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">adict = dict.fromkeys([<span class="string">'age'</span>], <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>adict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>可以使用del删除整个字典或者字典中指定的元素，具体参考2.3.3</li></ol><h3 id="2-3-2-字典元素的读取"><a href="#2-3-2-字典元素的读取" class="headerlink" title="2.3.2 字典元素的读取"></a>2.3.2 字典元素的读取</h3><ol><li>以键作为下标可以读取字典元素，若键不存在则抛出异常</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aDict = &#123;<span class="string">'name'</span>:<span class="string">'Dong'</span>, <span class="string">'sex'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">37</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'name'</span>]</span><br><span class="line">Dong</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'tel'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(aDict[<span class="string">'tel'</span>])</span><br><span class="line">KeyError: <span class="string">'tel'</span></span><br></pre></td></tr></table></figure><ol><li>使用字典对象的get方法获取指定键对应的值，并且可以在键不存在的时候返回指定值</li></ol><p>get()方法语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key, default = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>其中：<br>key — 字典中要查找的键。<br>default — 如果指定键的值不存在时，返回该默认值值。<br>get()函数返回指定键的值，如果值不在字典中返回默认值None。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(aDict.get(<span class="string">'address'</span>))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(aDict.get(<span class="string">'address'</span>, <span class="string">'SDIBT'</span>))</span><br><span class="line">SDIBT</span><br><span class="line"></span><br><span class="line">aDict[<span class="string">'score'</span>] = aDict.get(<span class="string">'score'</span>,[])</span><br><span class="line">aDict[<span class="string">'score'</span>].append(<span class="number">98</span>)</span><br><span class="line">aDict[<span class="string">'score'</span>].append(<span class="number">97</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict</span><br><span class="line">&#123;<span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>]&#125;</span><br></pre></td></tr></table></figure><ol><li>使用字典对象的items()方法可以返回字典的键、值对列表<br>使用字典对象的keys()方法可以返回字典的键列表<br>使用字典对象的values()方法可以返回字典的值列表  </li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">aDict = &#123;<span class="string">'name'</span>:<span class="string">'Dong'</span>, <span class="string">'sex'</span>:<span class="string">'male'</span>, <span class="string">'age'</span>:<span class="number">37</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> aDict.items():</span><br><span class="line">  print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> aDict.keys(): </span><br><span class="line">  print(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> aDict.values():</span><br><span class="line">  print(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> aDict.items():</span><br><span class="line">  print(key, value)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">('name', 'Dong')</span><br><span class="line">('sex', 'male')</span><br><span class="line">('age', <span class="number">37</span>)</span><br><span class="line">name</span><br><span class="line">sex</span><br><span class="line">age</span><br><span class="line">Dong</span><br><span class="line">male</span><br><span class="line"><span class="number">37</span></span><br><span class="line">name Dong</span><br><span class="line">sex male</span><br><span class="line">age <span class="number">37</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-字典元素的添加与修改"><a href="#2-3-3-字典元素的添加与修改" class="headerlink" title="2.3.3 字典元素的添加与修改"></a>2.3.3 字典元素的添加与修改</h3><ol><li>当以指定键为下标为字典赋值时，若键存在，则可以修改该键的值；若不存在，则表示添加一个键、值对。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改元素值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'age'</span>] = <span class="number">38</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">38</span>, <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加新元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict[<span class="string">'address'</span>] = <span class="string">'SDIBT'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aDict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">38</span>, <span class="string">'address'</span>: <span class="string">'SDIBT'</span>, <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>使用字典对象的update方法修改键值，当键不存在的时候则自动添加进去</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aDict = &#123;<span class="string">'age'</span>: <span class="number">37</span>, <span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>], <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">aDict.update(&#123;<span class="string">'a'</span>:<span class="string">'a'</span>,<span class="string">'b'</span>:<span class="string">'b'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(aDict)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">37</span>, <span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>], <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>, <span class="string">'a'</span>: <span class="string">'a'</span>, <span class="string">'b'</span>: <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">aDict.update(&#123;<span class="string">'a'</span>:<span class="string">'dss'</span>,<span class="string">'b'</span>:<span class="string">'afd'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(aDict)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">37</span>, <span class="string">'score'</span>: [<span class="number">98</span>, <span class="number">97</span>], <span class="string">'name'</span>: <span class="string">'Dong'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>, <span class="string">'a'</span>: <span class="string">'dss'</span>, <span class="string">'b'</span>: <span class="string">'afd'</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>删除<br>&emsp;使用del删除字典中指定键的元素<br>&emsp;使用字典对象的clear()方法来删除字典中所有元素<br>&emsp;使用字典对象的pop()方法删除并返回指定键的元素<br>&emsp;使用字典对象的popitem()方法删除并返回字典中的一个元素  </li></ol><h3 id="2-3-4-有序字典"><a href="#2-3-4-有序字典" class="headerlink" title="2.3.4 有序字典"></a>2.3.4 有序字典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">x = collections.OrderedDict()</span><br><span class="line">x[<span class="string">'b'</span>] = <span class="number">5</span></span><br><span class="line">x[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line">x[<span class="string">'c'</span>] = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">OrderedDict([(<span class="string">'b'</span>, <span class="number">5</span>), (<span class="string">'a'</span>, <span class="number">3</span>), (<span class="string">'c'</span>, <span class="number">8</span>)])</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-集合"><a href="#2-4-集合" class="headerlink" title="2.4 集合"></a>2.4 集合</h2><p>集合为无序可变序列，不能有重复值</p><p>且集合中只能包含数字、字符串、元组等不可变类型数据</p><h3 id="2-4-1-集合的创建与删除"><a href="#2-4-1-集合的创建与删除" class="headerlink" title="2.4.1 集合的创建与删除"></a>2.4.1 集合的创建与删除</h3><ol><li>直接创建</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">3</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>使用add()方法添加</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.add(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><ol><li>使用set将其他类型数据转换为集合</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a_set = set(range(<span class="number">8</span>,<span class="number">14</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set</span><br><span class="line">&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b_set = set([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>]) <span class="comment"># 自动去除重复</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b_set</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c_set = set()  <span class="comment"># 空集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c_set</span><br><span class="line">set()</span><br></pre></td></tr></table></figure><ol><li>del()删除整个集合<br>pop()弹出并删除其中一个元素<br>remoove()直接删除指定元素<br>clear()清空集合</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,remove(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-集合操作"><a href="#2-4-2-集合操作" class="headerlink" title="2.4.2 集合操作"></a>2.4.2 集合操作</h3><p>Python集合支持交集、并集、差集等运算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a_set = set([<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>])</span><br><span class="line">b_set = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line">z = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>并集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set | b_set</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.union(b_set)</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>交集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set &amp; b_set</span><br><span class="line">&#123;<span class="number">8</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.intersection(b_set)</span><br><span class="line">&#123;<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>差集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set - b_set</span><br><span class="line">&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.difference(b_set)</span><br><span class="line">&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>对称差集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set ^ b_set</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_set.symmetric_difference(b_set)</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>集合大小</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt; y</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt; z</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y &lt; z</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ol><li>是否为子集</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.issubset(y)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.issubset(z)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-其他"><a href="#2-4-3-其他" class="headerlink" title="2.4.3 其他"></a>2.4.3 其他</h3><p>作为集合的具体应用，可以使用集合快速提取序列中单一元素</p><p>如果使用传统方式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="comment"># 100个介于0~999之间的随机数</span></span><br><span class="line">listRandom = [randint(<span class="number">0</span>, <span class="number">9999</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">noRepeat = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listRandom:</span><br><span class="line">  <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> noRepeat:</span><br><span class="line">    noRepeat.append(i)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(listRandom)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(noRepeat)</span><br></pre></td></tr></table></figure><p>但是使用集合，只需要如下一行代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newSet = set(listRandom)</span><br></pre></td></tr></table></figure><p><br><br></p><hr><p><b><i>end</i></b></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python序列&quot;&gt;&lt;a href=&quot;#Python序列&quot; class=&quot;headerlink&quot; title=&quot;Python序列&quot;&gt;&lt;/a&gt;&lt;center&gt;Python序列&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本文章总结了董付国老师的Pthon程序设计
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="序列" scheme="http://yoursite.com/categories/Python/%E5%BA%8F%E5%88%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python程序设计目录</title>
    <link href="http://yoursite.com/2019/05/10/Python/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2019/05/10/Python/Python程序设计目录/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-05-28T14:28:23.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python程序设计"><a href="#Python程序设计" class="headerlink" title="Python程序设计"></a><center>Python程序设计</center></h1><hr><p><i>本文章总结了董付国老师的Pthon程序设计(第2版)书的内容，仅供个人学习使用，如有侵权，立刻删除   &emsp; &emsp;  by：mfdy</i></p><p><br><br><b>链接包含本博客链接和CSDN同步链接</b><br>CSDN目录：<a href="https://blog.csdn.net/mofadiyu/article/details/90178542" target="_blank" rel="noopener">https://blog.csdn.net/mofadiyu/article/details/90178542</a></p><p><b><i>文章正在持续更新中……</i></b><br><br></p><h2 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 基础知识"></a>第一章 基础知识</h2><h2 id="第二章-Python-序列"><a href="#第二章-Python-序列" class="headerlink" title="第二章 Python 序列"></a>第二章 Python 序列</h2><p><b>文章链接：<a href="https://mfdy.tech/2019/05/10/Python序列/" target="_blank" rel="noopener">mfdy’s blog:  Python序列：https://mfdy.tech/2019/05/10/Python序列</a></b></p><p>2.1 <a href="https://blog.csdn.net/mofadiyu/article/details/90178323" target="_blank" rel="noopener">列表：https://blog.csdn.net/mofadiyu/article/details/90178323</a></p><p>2.2 <a href="https://blog.csdn.net/mofadiyu/article/details/90178507" target="_blank" rel="noopener">元组：https://blog.csdn.net/mofadiyu/article/details/90178507</a></p><p>2.3 <a href="https://blog.csdn.net/mofadiyu/article/details/90613279" target="_blank" rel="noopener">字典：https://blog.csdn.net/mofadiyu/article/details/90613279</a></p><p>2.4 <a href="https://blog.csdn.net/mofadiyu/article/details/90613321" target="_blank" rel="noopener">集合：https://blog.csdn.net/mofadiyu/article/details/90613321</a></p><h2 id="第三章-选择与循环"><a href="#第三章-选择与循环" class="headerlink" title="第三章 选择与循环"></a>第三章 选择与循环</h2><p><b>文章链接：<a href="https://mfdy.tech/2019/05/13/Python选择与循环/" target="_blank" rel="noopener">mfdy’s blog:  Python选择与循环：https://mfdy.tech/2019/05/13/Python选择与循环/</a></b></p><p><a href="https://blog.csdn.net/mofadiyu/article/details/90648471" target="_blank" rel="noopener">选择与循环：https://blog.csdn.net/mofadiyu/article/details/90648471</a></p><h2 id="第四章-字符串与正则表达式"><a href="#第四章-字符串与正则表达式" class="headerlink" title="第四章 字符串与正则表达式"></a>第四章 字符串与正则表达式</h2><h2 id="第五章-函数设计与使用"><a href="#第五章-函数设计与使用" class="headerlink" title="第五章 函数设计与使用"></a>第五章 函数设计与使用</h2><h2 id="第六章-面向对象程序设计"><a href="#第六章-面向对象程序设计" class="headerlink" title="第六章 面向对象程序设计"></a>第六章 面向对象程序设计</h2><h2 id="第七章-文件操作"><a href="#第七章-文件操作" class="headerlink" title="第七章 文件操作"></a>第七章 文件操作</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python程序设计&quot;&gt;&lt;a href=&quot;#Python程序设计&quot; class=&quot;headerlink&quot; title=&quot;Python程序设计&quot;&gt;&lt;/a&gt;&lt;center&gt;Python程序设计&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;i&gt;本文章总结了董付国老师的P
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="目录" scheme="http://yoursite.com/categories/Python/%E7%9B%AE%E5%BD%95/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第十二届河南省ACM大学生程序设计竞赛赛后总结</title>
    <link href="http://yoursite.com/2019/05/09/ACM/Competition%20Summary/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E6%B2%B3%E5%8D%97%E7%9C%81ACM%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/09/ACM/Competition Summary/第十二届河南省ACM大学生程序设计竞赛赛后总结/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-05-09T05:23:38.475Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>第十二届河南省ACM大学生程序设计竞赛赛后总结</center></h3><br>&emsp;&emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体育馆里面举办的了。<br>&lt;/br&gt;<br>下面说一下这次比赛的题吧<br>&emsp;&emsp;先说总结：题很烂，连我们自己院赛题出的都不如，题目难度和知识点分配不均，题目数据频频出问题，幕后据说也有不知名交易。<p></p><h4 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h4><p>&emsp;&emsp;一道KMP裸题，但是暴力也能过</p><h4 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h4><p>&emsp;&emsp;动态规划</p><h4 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h4><p>&emsp;&emsp;也是一道字符串处理问题，等于找若干个子串的不同就行，暴力就过</p><h4 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h4><p>&emsp;&emsp;一道线性方程的水题，求若干个点相加之和。但是开场两小时之内基本所有队伍交上去全是TLE。1e5的复杂度怎可能会超时，提问说数据有没有问题得到回复没有，但是后来又重判两次……<br>&emsp;&emsp;赛后我们讨论题意还有问题，题目第一句话告诉我们十点已经会发车，但是过的没有算直接sort就过了，不知道算是题描述错还是数据太水……</p><h4 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h4><p>&emsp;&emsp;题目大意是描述找有向图中先升高再降低的路，直接转化为树即可</p><h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>&emsp;&emsp;骂街题目1号<br>&emsp;&emsp;大意是一个01的图中找11的数量，剩下的1算加1，正确做法二分图匹配，赛后被爆出POJ原题，链接：<a href="http://poj.org/problem?id=3020" target="_blank" rel="noopener"> POJ - 3020: http://poj.org/problem?id=3020 </a><br>结果大家死活做不出来，有很多队伍后来AC了，说是用的贪心直接过，但是贪心很明显不对，比如<br><code>111</code><br><code>100</code><br>贪心跑出来的答案会是3，但明显是2</p><h4 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h4><p>&emsp;&emsp;骂街题目2号<br>&emsp;&emsp;一道强连通分量的题，但是全场除了冠军队没一个能再做出来，讲题人始终坚持数据没问题，冠军队1发就AC，赛后讲题支支吾吾，唔…不做评价</p><h4 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h4><p>&emsp;&emsp;一道很简答的最短路变形问题，但是全场基本被DFG三道题给绊住，基本没人做</p><h4 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h4><p>&emsp;&emsp;你能听到赛后讲题人直接说这个题我们拿出来就是专门为了防AK的，这道题我们也不会做的话吗？？？</p><h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>&emsp;&emsp;一道二叉树的，很多人直接用树存值过的，但是这道题我觉得还是数据水了，因为2<sup>31</sup>的数据量…<br>&emsp;&emsp;这道题分析后会发现是先求出X的因子中有多少个2，即2<sup>n</sup>，然后输出<code>x-2^n+1 x+2^n-1</code>即可<br>&lt;/br&gt;&lt;/br&gt;<br>以上基本就是这次比赛的总结，大家往年都是吐槽数据弱，比如去年的一道最小费用流问题直接深搜就过…结果今年直接数据出错不说，还……<br>今年比赛已经导致cy等大佬上台怒怼了，如果河南省赛再这么下去…哎……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;center&gt;第十二届河南省ACM大学生程序设计竞赛赛后总结&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
