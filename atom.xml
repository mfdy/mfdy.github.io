<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mfdy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-12T15:36:45.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MFDY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020 CCPC-Wannafly Winter Camp 第一场训练赛 总结</title>
    <link href="http://yoursite.com/2020/01/12/ACM/Competition%20Summary/2020%20CCPC-Wannafly%20Winter%20Camp%20%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AE%AD%E7%BB%83%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/01/12/ACM/Competition Summary/2020 CCPC-Wannafly Winter Camp 第一场训练赛题解/</id>
    <published>2020-01-11T16:00:00.000Z</published>
    <updated>2020-01-12T15:36:45.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020-CCPC-Wannafly-Winter-Camp-第一场训练赛-总结"><a href="#2020-CCPC-Wannafly-Winter-Camp-第一场训练赛-总结" class="headerlink" title="2020 CCPC-Wannafly Winter Camp 第一场训练赛 总结"></a><center>2020 CCPC-Wannafly Winter Camp 第一场训练赛 总结</center></h1><hr><h3 id="B题-密码学"><a href="#B题-密码学" class="headerlink" title="B题 密码学"></a>B题 密码学</h3><p>签到题，就是一个字符串的计算，可耻的WA了一发是因为忘记了解码要倒着去解($i$ 从 $m$ 到 $0$)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="built_in">string</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dde</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str[k].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[k][i] &gt; <span class="string">'Z'</span>)</span><br><span class="line">            s[k][i] = str[k][i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s[k][i] = str[k][i] - <span class="string">'A'</span> + <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a[i], &amp;b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = a[i], y = b[i];</span><br><span class="line">        <span class="built_in">string</span> aa = str[x], bb = str[y];</span><br><span class="line">        <span class="keyword">while</span> (str[x].size() &lt; str[y].size())</span><br><span class="line">            str[x] = str[x] + str[x];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str[y].size(); j++) &#123;</span><br><span class="line">            dde(x), dde(y);</span><br><span class="line">            <span class="keyword">int</span> kkk = s[y][j] - s[x][j];</span><br><span class="line">            kkk = (kkk + <span class="number">52</span>) % <span class="number">52</span>;</span><br><span class="line">            <span class="keyword">if</span> (kkk &lt; <span class="number">26</span>)</span><br><span class="line">                bb[j] = kkk + <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                bb[j] = kkk - <span class="number">26</span> + <span class="string">'A'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str[x] = aa;</span><br><span class="line">        str[y] = bb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H题-最大公约数"><a href="#H题-最大公约数" class="headerlink" title="H题 最大公约数"></a>H题 最大公约数</h3><p>Java大数走起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package Main;</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BigInteger arr[] = <span class="keyword">new</span> BigInteger[<span class="number">505</span>];</span><br><span class="line">    <span class="function"><span class="keyword">static</span> BigInteger <span class="title">m</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(a + <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isP</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++) </span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr[<span class="number">1</span>] = BigInteger.ONE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isP(i)) </span><br><span class="line">                arr[i] = arr[i - <span class="number">1</span>].divide(arr[i - <span class="number">1</span>].gcd(m(i))).multiply(m(i));</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                arr[i] = arr[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">            BigInteger ans = arr[n / k].multiply(m(k));</span><br><span class="line">            System.out.println(ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F题-乘法"><a href="#F题-乘法" class="headerlink" title="F题 乘法"></a>F题 乘法</h3><p>题意：给出一个长度为 $n$ 的数列和一个长度为 $m$ 的数列, 可以构造得到一个 $n×m$ 的矩阵 $C$，其中 $C_{i,j}=A_{i}×B_{j}$,  给出整数 $K$，你需要求出 $C$ 中第 $K$ 大的数的值。($1≤n,m≤10^{5}$, $1≤K≤n×m$)</p><p>思路：二分的找，需要额外注意当数为负数和零时候的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll ef = <span class="number">1e12</span>;</span><br><span class="line">ll n, m, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; a, b;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">update_a</span><span class="params">(ll x, ll mid, ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x * b[m] &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> update_a(x, mid, m, r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> update_a(x, mid, l, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">update_b</span><span class="params">(ll x, ll mid, ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x * b[m] &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> update_b(x, mid, l, m);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> update_b(x, mid, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Binary_Search</span><span class="params">(ll l, ll r)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>)</span><br><span class="line">            ans += m - update_b(a[i], mid, <span class="number">0</span>, b.size());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans += update_a(a[i], mid, <span class="number">-1</span>, b.size() - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans &gt;= k)</span><br><span class="line">        <span class="keyword">return</span> Binary_Search(l, mid);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Binary_Search(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    k = n * m - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">        a.push_back(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">        b.push_back(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a.begin(), a.end());</span><br><span class="line">    sort(b.begin(), b.end());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Binary_Search(-ef, ef) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h3><h3 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2020-CCPC-Wannafly-Winter-Camp-第一场训练赛-总结&quot;&gt;&lt;a href=&quot;#2020-CCPC-Wannafly-Winter-Camp-第一场训练赛-总结&quot; class=&quot;headerlink&quot; title=&quot;2020 CCPC-Wa
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数位DP 石子合并 模板题</title>
    <link href="http://yoursite.com/2019/09/27/ACM/DP/Digital%20DP/%E6%95%B0%E4%BD%8DDP%20%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6%20%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
    <id>http://yoursite.com/2019/09/27/ACM/DP/Digital DP/数位DP 石子合并 模板题/</id>
    <published>2019-09-26T16:00:00.000Z</published>
    <updated>2019-09-27T03:22:14.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数位DP模板题-石子合并"><a href="#数位DP模板题-石子合并" class="headerlink" title="数位DP模板题 石子合并"></a><center>数位DP模板题 石子合并</center></h1><hr><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有n堆石子排成一排，每堆石子有一定的数量，将n堆石子合并成一堆。合并的规则是每次只能合并相邻的两堆石子，合并的花费为这两堆石子的总数，求最小花费。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>], s[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="number">0</span>;</span><br><span class="line">            s[i][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - len; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + len;</span><br><span class="line">                dp[i][j] = INF;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = s[i][j - <span class="number">1</span>]; k &lt;= s[i + <span class="number">1</span>][j]; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][k] + dp[k + <span class="number">1</span>][j] + sum[j] - sum[i <span class="number">-1</span>] &lt; dp[i][j]) &#123;</span><br><span class="line">                        dp[i][j] = dp[i][k] + dp[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">                        s[i][j] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数位DP模板题-石子合并&quot;&gt;&lt;a href=&quot;#数位DP模板题-石子合并&quot; class=&quot;headerlink&quot; title=&quot;数位DP模板题 石子合并&quot;&gt;&lt;/a&gt;&lt;center&gt;数位DP模板题 石子合并&lt;/center&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;题目&quot;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="数位DP" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>数位DP 回文序列 POJ-3280 Cheapest Palindrome</title>
    <link href="http://yoursite.com/2019/09/23/ACM/DP/Digital%20DP/%E6%95%B0%E4%BD%8DDP%20%E5%9B%9E%E6%96%87%E5%BA%8F%E5%88%97%20POJ-3280%20Cheapest%20Palindrome/"/>
    <id>http://yoursite.com/2019/09/23/ACM/DP/Digital DP/数位DP 回文序列 POJ-3280 Cheapest Palindrome/</id>
    <published>2019-09-22T16:00:00.000Z</published>
    <updated>2019-09-23T13:23:47.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cheapest-Palindrome"><a href="#Cheapest-Palindrome" class="headerlink" title="Cheapest Palindrome"></a><center>Cheapest Palindrome</center></h1><p align="right"><a href="http://poj.org/problem?id=3280" target="_blank" rel="noopener">[ POJ - 3280 ]</a></p>  <hr><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>给定字符串s，长度为m，由n个小写字母组成。在s的任意位置增删字母，把它变成回文串，增删特定字母的花费不同，求最小花费</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>定义状态dp[i][j]表示字符串s的子区间s[i, j]变成回文的最小花费</p><p>那么每次有三种情况:</p><ol><li>如果s[i] == s[j], 那么dp[i][j] = dp[i + 1][j - 1]。</li><li>如果dp[i + 1][j]是回文串, 那么dp[i][j] = dp[i + 1][j] + w[i]。</li><li>如果dp[i][j - 1]是回文串, 那么dp[i][j] = dp[i][j - 1] + w[j]。</li></ol><p>2, 3情况的状态转移方程就是dp[i][j] = min(dp[i + 1][j] + w[i], dp[i][j - 1] + w[j])</p><h3 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[<span class="number">30</span>], dp[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2010</span>], ch;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            w[ch - <span class="string">'a'</span>] = min(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;      <span class="comment">// i是子区间的起点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; m; j++) &#123;   <span class="comment">// j是子区间的终点</span></span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j])</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = min(dp[i + <span class="number">1</span>][j] + w[s[i] - <span class="string">'a'</span>], dp[i][j - <span class="number">1</span>] + w[s[j] - <span class="string">'a'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][m - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cheapest-Palindrome&quot;&gt;&lt;a href=&quot;#Cheapest-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;Cheapest Palindrome&quot;&gt;&lt;/a&gt;&lt;center&gt;Cheapest Palindrome&lt;/
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="数位DP" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火 HDU - 2899 Strange Function</title>
    <link href="http://yoursite.com/2019/09/22/ACM/Thinking/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%20HDU%20-%202899%20Strange%20Function/"/>
    <id>http://yoursite.com/2019/09/22/ACM/Thinking/模拟退火 HDU - 2899 Strange Function/</id>
    <published>2019-09-21T16:00:00.000Z</published>
    <updated>2019-09-23T02:26:59.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Strange-Function"><a href="#Strange-Function" class="headerlink" title="Strange Function"></a><h1><center>Strange Function</center></h1></h2><h2 id="HDU-2899"><a href="#HDU-2899" class="headerlink" title="[ HDU - 2899 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2899" target="_blank" rel="noopener">[ HDU - 2899 ]</a></p>  </h2><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>函数 F(x) = 6x<sup>7</sup> + 8x<sup>6</sup> + 7x<sup>3</sup> + 5x<sup>2</sup> - yx, 其中x的范围是0 ≤ x ≤ 100.<br>输入y值，输出F(x)的最小值</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>模拟退火就是类似于物体降温的概率，来进行多次搜索迭代</p><p>在迭代过程中，模拟退火算法随机选择下一个状态，有两种可能</p><ol><li>新状态比原来状态更优，那么接受这个新状态</li><li>新状态更差，那么以一定的概率接受该状态，不过这个概率应该随着时间的推移逐渐降低</li></ol><h4 id="模拟退火算法的主要步骤如下："><a href="#模拟退火算法的主要步骤如下：" class="headerlink" title="模拟退火算法的主要步骤如下："></a>模拟退火算法的主要步骤如下：</h4><ol><li>设置一个初始的温度T</li><li>温度下降，状态转移。从当前温度按降温系数下降到下一个温度，在新的温度计算当前状态</li><li>如果温度降到设定的温度下界，程序停止</li></ol><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eps = <span class="number">1e-8</span>;              <span class="comment">// 终止温度，接近0，用于控制精度</span></span><br><span class="line">T = <span class="number">100</span>;                 <span class="comment">// 初始温度，应该是高温，以100℃为例</span></span><br><span class="line">delta = <span class="number">0.98</span>;            <span class="comment">// 降温系数，控制退火的快慢，小于1，以0.98为例</span></span><br><span class="line">g(x);                    <span class="comment">// 状态x时的评价函数，例如物理意义上的能量</span></span><br><span class="line">now, next;               <span class="comment">// 当前状态和新状态</span></span><br><span class="line"><span class="keyword">while</span> (T &gt; eps) &#123;                   <span class="comment">// 如果温度未降到eps</span></span><br><span class="line">    g(next), g(now);                <span class="comment">// 计算能量</span></span><br><span class="line">    dE = g(next) - g(now);          <span class="comment">// 能量差</span></span><br><span class="line">    <span class="keyword">if</span> (dE &gt;= <span class="number">0</span>)                    <span class="comment">// 新状态更优， 接受新状态</span></span><br><span class="line">        now = next;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span>(dE / T) &gt; rand())  <span class="comment">// 如果新状态更差，在一定概率下接受他，e^(dE/T)</span></span><br><span class="line">        now = next;</span><br><span class="line">    T *= delta;                     <span class="comment">// 降温，退火过程模拟</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>模拟退火算法在ACM中的典型问题有函数最值问题、TSP旅行商问题、最小圆覆盖、最小球覆盖等</p><h3 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;    <span class="comment">// 终止温度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> y;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> x)</span>   <span class="comment">// 计算函数值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span> * <span class="built_in">pow</span>(x, <span class="number">7.0</span>) + <span class="number">8</span> * <span class="built_in">pow</span>(x, <span class="number">6.0</span>) + <span class="number">7</span> * <span class="built_in">pow</span>(x, <span class="number">3.0</span>) + <span class="number">5</span> * <span class="built_in">pow</span>(x, <span class="number">2.0</span>) - y * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> T = <span class="number">100</span>;         <span class="comment">// 初始温度</span></span><br><span class="line">    <span class="keyword">double</span> delta = <span class="number">0.98</span>;    <span class="comment">// 降温系数</span></span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">50.0</span>;        <span class="comment">// x的初始值</span></span><br><span class="line">    <span class="keyword">double</span> now = func(x);   <span class="comment">// 计算初始函数值</span></span><br><span class="line">    <span class="keyword">double</span> ans = now;       <span class="comment">// 返回值</span></span><br><span class="line">    <span class="keyword">while</span> (T &gt; eps) &#123;</span><br><span class="line">        <span class="keyword">int</span> f[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> newx = x + f[rand() % <span class="number">2</span>] * T;    <span class="comment">// 按概率改变x，随t的降温而减少</span></span><br><span class="line">        <span class="keyword">if</span> (newx &gt;= <span class="number">0</span> &amp;&amp; newx &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> next = func(newx);</span><br><span class="line">            ans = min(ans, next);</span><br><span class="line">            <span class="keyword">if</span> (now - next &gt; eps) &#123;</span><br><span class="line">                x = newx;</span><br><span class="line">                now = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        T *= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cas);</span><br><span class="line">    <span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Strange-Function&quot;&gt;&lt;a href=&quot;#Strange-Function&quot; class=&quot;headerlink&quot; title=&quot;Strange Function&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Strange Function&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/categories/ACM/Thinking/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/categories/ACM/Thinking/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/tags/Thinking/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>bitset HDU6515 Coding Problem</title>
    <link href="http://yoursite.com/2019/09/18/ACM/STL/bitset%20HDU6515%20Coding%20Problem/"/>
    <id>http://yoursite.com/2019/09/18/ACM/STL/bitset HDU6515 Coding Problem/</id>
    <published>2019-09-17T16:00:00.000Z</published>
    <updated>2019-09-18T12:25:02.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Coding-Problem"><a href="#Coding-Problem" class="headerlink" title="Coding Problem"></a><h1><center>Coding Problem</center></h1></h2><h2 id="HDU-6515"><a href="#HDU-6515" class="headerlink" title="[ HDU - 6515 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6515" target="_blank" rel="noopener">[ HDU - 6515 ]</a></p>  </h2><p>题目大意：给你一个字符串，每个字母的ASCII二级制颠倒过来组成一个01数组。<br>然后这个数组每六位组成一个数字的ASCII输出</p><p>一道模拟题，使用C++中的bitset类型会简单的很多</p><p>那么正好来学习一下bitset的用法：</p><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><p>此处参考了这份博客：<a href="https://www.cnblogs.com/magisk/p/8809922.html" target="_blank" rel="noopener">https://www.cnblogs.com/magisk/p/8809922.html</a></p><p>bitset大概就是一个二进制数组，每个位置只占1bit，想一下状压dp？</p><p>bitset的原理大概是将很多数压成一个，从而节省空间和时间（暴力出奇迹）</p><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>构造时可以直接指定大小，也可以使用string和字符串数组来进行构造<br>需要注意的是，在使用字符串构造时，字符串中只能包含01，否则会抛出异常</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;4&gt; bitset1;　　<span class="comment">//无参构造，长度为４，默认每一位为０</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt; bitset2(<span class="number">12</span>);　　<span class="comment">//长度为８，二进制保存，前面用０补充</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"100101"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;10&gt; bitset3(s);　　<span class="comment">//长度为10，前面用０补充</span></span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"10101"</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;13&gt; bitset4(s2);　　<span class="comment">//长度为13，前面用０补充</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset1 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0000</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset2 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//00001100</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset3 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0000100101</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset4 &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0000000010101</span></span><br></pre></td></tr></table></figure><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>它支持所有的位运算操作：<code>^</code> <code>&amp;</code> <code>|</code> <code>&gt;&gt;</code> 等</p><h4 id="bitset的函数"><a href="#bitset的函数" class="headerlink" title="bitset的函数"></a>bitset的函数</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bit</span>.<span class="built_in">size</span>()       返回大小（位数）</span><br><span class="line"><span class="built_in">bit</span>.count()     返回<span class="number">1</span>的个数</span><br><span class="line"><span class="built_in">bit</span>.any()       返回是否有<span class="number">1</span></span><br><span class="line"><span class="built_in">bit</span>.none()      返回是否没有<span class="number">1</span></span><br><span class="line"><span class="built_in">bit</span>.set()       全都变成<span class="number">1</span></span><br><span class="line"><span class="built_in">bit</span>.set(p)      将第p + <span class="number">1</span>位变成<span class="number">1</span>（bitset是从第<span class="number">0</span>位开始的！）</span><br><span class="line"><span class="built_in">bit</span>.set(p, x)   将第p + <span class="number">1</span>位变成x</span><br><span class="line"><span class="built_in">bit</span>.reset()     全都变成<span class="number">0</span></span><br><span class="line"><span class="built_in">bit</span>.reset(p)    将第p + <span class="number">1</span>位变成<span class="number">0</span></span><br><span class="line"><span class="built_in">bit</span>.flip()      全都取反</span><br><span class="line"><span class="built_in">bit</span>.flip(p)     将第p + <span class="number">1</span>位取反</span><br><span class="line"><span class="built_in">bit</span>.to_ulong()  返回它转换为<span class="keyword">unsigned</span> <span class="keyword">long</span>的结果，如果超出范围则报错</span><br><span class="line"><span class="built_in">bit</span>.to_ullong() 返回它转换为<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>的结果，如果超出范围则报错</span><br><span class="line"><span class="built_in">bit</span>.to_string() 返回它转换为<span class="keyword">string</span>的结果</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>需要注意的坑点是这道题不能有换行符，行尾有空格</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;8&gt; b((<span class="keyword">int</span>)c);</span><br><span class="line">    <span class="built_in">stringstream</span> str;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    str &lt;&lt; b;</span><br><span class="line">    str &gt;&gt; s;</span><br><span class="line">    reverse(s.begin(), s.end());</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i+= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">string</span> ts = change(s[i]) + change(s[i + <span class="number">1</span>]) + change(s[i + <span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ts.size(); j+= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">bitset</span>&lt;6&gt; B(ts, j, <span class="number">6</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Coding-Problem&quot;&gt;&lt;a href=&quot;#Coding-Problem&quot; class=&quot;headerlink&quot; title=&quot;Coding Problem&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Coding Problem&lt;/center&gt;&lt;/h1&gt;&lt;/h2
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="STL" scheme="http://yoursite.com/categories/ACM/STL/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>二维前缀和+差分 HDU6514 Monitor</title>
    <link href="http://yoursite.com/2019/09/18/ACM/Thinking/%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C+%E5%B7%AE%E5%88%86%20HDU6514%20Monitor/"/>
    <id>http://yoursite.com/2019/09/18/ACM/Thinking/二维前缀和+差分 HDU6514 Monitor/</id>
    <published>2019-09-17T16:00:00.000Z</published>
    <updated>2019-09-18T12:24:59.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a><h1><center>Monitor</center></h1></h2><h2 id="HDU-6514"><a href="#HDU-6514" class="headerlink" title="[ HDU - 6514 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6514" target="_blank" rel="noopener">[ HDU - 6514 ]</a></p>  </h2><p>题目大意：给你个n×m的区域，每个区域被选中标记为1，没被选中标记为0，然后给一些标记的区域，查询若干个区域问是否有0的</p><p>一道二维前缀和的题目，想通没什么难度</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout freopen(<span class="meta-string">"out.txt"</span>, <span class="meta-string">"w"</span>, stdout)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, p, q;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span> || i &gt; n || j &gt; m)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (i - <span class="number">1</span>) * m + j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = getid(i, j);</span><br><span class="line">    <span class="keyword">if</span> (!id)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    a[id] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            add(x1, y1, <span class="number">1</span>);</span><br><span class="line">            add(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            add(x1, y2 + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            add(x2 + <span class="number">1</span>, y1, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                a[getid(i, j)] += a[getid(i - <span class="number">1</span>, j)] + a[getid(i, j - <span class="number">1</span>)] - a[getid(i - <span class="number">1</span>, j - <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="keyword">if</span> (a[getid(i,j)] &gt; <span class="number">0</span>)</span><br><span class="line">                    a[getid(i, j)] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                a[getid(i, j)] += a[getid(i - <span class="number">1</span>, j)] + a[getid(i, j - <span class="number">1</span>)] - a[getid(i - <span class="number">1</span>, j - <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            <span class="keyword">int</span> ans = a[getid(x2, y2)] - a[getid(x1 - <span class="number">1</span>, y2)] - a[getid(x2, y1 - <span class="number">1</span>)] + a[getid(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>)];</span><br><span class="line">            <span class="keyword">if</span> (ans == (x2 - x1 + <span class="number">1</span>) * (y2 - y1 + <span class="number">1</span>))</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Monitor&quot;&gt;&lt;a href=&quot;#Monitor&quot; class=&quot;headerlink&quot; title=&quot;Monitor&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Monitor&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-6514&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/categories/ACM/Thinking/"/>
    
      <category term="前缀和" scheme="http://yoursite.com/categories/ACM/Thinking/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Thinking" scheme="http://yoursite.com/tags/Thinking/"/>
    
      <category term="前缀和" scheme="http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 POJ2482 Stars in Your Windows</title>
    <link href="http://yoursite.com/2019/08/06/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20POJ2482%20Stars%20in%20Your%20Windows/"/>
    <id>http://yoursite.com/2019/08/06/ACM/Data Structure/Segment Tree/线段树+扫描线 POJ2482 Stars in Your Windows/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-09-19T12:51:57.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stars-in-Your-Windows"><a href="#Stars-in-Your-Windows" class="headerlink" title="Stars in Your Windows"></a><h1><center>Stars in Your Windows</center></h1></h2><h2 id="POJ-2482"><a href="#POJ-2482" class="headerlink" title="[ POJ - 2482 ]  "></a><p align="right"><a href="http://poj.org/problem?id=2482" target="_blank" rel="noopener">[ POJ - 2482 ]</a></p>  </h2><p>题目大意：给出n个星星的坐标，每个星星有一个亮度，给出一个矩形的长和宽，问矩形能包括的星星的最大亮度和</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LL lx,rx,y,s;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(LL a,LL b,LL c,LL d):lx(a),rx(b),y(c),s(d)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;S)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y==S.y)</span><br><span class="line">        <span class="keyword">return</span> s&gt;S.s;</span><br><span class="line">        <span class="keyword">return</span> y&lt;S.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;te[N];</span><br><span class="line"><span class="keyword">int</span> sum[N&lt;&lt;<span class="number">2</span>],cov[N&lt;&lt;<span class="number">2</span>],que[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin</span><span class="params">(LL x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,e = n,m;</span><br><span class="line">    <span class="keyword">while</span>(s&lt;=e)</span><br><span class="line">    &#123;</span><br><span class="line">        m = (s+e)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(que[m]==x)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(que[m]&gt;x)</span><br><span class="line">        e = m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        s = m+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cov[w])</span><br><span class="line">    &#123;</span><br><span class="line">        cov[w&lt;&lt;<span class="number">1</span>] += cov[w];</span><br><span class="line">        cov[w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += cov[w];</span><br><span class="line">        sum[w&lt;&lt;<span class="number">1</span>] += cov[w];</span><br><span class="line">        sum[w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += cov[w];</span><br><span class="line">        cov[w] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[w] = max(sum[w&lt;&lt;<span class="number">1</span>],sum[w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> d,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=l&amp;&amp;b&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[w]+=d;</span><br><span class="line">        cov[w]+=d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(w);</span><br><span class="line">    <span class="keyword">int</span> m = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=m)</span><br><span class="line">    update(a,b,d,l,m,w&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(b&gt;m)</span><br><span class="line">    update(a,b,d,m+<span class="number">1</span>,r,w&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,k,n;</span><br><span class="line">    LL w,h,x,y,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;w&gt;&gt;h)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        w--;h--;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v;</span><br><span class="line">            que[num] = x;</span><br><span class="line">            te[num++] = node(x,x+w,y,v);</span><br><span class="line">            que[num] = x+w;</span><br><span class="line">            te[num++] = node(x,x+w,y+h,-v);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(que,que+num);</span><br><span class="line">        sort(te,te+num);</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span> ; i &lt; num ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(que[i]!=que[i<span class="number">-1</span>])</span><br><span class="line">            que[k++] = que[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; num ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = bin(te[i].lx,k<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">int</span> r = bin(te[i].rx,k<span class="number">-1</span>);</span><br><span class="line">            update(l,r,te[i].s,<span class="number">0</span>,k<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            maxz = max(maxz,sum[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxz &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Stars-in-Your-Windows&quot;&gt;&lt;a href=&quot;#Stars-in-Your-Windows&quot; class=&quot;headerlink&quot; title=&quot;Stars in Your Windows&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Stars in Yo
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU1542 覆盖的面积</title>
    <link href="http://yoursite.com/2019/08/04/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU1255%20%E8%A6%86%E7%9B%96%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/08/04/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU1255 覆盖的面积/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-19T12:47:07.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="覆盖的面积"><a href="#覆盖的面积" class="headerlink" title="覆盖的面积"></a><h1><center>覆盖的面积</center></h1></h2><h2 id="HDU-1255"><a href="#HDU-1255" class="headerlink" title="[ HDU - 1255 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1255" target="_blank" rel="noopener">[ HDU - 1255 ]</a></p>  </h2><p>题目大意：给你n个矩形的左下角坐标和右上角坐标，求矩形相交至少覆盖两次以上的面积。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dif_x[maxn]; <span class="comment">//记录不同的x坐标</span></span><br><span class="line"><span class="keyword">int</span> n, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x1, x2, y;</span><br><span class="line">    <span class="keyword">int</span> flag; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> h, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        x1 = l, x2 = r, y = h, flag = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;line[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, cnt;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">    <span class="keyword">double</span> len2;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[id].l = l;</span><br><span class="line">    tree[id].r = r;</span><br><span class="line">    tree[id].cnt = <span class="number">0</span>;</span><br><span class="line">    tree[id].len = <span class="number">0</span>;</span><br><span class="line">    tree[id].len2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[id].cnt) <span class="comment">//如果该段被覆盖那么就直接由dif_x数组获得长度</span></span><br><span class="line">        tree[id].len = dif_x[tree[id].r + <span class="number">1</span>] - dif_x[tree[id].l]; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tree[id].l == tree[id].r)</span><br><span class="line">        tree[id].len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>              <span class="comment">//如果没有被覆盖，那么应该是由左右孩子的和</span></span><br><span class="line">        tree[id].len = tree[id &lt;&lt; <span class="number">1</span>].len + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (tree[id].cnt &gt;= <span class="number">2</span>)</span><br><span class="line">        tree[id].len2 = dif_x[tree[id].r + <span class="number">1</span>] - dif_x[tree[id].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tree[id].l == tree[id].r)</span><br><span class="line">        tree[id].len2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tree[id].cnt == <span class="number">1</span>)</span><br><span class="line">        tree[id].len2 = tree[id &lt;&lt; <span class="number">1</span>].len + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tree[id].len2 = tree[id &lt;&lt; <span class="number">1</span>].len2 + tree[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[id].l == l &amp;&amp; tree[id].r == r) &#123;</span><br><span class="line">        tree[id].cnt += v;</span><br><span class="line">        getlen(id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    getlen(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> line_num = <span class="number">0</span>; <span class="comment">//一共有多少条横线</span></span><br><span class="line">        <span class="keyword">double</span> x1, y11, x2, y2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;x1, &amp;y11, &amp;x2, &amp;y2);</span><br><span class="line">            line[line_num].init(x1, x2, y11, <span class="number">1</span>);</span><br><span class="line">            dif_x[line_num++] = x1;</span><br><span class="line">            line[line_num].init(x1, x2, y2, <span class="number">-1</span>);</span><br><span class="line">            dif_x[line_num++] = x2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(line, line + line_num);</span><br><span class="line">        sort(dif_x, dif_x + line_num);  <span class="comment">//对dif_x去重，要先排个序，这样更方便</span></span><br><span class="line">        <span class="keyword">int</span> dif_x_num = unique(dif_x, dif_x + line_num) - dif_x; <span class="comment">//dif_x_num表示去重后不同的x坐标的数量</span></span><br><span class="line">        build_tree(<span class="number">1</span>, <span class="number">0</span>, dif_x_num - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0.00</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line_num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ll = lower_bound(dif_x, dif_x + dif_x_num, line[i].x1) - dif_x;</span><br><span class="line">            <span class="keyword">int</span> rr = lower_bound(dif_x, dif_x + dif_x_num, line[i].x2) - dif_x - <span class="number">1</span>;</span><br><span class="line">            update(<span class="number">1</span>, ll, rr, line[i].flag);</span><br><span class="line">            ans += tree[<span class="number">1</span>].len2 * (line[i + <span class="number">1</span>].y - line[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans + <span class="number">0.000001</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;覆盖的面积&quot;&gt;&lt;a href=&quot;#覆盖的面积&quot; class=&quot;headerlink&quot; title=&quot;覆盖的面积&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;覆盖的面积&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-1255&quot;&gt;&lt;a href=&quot;#HDU-125
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU1542 Picture</title>
    <link href="http://yoursite.com/2019/08/04/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU1828%20Picture/"/>
    <id>http://yoursite.com/2019/08/04/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU1828 Picture/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-19T12:46:44.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a><h1><center>Picture</center></h1></h2><h2 id="HDU-1828"><a href="#HDU-1828" class="headerlink" title="[ HDU - 1828 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542" target="_blank" rel="noopener">[ HDU - 1828 ]</a></p>  </h2><p>题目大意：给你n个矩形的左下角坐标和右上角坐标，求外周长。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>扫描线 + 离散化板子</p><p>将横竖两次扫描简化</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">80010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">1</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        d = d * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w * d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, cnt;</span><br><span class="line">    <span class="keyword">int</span> lc, rc;</span><br><span class="line">    <span class="keyword">int</span> len, num;</span><br><span class="line">&#125; tree[maxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1, x2, y, flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> h, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        x1 = l, x2 = r, y = h, flag = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; a) &#123;</span><br><span class="line">        <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; line[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, x1, y11, x2, y2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[id].l = l;</span><br><span class="line">    tree[id].r = r;</span><br><span class="line">    tree[id].cnt = <span class="number">0</span>;</span><br><span class="line">    tree[id].len = <span class="number">0</span>;</span><br><span class="line">    tree[id].lc = <span class="number">0</span>;</span><br><span class="line">    tree[id].rc = <span class="number">0</span>;</span><br><span class="line">    tree[id].num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[i].cnt) &#123;</span><br><span class="line">        tree[i].len = tree[i].r - tree[i].l + <span class="number">1</span>;</span><br><span class="line">        tree[i].lc = tree[i].rc = <span class="number">1</span>;</span><br><span class="line">        tree[i].num = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tree[i].l == tree[i].r) &#123;</span><br><span class="line">        tree[i].len = <span class="number">0</span>;</span><br><span class="line">        tree[i].lc = tree[i].rc = <span class="number">0</span>;</span><br><span class="line">        tree[i].num = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tree[i].len = tree[i &lt;&lt; <span class="number">1</span>].len + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">        tree[i].lc = tree[i &lt;&lt; <span class="number">1</span>].lc;</span><br><span class="line">        tree[i].rc = tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rc;</span><br><span class="line">        tree[i].num = tree[i &lt;&lt; <span class="number">1</span>].num + tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].num - (tree[i &lt;&lt; <span class="number">1</span>].rc &amp; tree[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[id].l == l &amp;&amp; tree[id].r == r) &#123;</span><br><span class="line">        tree[id].cnt += v;</span><br><span class="line">        getlen(id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    getlen(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">int</span> minn = INF, maxx = -INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            x1 = read(), y11 = read(), x2 = read(), y2 = read();</span><br><span class="line">            maxx = max(maxx, max(x1, x2));</span><br><span class="line">            minn = min(minn, min(x1, x2));</span><br><span class="line">            line[i].init(x1, x2, y11, <span class="number">1</span>);</span><br><span class="line">            line[i + n].init(x1, x2, y2, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line, line + <span class="number">2</span> * n);</span><br><span class="line"></span><br><span class="line">        build_tree(<span class="number">1</span>, minn, maxx - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">            update(<span class="number">1</span>, line[i].x1, line[i].x2 - <span class="number">1</span>, line[i].flag);</span><br><span class="line">            ans += <span class="built_in">abs</span>(tree[<span class="number">1</span>].len - last);</span><br><span class="line">            ans += (line[i + <span class="number">1</span>].y - line[i].y) * tree[<span class="number">1</span>].num * <span class="number">2</span>;</span><br><span class="line">            last = tree[<span class="number">1</span>].len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Picture&quot;&gt;&lt;a href=&quot;#Picture&quot; class=&quot;headerlink&quot; title=&quot;Picture&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Picture&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-1828&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU3642 Get The Treasury</title>
    <link href="http://yoursite.com/2019/08/04/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU3642%20Get%20The%20Treasury/"/>
    <id>http://yoursite.com/2019/08/04/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU3642 Get The Treasury/</id>
    <published>2019-08-03T16:00:00.000Z</published>
    <updated>2019-09-19T12:49:44.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Get-The-Treasury"><a href="#Get-The-Treasury" class="headerlink" title="Get The Treasury"></a><h1><center>Get The Treasury</center></h1></h2><h2 id="HDU-3642"><a href="#HDU-3642" class="headerlink" title="[ HDU - 3642 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3642" target="_blank" rel="noopener">[ HDU - 3642 ]</a></p>  </h2><p>题目大意：给你n个立方体的左下角坐标和右上角坐标，求立方体相交至少相交的面积。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>将Z轴离散化，把面积当作二维的底和高</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lf,rf;<span class="comment">//实际的左右端点</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> once,twice,more;</span><br><span class="line">&#125;segTree[MAXN*<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> y[MAXN];</span><br><span class="line"><span class="keyword">int</span> z[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y1,y2;</span><br><span class="line">    <span class="keyword">int</span> z1,z2;<span class="comment">//这两个是枚举的时候判断使用的</span></span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">&#125;line[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Line a,Line b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    segTree[i].l=l;</span><br><span class="line">    segTree[i].r=r;</span><br><span class="line">    segTree[i].lf=y[l];</span><br><span class="line">    segTree[i].rf=y[r];</span><br><span class="line">    segTree[i].c=<span class="number">0</span>;</span><br><span class="line">    segTree[i].once=segTree[i].twice=segTree[i].more=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(r==l+<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    Build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    Build((i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(segTree[i].c&gt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        segTree[i].more=segTree[i].rf-segTree[i].lf;</span><br><span class="line">        segTree[i].once=segTree[i].twice=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(segTree[i].c==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(segTree[i].l+<span class="number">1</span>==segTree[i].r)<span class="comment">//叶子结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            segTree[i].more=<span class="number">0</span>;</span><br><span class="line">            segTree[i].twice=segTree[i].rf-segTree[i].lf;</span><br><span class="line">            segTree[i].once=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        segTree[i].more=segTree[i&lt;&lt;<span class="number">1</span>].once+segTree[i&lt;&lt;<span class="number">1</span>].twice+segTree[i&lt;&lt;<span class="number">1</span>].more</span><br><span class="line">                       +segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].once+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].twice+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].more;</span><br><span class="line">        segTree[i].twice=segTree[i].rf-segTree[i].lf-segTree[i].more;</span><br><span class="line">        segTree[i].once=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(segTree[i].c==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(segTree[i].l+<span class="number">1</span>==segTree[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            segTree[i].more=<span class="number">0</span>;</span><br><span class="line">            segTree[i].twice=<span class="number">0</span>;</span><br><span class="line">            segTree[i].once=segTree[i].rf-segTree[i].lf;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        segTree[i].more=segTree[i&lt;&lt;<span class="number">1</span>].more+segTree[i&lt;&lt;<span class="number">1</span>].twice</span><br><span class="line">                    +segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].more+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].twice;</span><br><span class="line">        segTree[i].twice=segTree[i&lt;&lt;<span class="number">1</span>].once+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].once;</span><br><span class="line">        segTree[i].once=segTree[i].rf-segTree[i].lf-segTree[i].more-segTree[i].twice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(segTree[i].l+<span class="number">1</span>==segTree[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            segTree[i].more=segTree[i].once=segTree[i].twice=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        segTree[i].more=segTree[i&lt;&lt;<span class="number">1</span>].more+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].more;</span><br><span class="line">        segTree[i].twice=segTree[i&lt;&lt;<span class="number">1</span>].twice+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].twice;</span><br><span class="line">        segTree[i].once=segTree[i&lt;&lt;<span class="number">1</span>].once+segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].once;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,Line e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(segTree[i].lf&gt;=e.y1 &amp;&amp; segTree[i].rf&lt;=e.y2)</span><br><span class="line">    &#123;</span><br><span class="line">        segTree[i].c+=e.f;</span><br><span class="line">        push_up(i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(e.y2&lt;=segTree[i&lt;&lt;<span class="number">1</span>].rf) update(i&lt;&lt;<span class="number">1</span>,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.y1&gt;=segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].lf) update((i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,e);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Line temp=e;</span><br><span class="line">        temp.y2=segTree[i&lt;&lt;<span class="number">1</span>].rf;</span><br><span class="line">        update(i&lt;&lt;<span class="number">1</span>,temp);</span><br><span class="line">        temp=e;</span><br><span class="line">        temp.y1=segTree[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].lf;</span><br><span class="line">        update((i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    push_up(i);</span><br><span class="line">&#125;</span><br><span class="line">Line temp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> x1,y1,z1,x2,y2,z2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">int</span> iCase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        iCase++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;x1, &amp;y1, &amp;z1, &amp;x2, &amp;y2, &amp;z2);</span><br><span class="line">            line[t].x=x1;</span><br><span class="line">            line[t].y1=y1;</span><br><span class="line">            line[t].y2=y2;</span><br><span class="line">            line[t].z1=z1;</span><br><span class="line">            line[t].z2=z2;</span><br><span class="line">            line[t].f=<span class="number">1</span>;</span><br><span class="line">            y[t]=y1;</span><br><span class="line">            z[t++]=z1;</span><br><span class="line"></span><br><span class="line">            line[t].x=x2;</span><br><span class="line">            line[t].y1=y1;</span><br><span class="line">            line[t].y2=y2;</span><br><span class="line">            line[t].z1=z1;</span><br><span class="line">            line[t].z2=z2;</span><br><span class="line">            line[t].f=<span class="number">-1</span>;</span><br><span class="line">            y[t]=y2;</span><br><span class="line">            z[t++]=z2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line,line+t,cmp);</span><br><span class="line">        sort(y,y+t);</span><br><span class="line">        <span class="keyword">int</span> t1=unique(y,y+t)-y;</span><br><span class="line">        Build(<span class="number">1</span>,<span class="number">0</span>,t1<span class="number">-1</span>);</span><br><span class="line">        sort(z,z+t);</span><br><span class="line">        <span class="keyword">int</span> t2=unique(z,z+t)-z;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> area=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t2<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t;j++)</span><br><span class="line">              <span class="keyword">if</span>(line[j].z1&lt;=z[i]&amp;&amp;line[j].z2&gt;z[i])</span><br><span class="line">                 temp[m++]=line[j];</span><br><span class="line">            area=<span class="number">0</span>;</span><br><span class="line">            update(<span class="number">1</span>,temp[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                area+=(<span class="keyword">long</span> <span class="keyword">long</span>)segTree[<span class="number">1</span>].more*(temp[j].x-temp[j<span class="number">-1</span>].x);</span><br><span class="line">                update(<span class="number">1</span>,temp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=area*(z[i+<span class="number">1</span>]-z[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %I64d\n"</span>,iCase,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Get-The-Treasury&quot;&gt;&lt;a href=&quot;#Get-The-Treasury&quot; class=&quot;headerlink&quot; title=&quot;Get The Treasury&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Get The Treasury&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>线段树+扫描线 HDU1542 Atlantis</title>
    <link href="http://yoursite.com/2019/08/02/ACM/Data%20Structure/Segment%20Tree/%E7%BA%BF%E6%AE%B5%E6%A0%91+%E6%89%AB%E6%8F%8F%E7%BA%BF%20HDU1542%20Atlantis/"/>
    <id>http://yoursite.com/2019/08/02/ACM/Data Structure/Segment Tree/线段树+扫描线 HDU1542 Atlantis/</id>
    <published>2019-08-01T16:00:00.000Z</published>
    <updated>2019-09-19T12:41:56.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Atlantis"><a href="#Atlantis" class="headerlink" title="Atlantis"></a><h1><center>Atlantis</center></h1></h2><h2 id="HDU-1542"><a href="#HDU-1542" class="headerlink" title="[ HDU - 1542 ]  "></a><p align="right"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1542" target="_blank" rel="noopener">[ HDU - 1542 ]</a></p>  </h2><p>题目大意：给你n个矩形的左下角坐标和右上角坐标，求矩形相交的面积。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>扫描线 + 离散化板子</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dif_x[<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x1,x2,y;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r, <span class="keyword">double</span> h, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        x1 = l; x2 = r; y = h; flag = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;line[<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, cnt;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">&#125;tree[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[id].l = l;</span><br><span class="line">    tree[id].r = r;</span><br><span class="line">    tree[id].cnt = <span class="number">0</span>;</span><br><span class="line">    tree[id].len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    build_tree((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[id].cnt &gt;= <span class="number">1</span>) </span><br><span class="line">        tree[id].len = dif_x[tree[id].r+<span class="number">1</span>] - dif_x[tree[id].l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tree[id].len = tree[id&lt;&lt;<span class="number">1</span>].len + tree[(id&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[id].l==l &amp;&amp; tree[id].r==r) &#123;</span><br><span class="line">        tree[id].cnt += v;</span><br><span class="line">        getlen(id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[id].l + tree[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>,l,r,v);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)</span><br><span class="line">        update((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        update(id &lt;&lt; <span class="number">1</span>, l, mid, v);</span><br><span class="line">        update((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    getlen(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySearch</span><span class="params">(<span class="keyword">double</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(dif_x[mid] == p)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(dif_x[mid] &lt; p)</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, noc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        noc++;</span><br><span class="line">        <span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="keyword">int</span> line_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            line[line_num].init(x1, x2, y1, <span class="number">1</span>);</span><br><span class="line">            dif_x[line_num++] = x1;</span><br><span class="line">            line[line_num].init(x1, x2, y2, <span class="number">-1</span>);</span><br><span class="line">            dif_x[line_num++] = x2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(line, line + line_num, cmp);</span><br><span class="line">        sort(dif_x, dif_x + line_num);</span><br><span class="line">        <span class="keyword">int</span> dif_x_num = unique(dif_x, dif_x + line_num) - dif_x;</span><br><span class="line">        build_tree(<span class="number">1</span>, <span class="number">0</span>, dif_x_num - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line_num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> line_l = mySearch(line[i].x1, <span class="number">0</span>, dif_x_num - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> line_r = mySearch(line[i].x2, <span class="number">0</span>, dif_x_num<span class="number">-1</span>) - <span class="number">1</span>;</span><br><span class="line">            update(<span class="number">1</span>, line_l, line_r, line[i].flag);</span><br><span class="line">            ans += tree[<span class="number">1</span>].len * (line[i+<span class="number">1</span>].y - line[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, noc);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2lf\n\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Atlantis&quot;&gt;&lt;a href=&quot;#Atlantis&quot; class=&quot;headerlink&quot; title=&quot;Atlantis&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Atlantis&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;HDU-1542&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>树状数组 POJ2155 Matrix</title>
    <link href="http://yoursite.com/2019/07/25/ACM/Data%20Structure/Binary%20Indexed%20Tree/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20POJ2155%20Matrix/"/>
    <id>http://yoursite.com/2019/07/25/ACM/Data Structure/Binary Indexed Tree/树状数组 POJ2155 Matrix/</id>
    <published>2019-07-24T16:00:00.000Z</published>
    <updated>2019-09-19T13:07:54.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a><h1><center>Matrix</center></h1></h2><h2 id="POJ-2155"><a href="#POJ-2155" class="headerlink" title="[ POJ - 2155 ]  "></a><p align="right"><a href="http://poj.org/problem?id=2155" target="_blank" rel="noopener">[ POJ - 2155 ]</a></p>  </h2><p>题目大意：对一个n∗n的矩阵：<br>1.格式C x1 y1 x2 y2，表示将左上角为(x1,y1)，右下角为(x2,y2)的矩阵全部取反，即0变1，1变0.<br>2.Q x y，表示查询位置(x,y)的值.<br>设询问次数为t，则10^3, 1 ≤ t ≤ 10^5, 数据组数 ≤ 10.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>树状数组模板题，此题建立完整的二维树状数组板子</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line">ll t, m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll x, ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = x; i &gt; <span class="number">0</span>; i -= lowbit(i))</span><br><span class="line">       <span class="keyword">for</span> (ll j = y; j &gt; <span class="number">0</span>; j -= lowbit(j))</span><br><span class="line">            res += a[i][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll y, ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line">        <span class="keyword">for</span> (ll j = y; j &lt;= n; j += lowbit(j))</span><br><span class="line">            a[i][j] += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">        getchar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        ll x1, y1, x2, y2;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c %lld %lld"</span>, &amp;ch, &amp;x1, &amp;y1);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'Q'</span>) </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum(x1, y1) % <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'C'</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x2, &amp;y2);</span><br><span class="line">                add(x1, y1, <span class="number">1</span>);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y1, <span class="number">1</span>);</span><br><span class="line">                add(x1, y2 + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                add(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Matrix&quot;&gt;&lt;a href=&quot;#Matrix&quot; class=&quot;headerlink&quot; title=&quot;Matrix&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Matrix&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;h2 id=&quot;POJ-2155&quot;&gt;&lt;a href=&quot;#POJ
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>树状数组 POJ3468 A Simple Problem with Integers</title>
    <link href="http://yoursite.com/2019/07/25/ACM/Data%20Structure/Binary%20Indexed%20Tree/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20POJ3468%20A%20Simple%20Problem%20with%20Integers/"/>
    <id>http://yoursite.com/2019/07/25/ACM/Data Structure/Binary Indexed Tree/树状数组 POJ3468 A Simple Problem with Integers/</id>
    <published>2019-07-24T16:00:00.000Z</published>
    <updated>2019-09-19T13:03:10.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Simple-Problem-with-Integers"><a href="#A-Simple-Problem-with-Integers" class="headerlink" title="A Simple Problem with Integers"></a><h1><center>A Simple Problem with Integers</center></h1></h2><h2 id="POJ-3468"><a href="#POJ-3468" class="headerlink" title="[ POJ - 3468 ]  "></a><p align="right"><a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">[ POJ - 3468 ]</a></p>  </h2><p>题目大意：给一个长度为n的数列，有Q次操作Q代表查询区间 a b之间的累加和，操作C代表将a-b区间的所有数加上c</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>树状数组模板题，此题建立完整的一维树状数组板子</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n, m, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    ll a[<span class="number">500050</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (x; x &gt; <span class="number">0</span>; x -= lowbit(x))</span><br><span class="line">            a[x] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addinv</span><span class="params">(ll x, ll v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ll i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line">            a[i] += x * v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Sum</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(x; x &lt;= n; x += lowbit(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Suminv</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (x; x &gt; <span class="number">0</span>; x -= lowbit(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;bit, bitinv;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x)</span><br><span class="line">        <span class="keyword">return</span> bit.Sum(x) * x + bitinv.Suminv(x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll l, ll r, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bit.add(r, c);</span><br><span class="line">    bitinv.addinv(r, c);</span><br><span class="line">    <span class="keyword">if</span> (l &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        bit.add(l - <span class="number">1</span>, -c);</span><br><span class="line">        bitinv.addinv(l - <span class="number">1</span>, -c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;k);</span><br><span class="line">        add(i, i, k);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ll l, r, c;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c %lld %lld"</span>, &amp;ch, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'Q'</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum(r) - sum(l - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'C'</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c);</span><br><span class="line">            add(l, r, c);</span><br><span class="line">        &#125;</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-Simple-Problem-with-Integers&quot;&gt;&lt;a href=&quot;#A-Simple-Problem-with-Integers&quot; class=&quot;headerlink&quot; title=&quot;A Simple Problem with Integers&quot;&gt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2019年牛客多校第1场 赛后总结</title>
    <link href="http://yoursite.com/2019/07/18/ACM/Competition%20Summary/2019%E5%B9%B4%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC1%E5%9C%BA%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/07/18/ACM/Competition Summary/2019年牛客多校第1场赛后总结/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2020-01-12T15:07:57.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019年牛客多校第1场-赛后总结"><a href="#2019年牛客多校第1场-赛后总结" class="headerlink" title="2019年牛客多校第1场 赛后总结"></a><center>2019年牛客多校第1场 赛后总结</center></h1><hr><h3 id="A题-：Equivalent-Prefixes"><a href="#A题-：Equivalent-Prefixes" class="headerlink" title="A题 ：Equivalent Prefixes"></a>A题 ：Equivalent Prefixes</h3><p>&emsp;题意：就是给你两个有n个不同数的串，然后保证1-p区间内任选一个区间，使得区间中最小值的下标相同，找到最大的p值</p><p>&emsp;思路：我的思路是设置两个单调栈，然后每次的第i个数判断大小，放到栈顶（比它大的数弹出栈），当两个栈容量不同时，即不成立。</p><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s1, s2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (s1.size())    s1.pop();</span><br><span class="line">        <span class="keyword">while</span> (s2.size())    s2.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        s1.push(a[<span class="number">1</span>]);</span><br><span class="line">        s2.push(b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (s1.size() &amp;&amp; s1.top() &gt; a[i])</span><br><span class="line">                s1.pop();</span><br><span class="line">            s1.push(a[i]);</span><br><span class="line">            <span class="keyword">while</span> (s2.size() &amp;&amp; s2.top() &gt; b[i])</span><br><span class="line">                s2.pop();</span><br><span class="line">            s2.push(b[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s1.size() != s2.size())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="B题：Integration"><a href="#B题：Integration" class="headerlink" title="B题：Integration"></a>B题：Integration</h3><p>&emsp;题意：已知$ \int_{0}^{∞} \frac{1}{1 + x_{2} } dx = \frac{\pi}{2}$，求$\frac{1}{\pi } \int_{0}^{∞} \frac{1}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}dx $</p><p>这道题强行唤醒我的数学…但最终以失败告终…看了好几个巨巨的博客……这里感谢这位大佬的博客：<a href="https://blog.nowcoder.net/n/01372c5f542b4169a39b9fd48c7427cb" target="_blank" rel="noopener">2019牛客网暑期多校第一场B题</a></p><p>$ \frac{1}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}\,=\,\frac{c_{1} }{a_{1}^{2} + x^{2} }\,+\,\frac{c_{2} }{a_{2}^{2} + x^{2} }\,+…+\frac{c_{n} }{a_{n}^{2} + x^{2} } \\ \, \\<br>\qquad\quad\quad\;\;\, = \frac{c_{1}\cdot \prod_{i\neq 1 }(a_{i}^{2} + x^{2}) + …+c_{i}\cdot \prod_{j\neq i }(a_{j}^{2} + x^{2}) + … + +c_{n}\cdot \prod_{i\neq n }(a_{i}^{2} + x^{2})}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}$</p><p>我们可以得到: $\sum_{i = 1}^{n}C_{i}\cdot \prod_{j\neq i}(a_{i}^{2} + x^{2})\,=\,1$</p><p>由数学归纳法，可得：$C_{i}\,=\,\frac{1}{\prod_{j\neq i}(a_{j}^{2}-a_{i}^{2})}$</p><p>又因为$\int_{0}^{∞} \frac{1}{1 + x_{2} } dx = \frac{\pi}{2}$</p><p>$ \frac{1}{\pi } \int_{0}^{∞} \frac{1}{\prod_{i=1}^{n}(a_{i}^{2} + x^{2})}dx\,=\,\frac{1}{\pi }\sum_{i=1}^{n}\int_{0}^{∞}\frac{C_{i} }{a_{i}^{2}+x^{2} }dx $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\frac{1}{\pi }\sum_{i=1}^{n}C_{i}\int_{0}^{∞}\frac{1}{a_{i}^{2}+x^{2} }dx $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\frac{1}{\pi }\sum_{i=1}^{n}\frac{c_{i} }{a_{i} }\cdot \frac{\pi}{2} $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\sum_{i=1}^{n}\frac{c_{i} }{2a_{i} } $<br>$ \\\,\\ \qquad\qquad\qquad\qquad\;=\,\frac{1}{2}\sum_{i=1}^{n}\frac{1}{ {a_{i} }\cdot \prod_{j\neq i}(a_{j}^{2}-a_{i}^{2})} $</p><p>然后进行逆元，费马小定理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ll res = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                res *= (a[j] * a[j] % mod - a[i] * a[i] % mod);</span><br><span class="line">                res %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += qpow(<span class="number">2</span> * a[i] % mod * res % mod, mod - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans % mod + mod) % mod;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="E题：ABBA"><a href="#E题：ABBA" class="headerlink" title="E题：ABBA"></a>E题：ABBA</h3><p>&emsp;题意：有n个＂AB＂,m个＂BA＂，问能结合成多少个序列．这个要求是AB和BA的顺序不变，即A和B的相对位置不变，BA中可以穿插AB，反之亦然</p><p>那么我们采用dp，dp[i][j]表示放置i个A和j个B方案数<br>也就是说我们当前串也就是后面添加A还是添加B的情况  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] += dp[i - <span class="number">1</span>][j];</span><br><span class="line">dp[i][j] += dp[i][j - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>&emsp;当i ≤ n时，A可以随便放；<br>&emsp;当j ≤ m时，B可以随便放；<br>&emsp;当i &gt; n，如果放A，AB的数量要小于等于n，i - j是至少有多少个AB, i - j ≤ n；<br>&emsp;当j &gt; m，如果放B，BA的数量要小于等于m，j - i是至少有多少个BA, j - i ≤ m;<br>即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i - j &lt;= n) d[i][j] += d[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(j - i &lt;= m) d[i][j] += d[i][j - <span class="number">1</span>]];</span><br></pre></td></tr></table></figure><p>最终代码如下(PS: 用于数据组过多，memset会卡T，跟缓冲区有关)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m + n; j++)</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m + n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - j &lt; n)</span><br><span class="line">                    dp[i + <span class="number">1</span>][j] = (dp[i][j] + dp[i + <span class="number">1</span>][j]) % mod;</span><br><span class="line">                <span class="keyword">if</span> (j - i &lt; m)</span><br><span class="line">                    dp[i][j + <span class="number">1</span>] = (dp[i][j] + dp[i][j + <span class="number">1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[n + m][n + m]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="F题：Random-Point-in-Triangle"><a href="#F题：Random-Point-in-Triangle" class="headerlink" title="F题：Random Point in Triangle"></a>F题：Random Point in Triangle</h3><p>&emsp;题意：求三角形内部一个点连三个顶点形成的最大三角形面积的期望，再乘一个36</p><p>&emsp;答案是 11/2 倍三角形 ABC 的面积</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, y;</span><br><span class="line">&#125;a, b, c;</span><br><span class="line"></span><br><span class="line">point AB, BC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a.x &gt;&gt; a.y &gt;&gt; b.x &gt;&gt; b.y &gt;&gt; c.x &gt;&gt; c.y) &#123;</span><br><span class="line">        AB.x = b.x - a.x;</span><br><span class="line">        AB.y = b.y - a.y;</span><br><span class="line">        BC.x = c.x - b.x;</span><br><span class="line">        BC.y = c.y - b.y;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">abs</span>((AB.x * BC.y - AB.y * BC.x)) * <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="J题-：Fraction-Comparision"><a href="#J题-：Fraction-Comparision" class="headerlink" title="J题 ：Fraction Comparision"></a>J题 ：Fraction Comparision</h3><p>&emsp;题意：判断x/a和y/b的大小，其中1 ≤ x, y ≤ 10<sup>18</sup>， 1 ≤ a, b ≤ 10<sup>9</sup></p><p>签到题，这道题我们直接用的大整数写的，判断<code>x * b</code>和<code>y * a</code>，没什么好说的</p><p>其实出题人是想考察数学方面知识的，官方题解是这样的：</p><ol><li>先把 $\frac{x}{a}$ 写成 $[\frac{x}{a}] + \frac{x\,mod\,a}{a}$</li><li>先比整数部分，分数部分分子分母都在 10<sup>9</sup> 范围内，交叉相乘比较</li></ol><p>于是乎，上一下官方题解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">uint64_t</span>&gt; fcompare(<span class="keyword">uint64_t</span> x, <span class="keyword">uint32_t</span> a, <span class="keyword">uint64_t</span> y, <span class="keyword">uint32_t</span> b) &#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> p = x / a; <span class="comment">// p &lt;= (x / a) &lt; p + 1</span></span><br><span class="line">    <span class="keyword">uint64_t</span> q = y / b; <span class="comment">// q &lt;= (y / b) &lt; q + 1</span></span><br><span class="line">    <span class="keyword">if</span> (p != q) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;p, q&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    x %= a;</span><br><span class="line">    y %= b;</span><br><span class="line">    <span class="keyword">return</span> &#123;x * b, y * a&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> x, y;</span><br><span class="line">    <span class="keyword">uint32_t</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; a &gt;&gt; y &gt;&gt; b) &#123;</span><br><span class="line">        <span class="keyword">auto</span> result = fcompare(x, a, y, b);</span><br><span class="line">    <span class="keyword">if</span> (result.first == result.second)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result.first &lt; result.second)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"&lt;"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019年牛客多校第1场-赛后总结&quot;&gt;&lt;a href=&quot;#2019年牛客多校第1场-赛后总结&quot; class=&quot;headerlink&quot; title=&quot;2019年牛客多校第1场 赛后总结&quot;&gt;&lt;/a&gt;&lt;center&gt;2019年牛客多校第1场 赛后总结&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>树形DP入门 POJ-2342 没有上司的舞会.md</title>
    <link href="http://yoursite.com/2019/07/17/ACM/DP/Tree%20DP/%E6%A0%91%E5%BD%A2DP%E5%85%A5%E9%97%A8%20POJ-2342%20%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/"/>
    <id>http://yoursite.com/2019/07/17/ACM/DP/Tree DP/树形DP入门 POJ-2342 没有上司的舞会/</id>
    <published>2019-07-16T16:00:00.000Z</published>
    <updated>2019-09-29T04:55:46.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="没有上司的舞会-lt"><a href="#没有上司的舞会-lt" class="headerlink" title="没有上司的舞会&lt;/"></a><center>没有上司的舞会</center>&lt;/<center></center></h1><p align="right"><a href="https://vjudge.net/problem/POJ-2342" target="_blank" rel="noopener">[POJ - 2342]</a></p>  <hr><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>某大学有N个职员，编号为1~N。他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数Ri，但是呢，如果某个职员的上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。</p><h4><b>Input</b></h4><p>第一行一个整数N。(1&lt;=N&lt;=6000)<br>接下来N行，第i+1行表示i号职员的快乐指数Ri。(-128&lt;=Ri&lt;=127)<br>接下来N行分别代表每个结点的权值范围从-128到127<br>接下来N-1行，每行输入一对整数L,K。表示K是L的直接上司。, 最后一行输入0 0</p><h4><b>Output</b></h4><p>对于每组测试数据，输出一个整数Ans，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。</p><h4><b>Sample Input</b></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">36 </span><span class="number">9</span> <span class="number">80</span> <span class="number">69</span> <span class="number">85</span></span><br></pre></td></tr></table></figure><h4><b>Sample Output</b></h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure><hr><h3 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">6010</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">6010</span>], a[<span class="number">6010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[<span class="number">6010</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[x][<span class="number">1</span>] = a[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; son[x].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> id = son[x][i];</span><br><span class="line">        dfs(id);</span><br><span class="line">        dp[x][<span class="number">0</span>] += max(dp[id][<span class="number">0</span>], dp[id][<span class="number">1</span>]);</span><br><span class="line">        dp[x][<span class="number">1</span>] += dp[id][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        son[y].push_back(x);</span><br><span class="line">        v[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(dp[root][<span class="number">1</span>], dp[root][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    getchar(), getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h3><p>题解</p><p>这道题我们需要存储当前位置i开始往前m个位置的状态</p><p>在递推式<code>dp[i][j] = max(dp[i - 1][j &gt;&gt; 1], dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>中<br><code>dp[i - 1][j &gt;&gt; 1]</code>、<code>dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>为再往前一个节点为0或者1的状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1050</span>];</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">            sum++;</span><br><span class="line">        j &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum(j) &gt; q)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]) + w[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++)</span><br><span class="line">        sum = max(sum, dp[n][i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;没有上司的舞会-lt&quot;&gt;&lt;a href=&quot;#没有上司的舞会-lt&quot; class=&quot;headerlink&quot; title=&quot;没有上司的舞会&amp;lt;/&quot;&gt;&lt;/a&gt;&lt;center&gt;没有上司的舞会&lt;/center&gt;&amp;lt;/&lt;center&gt;&lt;/center&gt;&lt;/h1&gt;&lt;p 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树形DP" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树形DP" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>状压DP &amp;nbsp;Hiho-1044 &amp;nbsp;状态压缩</title>
    <link href="http://yoursite.com/2019/07/13/ACM/DP/State%20Compression%20DP/%E7%8A%B6%E5%8E%8BDP%20Hiho-1044%20%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/2019/07/13/ACM/DP/State Compression DP/状压DP Hiho-1044 状态压缩/</id>
    <published>2019-07-12T16:00:00.000Z</published>
    <updated>2019-09-23T10:59:12.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a><h1><center>状态压缩</center></h1></h2><p align="right"><a href="https://vjudge.net/problem/HihoCoder-1044" target="_blank" rel="noopener">[HihoCoder - 1044]</a></p>  <p>小Hi和小Ho在兑换到了喜欢的奖品之后，便继续起了他们的美国之行，思来想去，他们决定乘坐火车前往下一座城市——那座城市即将举行美食节！</p><p>但是不幸的是，小Hi和小Ho并没有能够买到很好的火车票——他们只能够乘坐最为破旧的火车进行他们的旅程。</p><p>不仅如此，因为美食节的吸引，许多人纷纷踏上了和小Hi小Ho一样的旅程，于是有相当多的人遭遇到了和小Hi小Ho一样的情况——这导致这辆车上的人非常非常的多，以至于都没有足够的位置能让每一个人都有地方坐下来。</p><p>小Hi和小Ho本着礼让他们的心情——当然还因为本来他们买的就是站票，老老实实的呆在两节车厢的结合处。他们本以为就能够这样安稳抵达目的地，但事与愿违，他们这节车厢的乘务员是一个强迫症，每隔一小会总是要清扫一次卫生，而时值深夜，大家都早已入睡，这种行为总是会惊醒一些人。而一旦相邻的一些乘客被惊醒了大多数的话，就会同乘务员吵起来，弄得大家都睡不好。</p><p>将这一切看在眼里的小Hi与小Ho决定利用他们的算法知识，来帮助这个有着强迫症的乘务员——在不与乘客吵起来的前提下尽可能多的清扫垃圾。</p><p>小Hi和小Ho所处的车厢可以被抽象成连成一列的N个位置，按顺序分别编号为1..N，每个位置上都有且仅有一名乘客在休息。同时每个位置上都有一些垃圾需要被清理，其中第i个位置的垃圾数量为Wi。乘务员可以选择其中一些位置进行清理，但是值得注意的是，一旦有编号连续的M个位置中有超过Q个的位置都在这一次清理中被选中的话（即这M个位置上的乘客有至少Q+1个被惊醒了），就会发生令人不愉快的口角。而小Hi和小Ho的任务是，计算选择哪些位置进行清理，在不发生口角的情况下，清扫尽可能多的垃圾。</p><h4><b>Input</b></h4><p>每个测试点（输入文件）有且仅有一组测试数据。</p><p>每组测试数据的第一行为三个正整数N、M和Q，意义如前文所述。</p><p>每组测试数据的第二行为N个整数，分别为W1到WN，代表每一个位置上的垃圾数目。</p><p>对于100%的数据，满足N&lt;=1000, 2&lt;=M&lt;=10,1&lt;=Q&lt;=M, Wi&lt;=100</p><h4><b>Output</b></h4><p>对于每组测试数据，输出一个整数Ans，表示在不发生口角的情况下，乘务员最多可以清扫的垃圾数目。</p><h4><b>Sample Input</b></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">36 </span><span class="number">9</span> <span class="number">80</span> <span class="number">69</span> <span class="number">85</span></span><br></pre></td></tr></table></figure><h4><b>Sample Output</b></h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure><hr><h2>题解</h2><p>这道题我们需要存储当前位置i开始往前m个位置的状态</p><p>在递推式<code>dp[i][j] = max(dp[i - 1][j &gt;&gt; 1], dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>中<br><code>dp[i - 1][j &gt;&gt; 1]</code>、<code>dp[i - 1][(j &gt;&gt; 1) + (1 &lt;&lt; m - 1)]) + w[i]</code>为再往前一个节点为0或者1的状态</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">1050</span>];</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">            sum++;</span><br><span class="line">        j &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum(j) &gt; q)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &amp; <span class="number">1</span>)</span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]) + w[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j &gt;&gt; <span class="number">1</span>], dp[i - <span class="number">1</span>][(j &gt;&gt; <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; m - <span class="number">1</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i++)</span><br><span class="line">        sum = max(sum, dp[n][i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;状态压缩&quot;&gt;&lt;a href=&quot;#状态压缩&quot; class=&quot;headerlink&quot; title=&quot;状态压缩&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;状态压缩&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://vjudg
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压DP" scheme="http://yoursite.com/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="状压DP" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
  </entry>
  
  <entry>
    <title>第十二届河南省ACM大学生程序设计竞赛赛后总结</title>
    <link href="http://yoursite.com/2019/05/09/ACM/Competition%20Summary/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E6%B2%B3%E5%8D%97%E7%9C%81ACM%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/09/ACM/Competition Summary/第十二届河南省ACM大学生程序设计竞赛赛后总结/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-05-09T05:23:38.475Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3><center>第十二届河南省ACM大学生程序设计竞赛赛后总结</center></h3><br>&emsp;&emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体育馆里面举办的了。<br>&lt;/br&gt;<br>下面说一下这次比赛的题吧<br>&emsp;&emsp;先说总结：题很烂，连我们自己院赛题出的都不如，题目难度和知识点分配不均，题目数据频频出问题，幕后据说也有不知名交易。<p></p><h4 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h4><p>&emsp;&emsp;一道KMP裸题，但是暴力也能过</p><h4 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h4><p>&emsp;&emsp;动态规划</p><h4 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h4><p>&emsp;&emsp;也是一道字符串处理问题，等于找若干个子串的不同就行，暴力就过</p><h4 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h4><p>&emsp;&emsp;一道线性方程的水题，求若干个点相加之和。但是开场两小时之内基本所有队伍交上去全是TLE。1e5的复杂度怎可能会超时，提问说数据有没有问题得到回复没有，但是后来又重判两次……<br>&emsp;&emsp;赛后我们讨论题意还有问题，题目第一句话告诉我们十点已经会发车，但是过的没有算直接sort就过了，不知道算是题描述错还是数据太水……</p><h4 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h4><p>&emsp;&emsp;题目大意是描述找有向图中先升高再降低的路，直接转化为树即可</p><h4 id="F题"><a href="#F题" class="headerlink" title="F题"></a>F题</h4><p>&emsp;&emsp;骂街题目1号<br>&emsp;&emsp;大意是一个01的图中找11的数量，剩下的1算加1，正确做法二分图匹配，赛后被爆出POJ原题，链接：<a href="http://poj.org/problem?id=3020" target="_blank" rel="noopener"> POJ - 3020: http://poj.org/problem?id=3020 </a><br>结果大家死活做不出来，有很多队伍后来AC了，说是用的贪心直接过，但是贪心很明显不对，比如<br><code>111</code><br><code>100</code><br>贪心跑出来的答案会是3，但明显是2</p><h4 id="G题"><a href="#G题" class="headerlink" title="G题"></a>G题</h4><p>&emsp;&emsp;骂街题目2号<br>&emsp;&emsp;一道强连通分量的题，但是全场除了冠军队没一个能再做出来，讲题人始终坚持数据没问题，冠军队1发就AC，赛后讲题支支吾吾，唔…不做评价</p><h4 id="H题"><a href="#H题" class="headerlink" title="H题"></a>H题</h4><p>&emsp;&emsp;一道很简答的最短路变形问题，但是全场基本被DFG三道题给绊住，基本没人做</p><h4 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h4><p>&emsp;&emsp;你能听到赛后讲题人直接说这个题我们拿出来就是专门为了防AK的，这道题我们也不会做的话吗？？？</p><h4 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h4><p>&emsp;&emsp;一道二叉树的，很多人直接用树存值过的，但是这道题我觉得还是数据水了，因为2<sup>31</sup>的数据量…<br>&emsp;&emsp;这道题分析后会发现是先求出X的因子中有多少个2，即2<sup>n</sup>，然后输出<code>x-2^n+1 x+2^n-1</code>即可<br>&lt;/br&gt;&lt;/br&gt;<br>以上基本就是这次比赛的总结，大家往年都是吐槽数据弱，比如去年的一道最小费用流问题直接深搜就过…结果今年直接数据出错不说，还……<br>今年比赛已经导致cy等大佬上台怒怼了，如果河南省赛再这么下去…哎……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;center&gt;第十二届河南省ACM大学生程序设计竞赛赛后总结&lt;/center&gt;&lt;/h3&gt;&lt;br&gt;&amp;emsp;&amp;emsp;这次是我跟菜瓜（色瓜）组织大家去比赛了，因为有天梯赛和CCPC省赛的组织经历，所以并没有出什么差错，比赛场地好评，这也算是头一个省赛在体
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="赛后总结" scheme="http://yoursite.com/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>并查集 POJ-1611 The Suspects</title>
    <link href="http://yoursite.com/2018/09/19/ACM/Data%20Structure/Union-Find%20Set/%E5%B9%B6%E6%9F%A5%E9%9B%86%20POJ-1611%20The%20Suspects/"/>
    <id>http://yoursite.com/2018/09/19/ACM/Data Structure/Union-Find Set/并查集 POJ-1611 The Suspects/</id>
    <published>2018-09-18T16:00:00.000Z</published>
    <updated>2019-09-20T03:21:07.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Suspects"><a href="#The-Suspects" class="headerlink" title="The Suspects"></a><h1><center>The Suspects</center></h1></h2><p align="right"><a href="http://poj.org/problem?id=1611" target="_blank" rel="noopener">[ POJ - 1611 ]</a></p>  <p>并查集裸题，需要注意一下合并时是序号大的合到小的当中，否则不一定会出现0，或者是find(i) == find(0)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fin freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fout freopen(<span class="meta-string">"out.txt"</span>, <span class="meta-string">"w"</span>, stdout)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxn];</span><br><span class="line"><span class="keyword">int</span> high[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        par[i] = i;</span><br><span class="line">        high[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (par[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> par[x] = find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">        par[y] = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        par[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IO;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">int</span> a, b, nu;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;nu, &amp;a);</span><br><span class="line">            nu--;</span><br><span class="line">            <span class="keyword">while</span> (nu--) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">                unite(a, b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (find(i) == <span class="number">0</span>)</span><br><span class="line">                ans++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-Suspects&quot;&gt;&lt;a href=&quot;#The-Suspects&quot; class=&quot;headerlink&quot; title=&quot;The Suspects&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;The Suspects&lt;/center&gt;&lt;/h1&gt;&lt;/h2&gt;&lt;p alig
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>并查集 POJ-2524 Ubiquitous Religion</title>
    <link href="http://yoursite.com/2018/09/19/ACM/Data%20Structure/Union-Find%20Set/%E5%B9%B6%E6%9F%A5%E9%9B%86%20POJ-2524%20Ubiquitous%20Religions/"/>
    <id>http://yoursite.com/2018/09/19/ACM/Data Structure/Union-Find Set/并查集 POJ-2524 Ubiquitous Religions/</id>
    <published>2018-09-18T16:00:00.000Z</published>
    <updated>2019-09-20T03:21:01.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubiquitous-Religion"><a href="#Ubiquitous-Religion" class="headerlink" title="Ubiquitous Religion"></a><h1><center>Ubiquitous Religion</center></h1></h2><p align="right"><a href="http://poj.org/problem?id=2524" target="_blank" rel="noopener">[ POJ - 2524 ]</a></p>  <p>并查集裸题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[maxn];</span><br><span class="line"><span class="keyword">int</span> high[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        par[i] = i;</span><br><span class="line">        high[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (par[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> par[x] = find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (high[x] &lt; high[y])</span><br><span class="line">        par[x] = y;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        par[y] = x;</span><br><span class="line">        <span class="keyword">if</span> (high[x] == high[y])</span><br><span class="line">            high[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">            unite(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (par[i] == i)</span><br><span class="line">                ans++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ++tot, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubiquitous-Religion&quot;&gt;&lt;a href=&quot;#Ubiquitous-Religion&quot; class=&quot;headerlink&quot; title=&quot;Ubiquitous Religion&quot;&gt;&lt;/a&gt;&lt;h1&gt;&lt;center&gt;Ubiquitous Religi
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/ACM/Data-Structure/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/ACM/Data-Structure/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>ftp打开方式更改为资源管理器方法</title>
    <link href="http://yoursite.com/2018/08/29/Windows/ftp%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E6%9B%B4%E6%94%B9%E4%B8%BA%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/08/29/Windows/ftp打开方式更改为资源管理器方法/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T02:38:46.997Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。<br>&emsp;目前我的系统是Windows10 1803.<br>&emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的<b>完全没有半毛钱效果</b>  </p><p>&emsp;在即将崩溃的时候发现了这篇文章<a href="https://blog.csdn.net/tianwuya217/article/details/8674622" target="_blank" rel="noopener">https://blog.csdn.net/tianwuya217/article/details/8674622</a><br>由于这篇文章博主操作系统是Win8,所以更改注册表时我发现内容结构不一样，不能按照这个修改方法，但是给我提供了一个思路就是修改[HKEY_CLASSES_ROOT\ftp]目录下的所有内容。  </p><p>&emsp;如果身旁有小伙伴电脑操作系统跟自己的一样，按照小伙伴的内容的更改即可。  </p><p>&emsp;下面列出我的更改内容供大家参考 </p><hr><ul><li><p>win + R 输入 regedit 打开注册表格, 直接地址栏输入[计算机\HKEY_CLASSES_ROOT\ftp]， 此时我发现我的文件夹里空空如也。（哇，这到底是哪个软件搞的鬼啊 (╯‵□′)╯ ︵ ┻━┻）</p></li><li><p>将(默认)的字符串值更改为 <code>URL:File Transfer Protocol</code><br>新建名为 AppUserModelID 字符串值, 输入<code>Microsoft.InternetExplorer.Default</code><br>新建名为 EditFlags DWORD(32位值), 输入 <code>2</code><br>新建名为 FriendlyTypeName 字符串值, 输入<code>@C:\WINDOWS\system32\ieframe.dll,-905</code><br>新建名为 ShellFolder 字符串值, 输入<code>{63da6ec0-2e98-11cf-8d82-444553540000}</code><br>新建名为 ShellFolder 字符串值, 输入<code>{E436EBB6-524F-11CE-9F53-0020AF0BA770}</code><br>新建名为 AppUserModelID 字符串值, 无输入  </p></li><li><p>在ftp中新建项, 命名为 Defaultlcon<br>将(默认)的字符串值更改为 <code>%SystemRoot%\system32\url.dll,0</code>   </p></li><li><p>在ftp中新建项, 命名为 shell<br>将(默认)的字符串值更改为 <code>open</code></p></li><li><p>在shell中新建项，命名为 open<br>新建名为 CommandId 字符串值, 输入 <code>IE.Protocol</code><br>(默认)字符串值无需更改  </p></li><li><p>在open中新建项， 命名为 command<br>将(默认)的字符串值更改为<br>&emsp;<code>&quot;C:\Program Files\Internet Explorer\IEXPLORE.EXE&quot; %1</code><br>新建名为 DelegateExecute 字符串值, 输入<code>{17FE9752-0B5A-4665-84CD-569794602F5C}</code>  </p></li><li><p>此时尝试一下，发现ftp可以用资源管理器打开了。</p></li></ul><hr><p>附上参考博客的博主的话:   </p><p>搜索问题最好看那些博客类，相对来说准确度较高！<br>&emsp;<small>——你想想大部分人为什么写博客？大部分都是自己千般万苦的搜索了半天或研究了半天才解决的问题。只是想用博客的形式记录下来，记录下自己的成就感。这成果来之不易 ~</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;今天要登陆一下学校的ftp服务器下载点东西，突然发现打开方式变成了chrome，然后就尝试了很多方法更改。&lt;br&gt;&amp;emsp;目前我的系统是Windows10 1803.&lt;br&gt;&amp;emsp;按照网上的更改按协议指定默认程序和从ie中更改之类的&lt;b&gt;完全没有半毛钱
      
    
    </summary>
    
      <category term="系统" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="windows" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F/windows/"/>
    
    
      <category term="系统" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
</feed>
